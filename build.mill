//| mill-version: 1.0.5
//| mill-jvm-version: 24
//| mill-jvm-opts: [ "--add-modules", "jdk.incubator.vector"]
//| mvnDeps:
//| - io.github.quafadas:millSite_mill1_3.7:0.0.54
//| - com.goyeau::mill-scalafix::0.6.0
//| - com.lihaoyi::mill-contrib-jmh:$MILL_VERSION

/** --add-modules=jdk.incubator.vector -Xss100m -Xmx4G
  */

package build

import mill.util.VcsVersion
import com.goyeau.mill.scalafix.ScalafixModule

import mill.scalalib.publish.Scope.Test
import mill.*, mill.scalalib.*, mill.scalajslib.*, mill.scalanativelib.*
import io.github.quafadas.millSite.*
import mill.*, scalalib.*, publish.*
import mill.scalajslib.api.*
import mill.scalanativelib.*

import mill.util.Jvm
import mill.api.Result
import com.goyeau.mill.scalafix.ScalafixModule
import mill.api.Task.Simple

// def format = mill.scalalib.scalafmt.ScalafmtModule

// mill __.compiledClassesAndSemanticDbFiles
object V:
  val spire = mvn"org.typelevel::spire::0.18.0"
  val laminar = mvn"com.raquo::laminar::17.2.0"
  val scalaTags = mvn"com.lihaoyi::scalatags::0.13.1"
  val scalaVersion = "3.7.2"
  val munitVersion = "1.1.1"
  val narr = mvn"ai.dragonfly::narr::1.0"
  val blas = mvn"dev.ludovic.netlib:blas:3.0.4"
end V

trait VecxtPublishModule extends PublishModule, ScalaModule:
  def scalaVersion = V.scalaVersion

  def publishVersion = VcsVersion.vcsState().format()

  // def mvnDeps = super.mvnDeps() ++ Seq(
  //   V.narr
  // )

  // override def scalacOptions = super.scalacOptions() ++ Seq("-explain-cyclic", "-Wunused:imports")

  override def pomSettings = Task {
    PomSettings(
      description = "Making cross platform compute intense problems less vexing",
      organization = "io.github.quafadas",
      url = "https://github.com/Quafadas/vecxt",
      licenses = Seq(License.`Apache-2.0`),
      versionControl = VersionControl.github("quafadas", "vecxt"),
      developers = Seq(
        Developer("quafadas", "Simon Parten", "https://github.com/quafadas")
      )
    )
  }
end VecxtPublishModule

val vecIncubatorFlag = Seq("--add-modules", "jdk.incubator.vector")

trait CommonJS extends ScalaJSModule:
  def scalaJSVersion = "1.19.0"
  // def mvnDeps = super.mvnDeps() ++ Seq(mvn"com.raquo::ew::0.2.0")
end CommonJS

trait CommonNative extends ScalaNativeModule with VecxtPublishModule:
  def mvnDeps = super.mvnDeps() ++ Seq(
    mvn"org.ekrich::sblas::0.7.0"
  )
  def scalaNativeVersion = "0.5.8"
end CommonNative

// object vecxt extends Module {
//   trait Shared extends CrossPlatformScalaModule with Common {
//     // common `core` settings here
//     trait SharedTests extends CommonTests {
//       // common `core` test settings here
//     }
//   }
//   object jvm extends Shared {
//     override def javacOptions: T[Seq[String]] = super.javacOptions() ++ vecIncubatorFlag
//     def forkArgs = super.forkArgs() ++ vecIncubatorFlag
//     def mvnDeps = super.mvnDeps() ++ Seq(
//       mvn"dev.ludovic.netlib:blas:3.0.4"
//     )

//     object test extends ScalaTests with SharedTests {
//       def forkArgs = super.forkArgs() ++ vecIncubatorFlag
//     }
//   }
//   object js extends Shared with CommonJS {
//     // js specific settings here
//     object test extends ScalaJSTests with SharedTests {
//         def moduleKind = ModuleKind.CommonJSModule
//     }
//   }

//   object native extends Shared with CommonNative {
//     // native specific settings here
//     object test extends ScalaNativeTests with SharedTests
//   }
// }

// object vecxtensions extends CrossPlatform {
//   override def moduleDeps: Seq[CrossPlatform] = Seq(vecxt)
//   trait Shared extends CrossPlatformScalaModule with Common {

//     // common `core` settings here
//     trait SharedTests extends CommonTests {
//       // common `core` test settings here
//     }
//   }
//   object jvm extends Shared {
//     override def javacOptions: T[Seq[String]] = super.javacOptions() ++ vecIncubatorFlag
//     def forkArgs = super.forkArgs() ++ vecIncubatorFlag
//     def mvnDeps = Seq(
//       mvn"org.typelevel::spire::${V.spire}"
//     )

//     object test extends ScalaTests with SharedTests {
//       def forkArgs = super.forkArgs() ++ vecIncubatorFlag
//     }
//   }
//   object js extends Shared with CommonJS {
//     override def mvnDeps: Target[Agg[Dep]] = super.mvnDeps() ++ Seq(
//       mvn"com.lihaoyi::scalatags::${V.scalatags}",
//       mvn"com.raquo::laminar::${V.laminar}",
//       mvn"org.typelevel::spire::${V.spire}"
//     )
//     // js specific settings here
//     object test extends ScalaJSTests with SharedTests {
//       def moduleKind = ModuleKind.CommonJSModule
//     }
//   }

//   object native extends Shared with CommonNative {
//     // native specific settings here
//     object test extends ScalaNativeTests with SharedTests
//   }
// }

// object integration extends ScalaModule with CommonTests {
//   def scalaVersion: T[String] = vecxt.jvm.scalaVersion

// }

// note that scastic won't work, as I don't think we can start a JVM with the incubator flag.

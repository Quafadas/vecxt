package build.vecxtensions

import mill.*, scalalib.*, scalajslib.*, publish.*
import mill.scalajslib.api.ModuleKind
import com.goyeau.mill.scalafix.ScalafixModule
import mill.api.Task.Simple


object `package` extends Module {
  trait VecxtensionModule extends PlatformScalaModule with build.VecxtPublishModule  {
    def mvnDeps = super.mvnDeps() ++ Seq(
      build.V.narr,
      build.V.scalaTags
    )
    trait VecxtTest extends ScalaTests, TestModule.Munit   {
      def mvnDeps = super.mvnDeps() ++ Seq(
        mvn"org.scalameta::munit::${build.V.munitVersion}",
      )
      override def forkArgs: Simple[Seq[String]] = super.forkArgs() ++ build.vecIncubatorFlag
    }
  }



  object jvm extends VecxtensionModule {
    def moduleDeps = Seq(build.vecxt.jvm)
    override def scalaVersion = build.V.scalaVersion
    override def forkArgs = super.forkArgs() ++ build.vecIncubatorFlag
    def mvnDeps = super.mvnDeps() ++ Seq(
      build.V.blas,
      build.V.spire
    )

    object test extends VecxtTest, ScalaTests {
      def moduleDeps = Seq(jvm)
      override def forkArgs: Simple[Seq[String]] = super.forkArgs() ++ build.vecIncubatorFlag
    }
  }
  object js extends VecxtensionModule with build.CommonJS {
    def moduleDeps = Seq(build.vecxt.js)
    override def mvnDeps = super.mvnDeps() ++ Seq(
      build.V.laminar,
      build.V.spire
    )
    def moduleKind = ModuleKind.ESModule
    object test extends VecxtTest, ScalaJSTests {
      def moduleDeps = Seq(js)
      def moduleKind = ModuleKind.CommonJSModule
    }
  }
  object native extends VecxtensionModule with build.CommonNative {
    def moduleDeps = Seq(build.vecxt.native)
    override def mvnDeps = super.mvnDeps()

    object test extends ScalaNativeTests, VecxtTest {
      override def moduleDeps = Seq(native)
    }
  }
}
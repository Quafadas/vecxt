// Generated by jextract

package blis;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class cblas_h extends cblas_h$shared {

    cblas_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();


    static {
        System.loadLibrary("blis");
    }

        static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    private static final int CblasRowMajor = (int)101L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_ORDER.CblasRowMajor = 101
     * }
     */
    public static int CblasRowMajor() {
        return CblasRowMajor;
    }
    private static final int CblasColMajor = (int)102L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_ORDER.CblasColMajor = 102
     * }
     */
    public static int CblasColMajor() {
        return CblasColMajor;
    }
    private static final int CblasNoTrans = (int)111L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_TRANSPOSE.CblasNoTrans = 111
     * }
     */
    public static int CblasNoTrans() {
        return CblasNoTrans;
    }
    private static final int CblasTrans = (int)112L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_TRANSPOSE.CblasTrans = 112
     * }
     */
    public static int CblasTrans() {
        return CblasTrans;
    }
    private static final int CblasConjTrans = (int)113L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_TRANSPOSE.CblasConjTrans = 113
     * }
     */
    public static int CblasConjTrans() {
        return CblasConjTrans;
    }
    private static final int CblasUpper = (int)121L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_UPLO.CblasUpper = 121
     * }
     */
    public static int CblasUpper() {
        return CblasUpper;
    }
    private static final int CblasLower = (int)122L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_UPLO.CblasLower = 122
     * }
     */
    public static int CblasLower() {
        return CblasLower;
    }
    private static final int CblasNonUnit = (int)131L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_DIAG.CblasNonUnit = 131
     * }
     */
    public static int CblasNonUnit() {
        return CblasNonUnit;
    }
    private static final int CblasUnit = (int)132L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_DIAG.CblasUnit = 132
     * }
     */
    public static int CblasUnit() {
        return CblasUnit;
    }
    private static final int CblasLeft = (int)141L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_SIDE.CblasLeft = 141
     * }
     */
    public static int CblasLeft() {
        return CblasLeft;
    }
    private static final int CblasRight = (int)142L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_SIDE.CblasRight = 142
     * }
     */
    public static int CblasRight() {
        return CblasRight;
    }

    private static class cblas_dgemv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_DOUBLE,
            cblas_h.C_POINTER,
            cblas_h.C_INT,
            cblas_h.C_POINTER,
            cblas_h.C_INT,
            cblas_h.C_DOUBLE,
            cblas_h.C_POINTER,
            cblas_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("cblas_dgemv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cblas_dgemv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, f77_int M, f77_int N, double alpha, const double *A, f77_int lda, const double *X, f77_int incX, double beta, double *Y, f77_int incY)
     * }
     */
    public static FunctionDescriptor cblas_dgemv$descriptor() {
        return cblas_dgemv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cblas_dgemv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, f77_int M, f77_int N, double alpha, const double *A, f77_int lda, const double *X, f77_int incX, double beta, double *Y, f77_int incY)
     * }
     */
    public static MethodHandle cblas_dgemv$handle() {
        return cblas_dgemv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cblas_dgemv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, f77_int M, f77_int N, double alpha, const double *A, f77_int lda, const double *X, f77_int incX, double beta, double *Y, f77_int incY)
     * }
     */
    public static MemorySegment cblas_dgemv$address() {
        return cblas_dgemv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cblas_dgemv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, f77_int M, f77_int N, double alpha, const double *A, f77_int lda, const double *X, f77_int incX, double beta, double *Y, f77_int incY)
     * }
     */
    public static void cblas_dgemv(int order, int TransA, int M, int N, double alpha, MemorySegment A, int lda, MemorySegment X, int incX, double beta, MemorySegment Y, int incY) {
        var mh$ = cblas_dgemv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cblas_dgemv", order, TransA, M, N, alpha, A, lda, X, incX, beta, Y, incY);
            }
            mh$.invokeExact(order, TransA, M, N, alpha, A, lda, X, incX, beta, Y, incY);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cblas_dgemm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_DOUBLE,
            cblas_h.C_POINTER,
            cblas_h.C_INT,
            cblas_h.C_POINTER,
            cblas_h.C_INT,
            cblas_h.C_DOUBLE,
            cblas_h.C_POINTER,
            cblas_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("cblas_dgemm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cblas_dgemm(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, f77_int M, f77_int N, f77_int K, double alpha, const double *A, f77_int lda, const double *B, f77_int ldb, double beta, double *C, f77_int ldc)
     * }
     */
    public static FunctionDescriptor cblas_dgemm$descriptor() {
        return cblas_dgemm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cblas_dgemm(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, f77_int M, f77_int N, f77_int K, double alpha, const double *A, f77_int lda, const double *B, f77_int ldb, double beta, double *C, f77_int ldc)
     * }
     */
    public static MethodHandle cblas_dgemm$handle() {
        return cblas_dgemm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cblas_dgemm(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, f77_int M, f77_int N, f77_int K, double alpha, const double *A, f77_int lda, const double *B, f77_int ldb, double beta, double *C, f77_int ldc)
     * }
     */
    public static MemorySegment cblas_dgemm$address() {
        return cblas_dgemm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cblas_dgemm(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, f77_int M, f77_int N, f77_int K, double alpha, const double *A, f77_int lda, const double *B, f77_int ldb, double beta, double *C, f77_int ldc)
     * }
     */
    public static void cblas_dgemm(int Order, int TransA, int TransB, int M, int N, int K, double alpha, MemorySegment A, int lda, MemorySegment B, int ldb, double beta, MemorySegment C, int ldc) {
        var mh$ = cblas_dgemm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cblas_dgemm", Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
            }
            mh$.invokeExact(Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cblas_dgemmt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_INT,
            cblas_h.C_DOUBLE,
            cblas_h.C_POINTER,
            cblas_h.C_INT,
            cblas_h.C_POINTER,
            cblas_h.C_INT,
            cblas_h.C_DOUBLE,
            cblas_h.C_POINTER,
            cblas_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("cblas_dgemmt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cblas_dgemmt(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, f77_int N, f77_int K, double alpha, const double *A, f77_int lda, const double *B, f77_int ldb, double beta, double *C, f77_int ldc)
     * }
     */
    public static FunctionDescriptor cblas_dgemmt$descriptor() {
        return cblas_dgemmt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cblas_dgemmt(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, f77_int N, f77_int K, double alpha, const double *A, f77_int lda, const double *B, f77_int ldb, double beta, double *C, f77_int ldc)
     * }
     */
    public static MethodHandle cblas_dgemmt$handle() {
        return cblas_dgemmt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cblas_dgemmt(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, f77_int N, f77_int K, double alpha, const double *A, f77_int lda, const double *B, f77_int ldb, double beta, double *C, f77_int ldc)
     * }
     */
    public static MemorySegment cblas_dgemmt$address() {
        return cblas_dgemmt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cblas_dgemmt(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, f77_int N, f77_int K, double alpha, const double *A, f77_int lda, const double *B, f77_int ldb, double beta, double *C, f77_int ldc)
     * }
     */
    public static void cblas_dgemmt(int Order, int Uplo, int TransA, int TransB, int N, int K, double alpha, MemorySegment A, int lda, MemorySegment B, int ldb, double beta, MemorySegment C, int ldc) {
        var mh$ = cblas_dgemmt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cblas_dgemmt", Order, Uplo, TransA, TransB, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
            }
            mh$.invokeExact(Order, Uplo, TransA, TransB, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cblas_dgemm_batch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            cblas_h.C_INT,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_POINTER,
            cblas_h.C_INT,
            cblas_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("cblas_dgemm_batch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cblas_dgemm_batch(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE *TransA_array, enum CBLAS_TRANSPOSE *TransB_array, f77_int *M_array, f77_int *N_array, f77_int *K_array, const double *alpha_array, const double **A, f77_int *lda_array, const double **B, f77_int *ldb_array, const double *beta_array, double **C, f77_int *ldc_array, f77_int group_count, f77_int *group_size)
     * }
     */
    public static FunctionDescriptor cblas_dgemm_batch$descriptor() {
        return cblas_dgemm_batch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cblas_dgemm_batch(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE *TransA_array, enum CBLAS_TRANSPOSE *TransB_array, f77_int *M_array, f77_int *N_array, f77_int *K_array, const double *alpha_array, const double **A, f77_int *lda_array, const double **B, f77_int *ldb_array, const double *beta_array, double **C, f77_int *ldc_array, f77_int group_count, f77_int *group_size)
     * }
     */
    public static MethodHandle cblas_dgemm_batch$handle() {
        return cblas_dgemm_batch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cblas_dgemm_batch(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE *TransA_array, enum CBLAS_TRANSPOSE *TransB_array, f77_int *M_array, f77_int *N_array, f77_int *K_array, const double *alpha_array, const double **A, f77_int *lda_array, const double **B, f77_int *ldb_array, const double *beta_array, double **C, f77_int *ldc_array, f77_int group_count, f77_int *group_size)
     * }
     */
    public static MemorySegment cblas_dgemm_batch$address() {
        return cblas_dgemm_batch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cblas_dgemm_batch(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE *TransA_array, enum CBLAS_TRANSPOSE *TransB_array, f77_int *M_array, f77_int *N_array, f77_int *K_array, const double *alpha_array, const double **A, f77_int *lda_array, const double **B, f77_int *ldb_array, const double *beta_array, double **C, f77_int *ldc_array, f77_int group_count, f77_int *group_size)
     * }
     */
    public static void cblas_dgemm_batch(int Order, MemorySegment TransA_array, MemorySegment TransB_array, MemorySegment M_array, MemorySegment N_array, MemorySegment K_array, MemorySegment alpha_array, MemorySegment A, MemorySegment lda_array, MemorySegment B, MemorySegment ldb_array, MemorySegment beta_array, MemorySegment C, MemorySegment ldc_array, int group_count, MemorySegment group_size) {
        var mh$ = cblas_dgemm_batch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cblas_dgemm_batch", Order, TransA_array, TransB_array, M_array, N_array, K_array, alpha_array, A, lda_array, B, ldb_array, beta_array, C, ldc_array, group_count, group_size);
            }
            mh$.invokeExact(Order, TransA_array, TransB_array, M_array, N_array, K_array, alpha_array, A, lda_array, B, ldb_array, beta_array, C, ldc_array, group_count, group_size);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}


// Generated by jextract

package mlx;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct __darwin_ucontext {
 *     int uc_onstack;
 *     __darwin_sigset_t uc_sigmask;
 *     struct __darwin_sigaltstack uc_stack;
 *     struct __darwin_ucontext *uc_link;
 *     __darwin_size_t uc_mcsize;
 *     struct __darwin_mcontext64 *uc_mcontext;
 * }
 * }
 */
public class __darwin_ucontext {

    __darwin_ucontext() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mlx_h.C_INT.withName("uc_onstack"),
        mlx_h.C_INT.withName("uc_sigmask"),
        __darwin_sigaltstack.layout().withName("uc_stack"),
        mlx_h.C_POINTER.withName("uc_link"),
        mlx_h.C_LONG.withName("uc_mcsize"),
        mlx_h.C_POINTER.withName("uc_mcontext")
    ).withName("__darwin_ucontext");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt uc_onstack$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uc_onstack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int uc_onstack
     * }
     */
    public static final OfInt uc_onstack$layout() {
        return uc_onstack$LAYOUT;
    }

    private static final long uc_onstack$OFFSET = $LAYOUT.byteOffset(groupElement("uc_onstack"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int uc_onstack
     * }
     */
    public static final long uc_onstack$offset() {
        return uc_onstack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int uc_onstack
     * }
     */
    public static int uc_onstack(MemorySegment struct) {
        return struct.get(uc_onstack$LAYOUT, uc_onstack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int uc_onstack
     * }
     */
    public static void uc_onstack(MemorySegment struct, int fieldValue) {
        struct.set(uc_onstack$LAYOUT, uc_onstack$OFFSET, fieldValue);
    }

    private static final OfInt uc_sigmask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uc_sigmask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __darwin_sigset_t uc_sigmask
     * }
     */
    public static final OfInt uc_sigmask$layout() {
        return uc_sigmask$LAYOUT;
    }

    private static final long uc_sigmask$OFFSET = $LAYOUT.byteOffset(groupElement("uc_sigmask"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __darwin_sigset_t uc_sigmask
     * }
     */
    public static final long uc_sigmask$offset() {
        return uc_sigmask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __darwin_sigset_t uc_sigmask
     * }
     */
    public static int uc_sigmask(MemorySegment struct) {
        return struct.get(uc_sigmask$LAYOUT, uc_sigmask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __darwin_sigset_t uc_sigmask
     * }
     */
    public static void uc_sigmask(MemorySegment struct, int fieldValue) {
        struct.set(uc_sigmask$LAYOUT, uc_sigmask$OFFSET, fieldValue);
    }

    private static final GroupLayout uc_stack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("uc_stack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct __darwin_sigaltstack uc_stack
     * }
     */
    public static final GroupLayout uc_stack$layout() {
        return uc_stack$LAYOUT;
    }

    private static final long uc_stack$OFFSET = $LAYOUT.byteOffset(groupElement("uc_stack"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct __darwin_sigaltstack uc_stack
     * }
     */
    public static final long uc_stack$offset() {
        return uc_stack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct __darwin_sigaltstack uc_stack
     * }
     */
    public static MemorySegment uc_stack(MemorySegment struct) {
        return struct.asSlice(uc_stack$OFFSET, uc_stack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct __darwin_sigaltstack uc_stack
     * }
     */
    public static void uc_stack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, uc_stack$OFFSET, uc_stack$LAYOUT.byteSize());
    }

    private static final AddressLayout uc_link$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("uc_link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct __darwin_ucontext *uc_link
     * }
     */
    public static final AddressLayout uc_link$layout() {
        return uc_link$LAYOUT;
    }

    private static final long uc_link$OFFSET = $LAYOUT.byteOffset(groupElement("uc_link"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct __darwin_ucontext *uc_link
     * }
     */
    public static final long uc_link$offset() {
        return uc_link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct __darwin_ucontext *uc_link
     * }
     */
    public static MemorySegment uc_link(MemorySegment struct) {
        return struct.get(uc_link$LAYOUT, uc_link$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct __darwin_ucontext *uc_link
     * }
     */
    public static void uc_link(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(uc_link$LAYOUT, uc_link$OFFSET, fieldValue);
    }

    private static final OfLong uc_mcsize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("uc_mcsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __darwin_size_t uc_mcsize
     * }
     */
    public static final OfLong uc_mcsize$layout() {
        return uc_mcsize$LAYOUT;
    }

    private static final long uc_mcsize$OFFSET = $LAYOUT.byteOffset(groupElement("uc_mcsize"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __darwin_size_t uc_mcsize
     * }
     */
    public static final long uc_mcsize$offset() {
        return uc_mcsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __darwin_size_t uc_mcsize
     * }
     */
    public static long uc_mcsize(MemorySegment struct) {
        return struct.get(uc_mcsize$LAYOUT, uc_mcsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __darwin_size_t uc_mcsize
     * }
     */
    public static void uc_mcsize(MemorySegment struct, long fieldValue) {
        struct.set(uc_mcsize$LAYOUT, uc_mcsize$OFFSET, fieldValue);
    }

    private static final AddressLayout uc_mcontext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("uc_mcontext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct __darwin_mcontext64 *uc_mcontext
     * }
     */
    public static final AddressLayout uc_mcontext$layout() {
        return uc_mcontext$LAYOUT;
    }

    private static final long uc_mcontext$OFFSET = $LAYOUT.byteOffset(groupElement("uc_mcontext"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct __darwin_mcontext64 *uc_mcontext
     * }
     */
    public static final long uc_mcontext$offset() {
        return uc_mcontext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct __darwin_mcontext64 *uc_mcontext
     * }
     */
    public static MemorySegment uc_mcontext(MemorySegment struct) {
        return struct.get(uc_mcontext$LAYOUT, uc_mcontext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct __darwin_mcontext64 *uc_mcontext
     * }
     */
    public static void uc_mcontext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(uc_mcontext$LAYOUT, uc_mcontext$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package mlx;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sigevent {
 *     int sigev_notify;
 *     int sigev_signo;
 *     union sigval sigev_value;
 *     void (*sigev_notify_function)(union sigval);
 *     pthread_attr_t *sigev_notify_attributes;
 * }
 * }
 */
public class sigevent {

    sigevent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mlx_h.C_INT.withName("sigev_notify"),
        mlx_h.C_INT.withName("sigev_signo"),
        sigval.layout().withName("sigev_value"),
        mlx_h.C_POINTER.withName("sigev_notify_function"),
        mlx_h.C_POINTER.withName("sigev_notify_attributes")
    ).withName("sigevent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sigev_notify$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sigev_notify"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sigev_notify
     * }
     */
    public static final OfInt sigev_notify$layout() {
        return sigev_notify$LAYOUT;
    }

    private static final long sigev_notify$OFFSET = $LAYOUT.byteOffset(groupElement("sigev_notify"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sigev_notify
     * }
     */
    public static final long sigev_notify$offset() {
        return sigev_notify$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sigev_notify
     * }
     */
    public static int sigev_notify(MemorySegment struct) {
        return struct.get(sigev_notify$LAYOUT, sigev_notify$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sigev_notify
     * }
     */
    public static void sigev_notify(MemorySegment struct, int fieldValue) {
        struct.set(sigev_notify$LAYOUT, sigev_notify$OFFSET, fieldValue);
    }

    private static final OfInt sigev_signo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sigev_signo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sigev_signo
     * }
     */
    public static final OfInt sigev_signo$layout() {
        return sigev_signo$LAYOUT;
    }

    private static final long sigev_signo$OFFSET = $LAYOUT.byteOffset(groupElement("sigev_signo"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sigev_signo
     * }
     */
    public static final long sigev_signo$offset() {
        return sigev_signo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sigev_signo
     * }
     */
    public static int sigev_signo(MemorySegment struct) {
        return struct.get(sigev_signo$LAYOUT, sigev_signo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sigev_signo
     * }
     */
    public static void sigev_signo(MemorySegment struct, int fieldValue) {
        struct.set(sigev_signo$LAYOUT, sigev_signo$OFFSET, fieldValue);
    }

    private static final GroupLayout sigev_value$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sigev_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union sigval sigev_value
     * }
     */
    public static final GroupLayout sigev_value$layout() {
        return sigev_value$LAYOUT;
    }

    private static final long sigev_value$OFFSET = $LAYOUT.byteOffset(groupElement("sigev_value"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union sigval sigev_value
     * }
     */
    public static final long sigev_value$offset() {
        return sigev_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union sigval sigev_value
     * }
     */
    public static MemorySegment sigev_value(MemorySegment struct) {
        return struct.asSlice(sigev_value$OFFSET, sigev_value$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union sigval sigev_value
     * }
     */
    public static void sigev_value(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sigev_value$OFFSET, sigev_value$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*sigev_notify_function)(union sigval)
     * }
     */
    public final static class sigev_notify_function {

        private sigev_notify_function() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sigval.layout()
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mlx_h.upcallHandle(sigev_notify_function.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(sigev_notify_function.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout sigev_notify_function$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sigev_notify_function"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*sigev_notify_function)(union sigval)
     * }
     */
    public static final AddressLayout sigev_notify_function$layout() {
        return sigev_notify_function$LAYOUT;
    }

    private static final long sigev_notify_function$OFFSET = $LAYOUT.byteOffset(groupElement("sigev_notify_function"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*sigev_notify_function)(union sigval)
     * }
     */
    public static final long sigev_notify_function$offset() {
        return sigev_notify_function$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*sigev_notify_function)(union sigval)
     * }
     */
    public static MemorySegment sigev_notify_function(MemorySegment struct) {
        return struct.get(sigev_notify_function$LAYOUT, sigev_notify_function$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*sigev_notify_function)(union sigval)
     * }
     */
    public static void sigev_notify_function(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sigev_notify_function$LAYOUT, sigev_notify_function$OFFSET, fieldValue);
    }

    private static final AddressLayout sigev_notify_attributes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sigev_notify_attributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pthread_attr_t *sigev_notify_attributes
     * }
     */
    public static final AddressLayout sigev_notify_attributes$layout() {
        return sigev_notify_attributes$LAYOUT;
    }

    private static final long sigev_notify_attributes$OFFSET = $LAYOUT.byteOffset(groupElement("sigev_notify_attributes"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pthread_attr_t *sigev_notify_attributes
     * }
     */
    public static final long sigev_notify_attributes$offset() {
        return sigev_notify_attributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pthread_attr_t *sigev_notify_attributes
     * }
     */
    public static MemorySegment sigev_notify_attributes(MemorySegment struct) {
        return struct.get(sigev_notify_attributes$LAYOUT, sigev_notify_attributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pthread_attr_t *sigev_notify_attributes
     * }
     */
    public static void sigev_notify_attributes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sigev_notify_attributes$LAYOUT, sigev_notify_attributes$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


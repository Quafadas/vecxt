// Generated by jextract

package mlx;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct __darwin_arm_sve_p_state {
 *     char __p[16][32];
 * }
 * }
 */
public class __darwin_arm_sve_p_state {

    __darwin_arm_sve_p_state() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, MemoryLayout.sequenceLayout(32, mlx_h.C_CHAR)).withName("__p")
    ).withName("__darwin_arm_sve_p_state");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout __p$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__p"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char __p[16][32]
     * }
     */
    public static final SequenceLayout __p$layout() {
        return __p$LAYOUT;
    }

    private static final long __p$OFFSET = $LAYOUT.byteOffset(groupElement("__p"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char __p[16][32]
     * }
     */
    public static final long __p$offset() {
        return __p$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char __p[16][32]
     * }
     */
    public static MemorySegment __p(MemorySegment struct) {
        return struct.asSlice(__p$OFFSET, __p$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char __p[16][32]
     * }
     */
    public static void __p(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __p$OFFSET, __p$LAYOUT.byteSize());
    }

    private static long[] __p$DIMS = { 16, 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char __p[16][32]
     * }
     */
    public static long[] __p$dimensions() {
        return __p$DIMS;
    }
    private static final VarHandle __p$ELEM_HANDLE = __p$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char __p[16][32]
     * }
     */
    public static byte __p(MemorySegment struct, long index0, long index1) {
        return (byte)__p$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char __p[16][32]
     * }
     */
    public static void __p(MemorySegment struct, long index0, long index1, byte fieldValue) {
        __p$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


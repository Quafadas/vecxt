// Generated by jextract

package mlx;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct mlx_io_vtable_ {
 *     bool (*is_open)(void *);
 *     bool (*good)(void *);
 *     size_t (*tell)(void *);
 *     void (*seek)(void *, int64_t, int);
 *     void (*read)(void *, char *, size_t);
 *     void (*read_at_offset)(void *, char *, size_t, size_t);
 *     void (*write)(void *, const char *, size_t);
 *     const char *(*label)(void *);
 *     void (*free)(void *);
 * }
 * }
 */
public class mlx_io_vtable_ {

    mlx_io_vtable_() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mlx_h.C_POINTER.withName("is_open"),
        mlx_h.C_POINTER.withName("good"),
        mlx_h.C_POINTER.withName("tell"),
        mlx_h.C_POINTER.withName("seek"),
        mlx_h.C_POINTER.withName("read"),
        mlx_h.C_POINTER.withName("read_at_offset"),
        mlx_h.C_POINTER.withName("write"),
        mlx_h.C_POINTER.withName("label"),
        mlx_h.C_POINTER.withName("free")
    ).withName("mlx_io_vtable_");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * bool (*is_open)(void *)
     * }
     */
    public final static class is_open {

        private is_open() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            boolean apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            mlx_h.C_BOOL,
            mlx_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mlx_h.upcallHandle(is_open.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(is_open.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static boolean invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (boolean) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout is_open$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("is_open"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool (*is_open)(void *)
     * }
     */
    public static final AddressLayout is_open$layout() {
        return is_open$LAYOUT;
    }

    private static final long is_open$OFFSET = $LAYOUT.byteOffset(groupElement("is_open"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool (*is_open)(void *)
     * }
     */
    public static final long is_open$offset() {
        return is_open$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool (*is_open)(void *)
     * }
     */
    public static MemorySegment is_open(MemorySegment struct) {
        return struct.get(is_open$LAYOUT, is_open$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool (*is_open)(void *)
     * }
     */
    public static void is_open(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(is_open$LAYOUT, is_open$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * bool (*good)(void *)
     * }
     */
    public final static class good {

        private good() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            boolean apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            mlx_h.C_BOOL,
            mlx_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mlx_h.upcallHandle(good.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(good.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static boolean invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (boolean) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout good$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("good"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool (*good)(void *)
     * }
     */
    public static final AddressLayout good$layout() {
        return good$LAYOUT;
    }

    private static final long good$OFFSET = $LAYOUT.byteOffset(groupElement("good"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool (*good)(void *)
     * }
     */
    public static final long good$offset() {
        return good$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool (*good)(void *)
     * }
     */
    public static MemorySegment good(MemorySegment struct) {
        return struct.get(good$LAYOUT, good$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool (*good)(void *)
     * }
     */
    public static void good(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(good$LAYOUT, good$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * size_t (*tell)(void *)
     * }
     */
    public final static class tell {

        private tell() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            mlx_h.C_LONG,
            mlx_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mlx_h.upcallHandle(tell.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(tell.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout tell$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tell"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t (*tell)(void *)
     * }
     */
    public static final AddressLayout tell$layout() {
        return tell$LAYOUT;
    }

    private static final long tell$OFFSET = $LAYOUT.byteOffset(groupElement("tell"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t (*tell)(void *)
     * }
     */
    public static final long tell$offset() {
        return tell$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t (*tell)(void *)
     * }
     */
    public static MemorySegment tell(MemorySegment struct) {
        return struct.get(tell$LAYOUT, tell$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t (*tell)(void *)
     * }
     */
    public static void tell(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tell$LAYOUT, tell$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*seek)(void *, int64_t, int)
     * }
     */
    public final static class seek {

        private seek() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mlx_h.C_POINTER,
            mlx_h.C_LONG_LONG,
            mlx_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mlx_h.upcallHandle(seek.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(seek.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, long _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout seek$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seek"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*seek)(void *, int64_t, int)
     * }
     */
    public static final AddressLayout seek$layout() {
        return seek$LAYOUT;
    }

    private static final long seek$OFFSET = $LAYOUT.byteOffset(groupElement("seek"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*seek)(void *, int64_t, int)
     * }
     */
    public static final long seek$offset() {
        return seek$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*seek)(void *, int64_t, int)
     * }
     */
    public static MemorySegment seek(MemorySegment struct) {
        return struct.get(seek$LAYOUT, seek$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*seek)(void *, int64_t, int)
     * }
     */
    public static void seek(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seek$LAYOUT, seek$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*read)(void *, char *, size_t)
     * }
     */
    public final static class read {

        private read() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mlx_h.C_POINTER,
            mlx_h.C_POINTER,
            mlx_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mlx_h.upcallHandle(read.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*read)(void *, char *, size_t)
     * }
     */
    public static final AddressLayout read$layout() {
        return read$LAYOUT;
    }

    private static final long read$OFFSET = $LAYOUT.byteOffset(groupElement("read"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*read)(void *, char *, size_t)
     * }
     */
    public static final long read$offset() {
        return read$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*read)(void *, char *, size_t)
     * }
     */
    public static MemorySegment read(MemorySegment struct) {
        return struct.get(read$LAYOUT, read$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*read)(void *, char *, size_t)
     * }
     */
    public static void read(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read$LAYOUT, read$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*read_at_offset)(void *, char *, size_t, size_t)
     * }
     */
    public final static class read_at_offset {

        private read_at_offset() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mlx_h.C_POINTER,
            mlx_h.C_POINTER,
            mlx_h.C_LONG,
            mlx_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mlx_h.upcallHandle(read_at_offset.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read_at_offset.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, long _x2, long _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read_at_offset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read_at_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*read_at_offset)(void *, char *, size_t, size_t)
     * }
     */
    public static final AddressLayout read_at_offset$layout() {
        return read_at_offset$LAYOUT;
    }

    private static final long read_at_offset$OFFSET = $LAYOUT.byteOffset(groupElement("read_at_offset"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*read_at_offset)(void *, char *, size_t, size_t)
     * }
     */
    public static final long read_at_offset$offset() {
        return read_at_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*read_at_offset)(void *, char *, size_t, size_t)
     * }
     */
    public static MemorySegment read_at_offset(MemorySegment struct) {
        return struct.get(read_at_offset$LAYOUT, read_at_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*read_at_offset)(void *, char *, size_t, size_t)
     * }
     */
    public static void read_at_offset(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read_at_offset$LAYOUT, read_at_offset$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*write)(void *, const char *, size_t)
     * }
     */
    public final static class write {

        private write() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mlx_h.C_POINTER,
            mlx_h.C_POINTER,
            mlx_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mlx_h.upcallHandle(write.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(write.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout write$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("write"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*write)(void *, const char *, size_t)
     * }
     */
    public static final AddressLayout write$layout() {
        return write$LAYOUT;
    }

    private static final long write$OFFSET = $LAYOUT.byteOffset(groupElement("write"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*write)(void *, const char *, size_t)
     * }
     */
    public static final long write$offset() {
        return write$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*write)(void *, const char *, size_t)
     * }
     */
    public static MemorySegment write(MemorySegment struct) {
        return struct.get(write$LAYOUT, write$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*write)(void *, const char *, size_t)
     * }
     */
    public static void write(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(write$LAYOUT, write$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * const char *(*label)(void *)
     * }
     */
    public final static class label {

        private label() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            mlx_h.C_POINTER,
            mlx_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mlx_h.upcallHandle(label.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(label.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *(*label)(void *)
     * }
     */
    public static final AddressLayout label$layout() {
        return label$LAYOUT;
    }

    private static final long label$OFFSET = $LAYOUT.byteOffset(groupElement("label"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *(*label)(void *)
     * }
     */
    public static final long label$offset() {
        return label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *(*label)(void *)
     * }
     */
    public static MemorySegment label(MemorySegment struct) {
        return struct.get(label$LAYOUT, label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *(*label)(void *)
     * }
     */
    public static void label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(label$LAYOUT, label$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*free)(void *)
     * }
     */
    public final static class free {

        private free() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            mlx_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = mlx_h.upcallHandle(free.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*free)(void *)
     * }
     */
    public static final AddressLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = $LAYOUT.byteOffset(groupElement("free"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*free)(void *)
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*free)(void *)
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.get(free$LAYOUT, free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*free)(void *)
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package mlx;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct mlx_optional_float_ {
 *     float value;
 *     bool has_value;
 * }
 * }
 */
public class mlx_optional_float_ {

    mlx_optional_float_() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mlx_h.C_FLOAT.withName("value"),
        mlx_h.C_BOOL.withName("has_value"),
        MemoryLayout.paddingLayout(3)
    ).withName("mlx_optional_float_");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat value$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float value
     * }
     */
    public static final OfFloat value$layout() {
        return value$LAYOUT;
    }

    private static final long value$OFFSET = $LAYOUT.byteOffset(groupElement("value"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float value
     * }
     */
    public static final long value$offset() {
        return value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float value
     * }
     */
    public static float value(MemorySegment struct) {
        return struct.get(value$LAYOUT, value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float value
     * }
     */
    public static void value(MemorySegment struct, float fieldValue) {
        struct.set(value$LAYOUT, value$OFFSET, fieldValue);
    }

    private static final OfBoolean has_value$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("has_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool has_value
     * }
     */
    public static final OfBoolean has_value$layout() {
        return has_value$LAYOUT;
    }

    private static final long has_value$OFFSET = $LAYOUT.byteOffset(groupElement("has_value"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool has_value
     * }
     */
    public static final long has_value$offset() {
        return has_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool has_value
     * }
     */
    public static boolean has_value(MemorySegment struct) {
        return struct.get(has_value$LAYOUT, has_value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool has_value
     * }
     */
    public static void has_value(MemorySegment struct, boolean fieldValue) {
        struct.set(has_value$LAYOUT, has_value$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


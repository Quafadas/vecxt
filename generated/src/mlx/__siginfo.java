// Generated by jextract

package mlx;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct __siginfo {
 *     int si_signo;
 *     int si_errno;
 *     int si_code;
 *     pid_t si_pid;
 *     uid_t si_uid;
 *     int si_status;
 *     void *si_addr;
 *     union sigval si_value;
 *     long si_band;
 *     unsigned long __pad[7];
 * }
 * }
 */
public class __siginfo {

    __siginfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mlx_h.C_INT.withName("si_signo"),
        mlx_h.C_INT.withName("si_errno"),
        mlx_h.C_INT.withName("si_code"),
        mlx_h.C_INT.withName("si_pid"),
        mlx_h.C_INT.withName("si_uid"),
        mlx_h.C_INT.withName("si_status"),
        mlx_h.C_POINTER.withName("si_addr"),
        sigval.layout().withName("si_value"),
        mlx_h.C_LONG.withName("si_band"),
        MemoryLayout.sequenceLayout(7, mlx_h.C_LONG).withName("__pad")
    ).withName("__siginfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt si_signo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("si_signo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int si_signo
     * }
     */
    public static final OfInt si_signo$layout() {
        return si_signo$LAYOUT;
    }

    private static final long si_signo$OFFSET = $LAYOUT.byteOffset(groupElement("si_signo"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int si_signo
     * }
     */
    public static final long si_signo$offset() {
        return si_signo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int si_signo
     * }
     */
    public static int si_signo(MemorySegment struct) {
        return struct.get(si_signo$LAYOUT, si_signo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int si_signo
     * }
     */
    public static void si_signo(MemorySegment struct, int fieldValue) {
        struct.set(si_signo$LAYOUT, si_signo$OFFSET, fieldValue);
    }

    private static final OfInt si_errno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("si_errno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int si_errno
     * }
     */
    public static final OfInt si_errno$layout() {
        return si_errno$LAYOUT;
    }

    private static final long si_errno$OFFSET = $LAYOUT.byteOffset(groupElement("si_errno"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int si_errno
     * }
     */
    public static final long si_errno$offset() {
        return si_errno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int si_errno
     * }
     */
    public static int si_errno(MemorySegment struct) {
        return struct.get(si_errno$LAYOUT, si_errno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int si_errno
     * }
     */
    public static void si_errno(MemorySegment struct, int fieldValue) {
        struct.set(si_errno$LAYOUT, si_errno$OFFSET, fieldValue);
    }

    private static final OfInt si_code$LAYOUT = (OfInt)$LAYOUT.select(groupElement("si_code"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int si_code
     * }
     */
    public static final OfInt si_code$layout() {
        return si_code$LAYOUT;
    }

    private static final long si_code$OFFSET = $LAYOUT.byteOffset(groupElement("si_code"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int si_code
     * }
     */
    public static final long si_code$offset() {
        return si_code$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int si_code
     * }
     */
    public static int si_code(MemorySegment struct) {
        return struct.get(si_code$LAYOUT, si_code$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int si_code
     * }
     */
    public static void si_code(MemorySegment struct, int fieldValue) {
        struct.set(si_code$LAYOUT, si_code$OFFSET, fieldValue);
    }

    private static final OfInt si_pid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("si_pid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pid_t si_pid
     * }
     */
    public static final OfInt si_pid$layout() {
        return si_pid$LAYOUT;
    }

    private static final long si_pid$OFFSET = $LAYOUT.byteOffset(groupElement("si_pid"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pid_t si_pid
     * }
     */
    public static final long si_pid$offset() {
        return si_pid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pid_t si_pid
     * }
     */
    public static int si_pid(MemorySegment struct) {
        return struct.get(si_pid$LAYOUT, si_pid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pid_t si_pid
     * }
     */
    public static void si_pid(MemorySegment struct, int fieldValue) {
        struct.set(si_pid$LAYOUT, si_pid$OFFSET, fieldValue);
    }

    private static final OfInt si_uid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("si_uid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uid_t si_uid
     * }
     */
    public static final OfInt si_uid$layout() {
        return si_uid$LAYOUT;
    }

    private static final long si_uid$OFFSET = $LAYOUT.byteOffset(groupElement("si_uid"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uid_t si_uid
     * }
     */
    public static final long si_uid$offset() {
        return si_uid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uid_t si_uid
     * }
     */
    public static int si_uid(MemorySegment struct) {
        return struct.get(si_uid$LAYOUT, si_uid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uid_t si_uid
     * }
     */
    public static void si_uid(MemorySegment struct, int fieldValue) {
        struct.set(si_uid$LAYOUT, si_uid$OFFSET, fieldValue);
    }

    private static final OfInt si_status$LAYOUT = (OfInt)$LAYOUT.select(groupElement("si_status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int si_status
     * }
     */
    public static final OfInt si_status$layout() {
        return si_status$LAYOUT;
    }

    private static final long si_status$OFFSET = $LAYOUT.byteOffset(groupElement("si_status"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int si_status
     * }
     */
    public static final long si_status$offset() {
        return si_status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int si_status
     * }
     */
    public static int si_status(MemorySegment struct) {
        return struct.get(si_status$LAYOUT, si_status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int si_status
     * }
     */
    public static void si_status(MemorySegment struct, int fieldValue) {
        struct.set(si_status$LAYOUT, si_status$OFFSET, fieldValue);
    }

    private static final AddressLayout si_addr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("si_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *si_addr
     * }
     */
    public static final AddressLayout si_addr$layout() {
        return si_addr$LAYOUT;
    }

    private static final long si_addr$OFFSET = $LAYOUT.byteOffset(groupElement("si_addr"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *si_addr
     * }
     */
    public static final long si_addr$offset() {
        return si_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *si_addr
     * }
     */
    public static MemorySegment si_addr(MemorySegment struct) {
        return struct.get(si_addr$LAYOUT, si_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *si_addr
     * }
     */
    public static void si_addr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(si_addr$LAYOUT, si_addr$OFFSET, fieldValue);
    }

    private static final GroupLayout si_value$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("si_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union sigval si_value
     * }
     */
    public static final GroupLayout si_value$layout() {
        return si_value$LAYOUT;
    }

    private static final long si_value$OFFSET = $LAYOUT.byteOffset(groupElement("si_value"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union sigval si_value
     * }
     */
    public static final long si_value$offset() {
        return si_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union sigval si_value
     * }
     */
    public static MemorySegment si_value(MemorySegment struct) {
        return struct.asSlice(si_value$OFFSET, si_value$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union sigval si_value
     * }
     */
    public static void si_value(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, si_value$OFFSET, si_value$LAYOUT.byteSize());
    }

    private static final OfLong si_band$LAYOUT = (OfLong)$LAYOUT.select(groupElement("si_band"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long si_band
     * }
     */
    public static final OfLong si_band$layout() {
        return si_band$LAYOUT;
    }

    private static final long si_band$OFFSET = $LAYOUT.byteOffset(groupElement("si_band"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long si_band
     * }
     */
    public static final long si_band$offset() {
        return si_band$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long si_band
     * }
     */
    public static long si_band(MemorySegment struct) {
        return struct.get(si_band$LAYOUT, si_band$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long si_band
     * }
     */
    public static void si_band(MemorySegment struct, long fieldValue) {
        struct.set(si_band$LAYOUT, si_band$OFFSET, fieldValue);
    }

    private static final SequenceLayout __pad$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long __pad[7]
     * }
     */
    public static final SequenceLayout __pad$layout() {
        return __pad$LAYOUT;
    }

    private static final long __pad$OFFSET = $LAYOUT.byteOffset(groupElement("__pad"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long __pad[7]
     * }
     */
    public static final long __pad$offset() {
        return __pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long __pad[7]
     * }
     */
    public static MemorySegment __pad(MemorySegment struct) {
        return struct.asSlice(__pad$OFFSET, __pad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long __pad[7]
     * }
     */
    public static void __pad(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __pad$OFFSET, __pad$LAYOUT.byteSize());
    }

    private static long[] __pad$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned long __pad[7]
     * }
     */
    public static long[] __pad$dimensions() {
        return __pad$DIMS;
    }
    private static final VarHandle __pad$ELEM_HANDLE = __pad$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned long __pad[7]
     * }
     */
    public static long __pad(MemorySegment struct, long index0) {
        return (long)__pad$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned long __pad[7]
     * }
     */
    public static void __pad(MemorySegment struct, long index0, long fieldValue) {
        __pad$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


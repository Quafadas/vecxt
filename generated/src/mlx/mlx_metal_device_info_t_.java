// Generated by jextract

package mlx;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct mlx_metal_device_info_t_ {
 *     char architecture[256];
 *     size_t max_buffer_length;
 *     size_t max_recommended_working_set_size;
 *     size_t memory_size;
 * }
 * }
 */
public class mlx_metal_device_info_t_ {

    mlx_metal_device_info_t_() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(256, mlx_h.C_CHAR).withName("architecture"),
        mlx_h.C_LONG.withName("max_buffer_length"),
        mlx_h.C_LONG.withName("max_recommended_working_set_size"),
        mlx_h.C_LONG.withName("memory_size")
    ).withName("mlx_metal_device_info_t_");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout architecture$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("architecture"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char architecture[256]
     * }
     */
    public static final SequenceLayout architecture$layout() {
        return architecture$LAYOUT;
    }

    private static final long architecture$OFFSET = $LAYOUT.byteOffset(groupElement("architecture"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char architecture[256]
     * }
     */
    public static final long architecture$offset() {
        return architecture$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char architecture[256]
     * }
     */
    public static MemorySegment architecture(MemorySegment struct) {
        return struct.asSlice(architecture$OFFSET, architecture$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char architecture[256]
     * }
     */
    public static void architecture(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, architecture$OFFSET, architecture$LAYOUT.byteSize());
    }

    private static long[] architecture$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char architecture[256]
     * }
     */
    public static long[] architecture$dimensions() {
        return architecture$DIMS;
    }
    private static final VarHandle architecture$ELEM_HANDLE = architecture$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char architecture[256]
     * }
     */
    public static byte architecture(MemorySegment struct, long index0) {
        return (byte)architecture$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char architecture[256]
     * }
     */
    public static void architecture(MemorySegment struct, long index0, byte fieldValue) {
        architecture$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong max_buffer_length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_buffer_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t max_buffer_length
     * }
     */
    public static final OfLong max_buffer_length$layout() {
        return max_buffer_length$LAYOUT;
    }

    private static final long max_buffer_length$OFFSET = $LAYOUT.byteOffset(groupElement("max_buffer_length"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t max_buffer_length
     * }
     */
    public static final long max_buffer_length$offset() {
        return max_buffer_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t max_buffer_length
     * }
     */
    public static long max_buffer_length(MemorySegment struct) {
        return struct.get(max_buffer_length$LAYOUT, max_buffer_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t max_buffer_length
     * }
     */
    public static void max_buffer_length(MemorySegment struct, long fieldValue) {
        struct.set(max_buffer_length$LAYOUT, max_buffer_length$OFFSET, fieldValue);
    }

    private static final OfLong max_recommended_working_set_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_recommended_working_set_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t max_recommended_working_set_size
     * }
     */
    public static final OfLong max_recommended_working_set_size$layout() {
        return max_recommended_working_set_size$LAYOUT;
    }

    private static final long max_recommended_working_set_size$OFFSET = $LAYOUT.byteOffset(groupElement("max_recommended_working_set_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t max_recommended_working_set_size
     * }
     */
    public static final long max_recommended_working_set_size$offset() {
        return max_recommended_working_set_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t max_recommended_working_set_size
     * }
     */
    public static long max_recommended_working_set_size(MemorySegment struct) {
        return struct.get(max_recommended_working_set_size$LAYOUT, max_recommended_working_set_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t max_recommended_working_set_size
     * }
     */
    public static void max_recommended_working_set_size(MemorySegment struct, long fieldValue) {
        struct.set(max_recommended_working_set_size$LAYOUT, max_recommended_working_set_size$OFFSET, fieldValue);
    }

    private static final OfLong memory_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("memory_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t memory_size
     * }
     */
    public static final OfLong memory_size$layout() {
        return memory_size$LAYOUT;
    }

    private static final long memory_size$OFFSET = $LAYOUT.byteOffset(groupElement("memory_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t memory_size
     * }
     */
    public static final long memory_size$offset() {
        return memory_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t memory_size
     * }
     */
    public static long memory_size(MemorySegment struct) {
        return struct.get(memory_size$LAYOUT, memory_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t memory_size
     * }
     */
    public static void memory_size(MemorySegment struct, long fieldValue) {
        struct.set(memory_size$LAYOUT, memory_size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct packm_cntl_s {
 *     cntl_t cntl;
 *     packm_var_oft var;
 *     const void *params;
 * }
 * }
 */
public class packm_cntl_s {

    packm_cntl_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        cntl_s.layout().withName("cntl"),
        blis_h.C_POINTER.withName("var"),
        blis_h.C_POINTER.withName("params")
    ).withName("packm_cntl_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout cntl$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cntl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static final GroupLayout cntl$layout() {
        return cntl$LAYOUT;
    }

    private static final long cntl$OFFSET = $LAYOUT.byteOffset(groupElement("cntl"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static final long cntl$offset() {
        return cntl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static MemorySegment cntl(MemorySegment struct) {
        return struct.asSlice(cntl$OFFSET, cntl$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static void cntl(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cntl$OFFSET, cntl$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * packm_var_oft var
     * }
     */
    public final static class var_ {

        private var_() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = blis_h.upcallHandle(var_.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(var_.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout var_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("var"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * packm_var_oft var
     * }
     */
    public static final AddressLayout var_$layout() {
        return var_$LAYOUT;
    }

    private static final long var_$OFFSET = $LAYOUT.byteOffset(groupElement("var"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * packm_var_oft var
     * }
     */
    public static final long var_$offset() {
        return var_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * packm_var_oft var
     * }
     */
    public static MemorySegment var_(MemorySegment struct) {
        return struct.get(var_$LAYOUT, var_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * packm_var_oft var
     * }
     */
    public static void var_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(var_$LAYOUT, var_$OFFSET, fieldValue);
    }

    private static final AddressLayout params$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static final AddressLayout params$layout() {
        return params$LAYOUT;
    }

    private static final long params$OFFSET = $LAYOUT.byteOffset(groupElement("params"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static final long params$offset() {
        return params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static MemorySegment params(MemorySegment struct) {
        return struct.get(params$LAYOUT, params$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static void params(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(params$LAYOUT, params$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


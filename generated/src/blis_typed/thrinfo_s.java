// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct thrinfo_s {
 *     thrcomm_t *comm;
 *     dim_t thread_id;
 *     dim_t n_way;
 *     dim_t work_id;
 *     bool free_comm;
 *     pool_t *sba_pool;
 *     pba_t *pba;
 *     mem_t mem;
 *     struct thrinfo_s *sub_nodes[2];
 * }
 * }
 */
public class thrinfo_s {

    thrinfo_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_POINTER.withName("comm"),
        blis_h.C_LONG_LONG.withName("thread_id"),
        blis_h.C_LONG_LONG.withName("n_way"),
        blis_h.C_LONG_LONG.withName("work_id"),
        blis_h.C_BOOL.withName("free_comm"),
        MemoryLayout.paddingLayout(7),
        blis_h.C_POINTER.withName("sba_pool"),
        blis_h.C_POINTER.withName("pba"),
        mem_s.layout().withName("mem"),
        MemoryLayout.sequenceLayout(2, blis_h.C_POINTER).withName("sub_nodes")
    ).withName("thrinfo_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout comm$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("comm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * thrcomm_t *comm
     * }
     */
    public static final AddressLayout comm$layout() {
        return comm$LAYOUT;
    }

    private static final long comm$OFFSET = $LAYOUT.byteOffset(groupElement("comm"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * thrcomm_t *comm
     * }
     */
    public static final long comm$offset() {
        return comm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * thrcomm_t *comm
     * }
     */
    public static MemorySegment comm(MemorySegment struct) {
        return struct.get(comm$LAYOUT, comm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * thrcomm_t *comm
     * }
     */
    public static void comm(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(comm$LAYOUT, comm$OFFSET, fieldValue);
    }

    private static final OfLong thread_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("thread_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t thread_id
     * }
     */
    public static final OfLong thread_id$layout() {
        return thread_id$LAYOUT;
    }

    private static final long thread_id$OFFSET = $LAYOUT.byteOffset(groupElement("thread_id"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t thread_id
     * }
     */
    public static final long thread_id$offset() {
        return thread_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t thread_id
     * }
     */
    public static long thread_id(MemorySegment struct) {
        return struct.get(thread_id$LAYOUT, thread_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t thread_id
     * }
     */
    public static void thread_id(MemorySegment struct, long fieldValue) {
        struct.set(thread_id$LAYOUT, thread_id$OFFSET, fieldValue);
    }

    private static final OfLong n_way$LAYOUT = (OfLong)$LAYOUT.select(groupElement("n_way"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t n_way
     * }
     */
    public static final OfLong n_way$layout() {
        return n_way$LAYOUT;
    }

    private static final long n_way$OFFSET = $LAYOUT.byteOffset(groupElement("n_way"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t n_way
     * }
     */
    public static final long n_way$offset() {
        return n_way$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t n_way
     * }
     */
    public static long n_way(MemorySegment struct) {
        return struct.get(n_way$LAYOUT, n_way$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t n_way
     * }
     */
    public static void n_way(MemorySegment struct, long fieldValue) {
        struct.set(n_way$LAYOUT, n_way$OFFSET, fieldValue);
    }

    private static final OfLong work_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("work_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t work_id
     * }
     */
    public static final OfLong work_id$layout() {
        return work_id$LAYOUT;
    }

    private static final long work_id$OFFSET = $LAYOUT.byteOffset(groupElement("work_id"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t work_id
     * }
     */
    public static final long work_id$offset() {
        return work_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t work_id
     * }
     */
    public static long work_id(MemorySegment struct) {
        return struct.get(work_id$LAYOUT, work_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t work_id
     * }
     */
    public static void work_id(MemorySegment struct, long fieldValue) {
        struct.set(work_id$LAYOUT, work_id$OFFSET, fieldValue);
    }

    private static final OfBoolean free_comm$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("free_comm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool free_comm
     * }
     */
    public static final OfBoolean free_comm$layout() {
        return free_comm$LAYOUT;
    }

    private static final long free_comm$OFFSET = $LAYOUT.byteOffset(groupElement("free_comm"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool free_comm
     * }
     */
    public static final long free_comm$offset() {
        return free_comm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool free_comm
     * }
     */
    public static boolean free_comm(MemorySegment struct) {
        return struct.get(free_comm$LAYOUT, free_comm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool free_comm
     * }
     */
    public static void free_comm(MemorySegment struct, boolean fieldValue) {
        struct.set(free_comm$LAYOUT, free_comm$OFFSET, fieldValue);
    }

    private static final AddressLayout sba_pool$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sba_pool"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pool_t *sba_pool
     * }
     */
    public static final AddressLayout sba_pool$layout() {
        return sba_pool$LAYOUT;
    }

    private static final long sba_pool$OFFSET = $LAYOUT.byteOffset(groupElement("sba_pool"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pool_t *sba_pool
     * }
     */
    public static final long sba_pool$offset() {
        return sba_pool$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pool_t *sba_pool
     * }
     */
    public static MemorySegment sba_pool(MemorySegment struct) {
        return struct.get(sba_pool$LAYOUT, sba_pool$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pool_t *sba_pool
     * }
     */
    public static void sba_pool(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sba_pool$LAYOUT, sba_pool$OFFSET, fieldValue);
    }

    private static final AddressLayout pba$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pba"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pba_t *pba
     * }
     */
    public static final AddressLayout pba$layout() {
        return pba$LAYOUT;
    }

    private static final long pba$OFFSET = $LAYOUT.byteOffset(groupElement("pba"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pba_t *pba
     * }
     */
    public static final long pba$offset() {
        return pba$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pba_t *pba
     * }
     */
    public static MemorySegment pba(MemorySegment struct) {
        return struct.get(pba$LAYOUT, pba$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pba_t *pba
     * }
     */
    public static void pba(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pba$LAYOUT, pba$OFFSET, fieldValue);
    }

    private static final GroupLayout mem$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("mem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mem_t mem
     * }
     */
    public static final GroupLayout mem$layout() {
        return mem$LAYOUT;
    }

    private static final long mem$OFFSET = $LAYOUT.byteOffset(groupElement("mem"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mem_t mem
     * }
     */
    public static final long mem$offset() {
        return mem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mem_t mem
     * }
     */
    public static MemorySegment mem(MemorySegment struct) {
        return struct.asSlice(mem$OFFSET, mem$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mem_t mem
     * }
     */
    public static void mem(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mem$OFFSET, mem$LAYOUT.byteSize());
    }

    private static final SequenceLayout sub_nodes$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("sub_nodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct thrinfo_s *sub_nodes[2]
     * }
     */
    public static final SequenceLayout sub_nodes$layout() {
        return sub_nodes$LAYOUT;
    }

    private static final long sub_nodes$OFFSET = $LAYOUT.byteOffset(groupElement("sub_nodes"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct thrinfo_s *sub_nodes[2]
     * }
     */
    public static final long sub_nodes$offset() {
        return sub_nodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct thrinfo_s *sub_nodes[2]
     * }
     */
    public static MemorySegment sub_nodes(MemorySegment struct) {
        return struct.asSlice(sub_nodes$OFFSET, sub_nodes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct thrinfo_s *sub_nodes[2]
     * }
     */
    public static void sub_nodes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sub_nodes$OFFSET, sub_nodes$LAYOUT.byteSize());
    }

    private static long[] sub_nodes$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * struct thrinfo_s *sub_nodes[2]
     * }
     */
    public static long[] sub_nodes$dimensions() {
        return sub_nodes$DIMS;
    }
    private static final VarHandle sub_nodes$ELEM_HANDLE = sub_nodes$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * struct thrinfo_s *sub_nodes[2]
     * }
     */
    public static MemorySegment sub_nodes(MemorySegment struct, long index0) {
        return (MemorySegment)sub_nodes$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * struct thrinfo_s *sub_nodes[2]
     * }
     */
    public static void sub_nodes(MemorySegment struct, long index0, MemorySegment fieldValue) {
        sub_nodes$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct constdata_s {
 *     float s;
 *     double d;
 *     scomplex c;
 *     dcomplex z;
 *     gint_t i;
 * }
 * }
 */
public class constdata_s {

    constdata_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_FLOAT.withName("s"),
        MemoryLayout.paddingLayout(4),
        blis_h.C_DOUBLE.withName("d"),
        scomplex.layout().withName("c"),
        dcomplex.layout().withName("z"),
        blis_h.C_LONG_LONG.withName("i")
    ).withName("constdata_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat s$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("s"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float s
     * }
     */
    public static final OfFloat s$layout() {
        return s$LAYOUT;
    }

    private static final long s$OFFSET = $LAYOUT.byteOffset(groupElement("s"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float s
     * }
     */
    public static final long s$offset() {
        return s$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float s
     * }
     */
    public static float s(MemorySegment struct) {
        return struct.get(s$LAYOUT, s$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float s
     * }
     */
    public static void s(MemorySegment struct, float fieldValue) {
        struct.set(s$LAYOUT, s$OFFSET, fieldValue);
    }

    private static final OfDouble d$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("d"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double d
     * }
     */
    public static final OfDouble d$layout() {
        return d$LAYOUT;
    }

    private static final long d$OFFSET = $LAYOUT.byteOffset(groupElement("d"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double d
     * }
     */
    public static final long d$offset() {
        return d$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double d
     * }
     */
    public static double d(MemorySegment struct) {
        return struct.get(d$LAYOUT, d$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double d
     * }
     */
    public static void d(MemorySegment struct, double fieldValue) {
        struct.set(d$LAYOUT, d$OFFSET, fieldValue);
    }

    private static final GroupLayout c$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("c"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * scomplex c
     * }
     */
    public static final GroupLayout c$layout() {
        return c$LAYOUT;
    }

    private static final long c$OFFSET = $LAYOUT.byteOffset(groupElement("c"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * scomplex c
     * }
     */
    public static final long c$offset() {
        return c$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * scomplex c
     * }
     */
    public static MemorySegment c(MemorySegment struct) {
        return struct.asSlice(c$OFFSET, c$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * scomplex c
     * }
     */
    public static void c(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, c$OFFSET, c$LAYOUT.byteSize());
    }

    private static final GroupLayout z$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("z"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dcomplex z
     * }
     */
    public static final GroupLayout z$layout() {
        return z$LAYOUT;
    }

    private static final long z$OFFSET = $LAYOUT.byteOffset(groupElement("z"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dcomplex z
     * }
     */
    public static final long z$offset() {
        return z$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dcomplex z
     * }
     */
    public static MemorySegment z(MemorySegment struct) {
        return struct.asSlice(z$OFFSET, z$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dcomplex z
     * }
     */
    public static void z(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, z$OFFSET, z$LAYOUT.byteSize());
    }

    private static final OfLong i$LAYOUT = (OfLong)$LAYOUT.select(groupElement("i"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint_t i
     * }
     */
    public static final OfLong i$layout() {
        return i$LAYOUT;
    }

    private static final long i$OFFSET = $LAYOUT.byteOffset(groupElement("i"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint_t i
     * }
     */
    public static final long i$offset() {
        return i$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint_t i
     * }
     */
    public static long i(MemorySegment struct) {
        return struct.get(i$LAYOUT, i$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint_t i
     * }
     */
    public static void i(MemorySegment struct, long fieldValue) {
        struct.set(i$LAYOUT, i$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


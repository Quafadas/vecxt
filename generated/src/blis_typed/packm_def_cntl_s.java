// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct packm_def_cntl_s {
 *     packm_cntl_t cntl;
 *     num_t dt_orig;
 *     num_t dt_pack;
 *     num_t dt_bmult;
 *     packm_ker_ft ukr;
 *     dim_t bmult_m_def;
 *     dim_t bmult_m_pack;
 *     dim_t bmult_m_bcast;
 *     dim_t bmult_m_scale;
 *     dim_t bmult_m_pack_scale;
 *     dim_t bmult_n_def;
 *     bool does_invert_diag;
 *     bool rev_iter_if_upper;
 *     bool rev_iter_if_lower;
 *     pack_t pack_schema;
 *     packbuf_t pack_buf_type;
 *     const void *params;
 * }
 * }
 */
public class packm_def_cntl_s {

    packm_def_cntl_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        packm_cntl_s.layout().withName("cntl"),
        blis_h.C_INT.withName("dt_orig"),
        blis_h.C_INT.withName("dt_pack"),
        blis_h.C_INT.withName("dt_bmult"),
        MemoryLayout.paddingLayout(4),
        blis_h.C_POINTER.withName("ukr"),
        blis_h.C_LONG_LONG.withName("bmult_m_def"),
        blis_h.C_LONG_LONG.withName("bmult_m_pack"),
        blis_h.C_LONG_LONG.withName("bmult_m_bcast"),
        blis_h.C_LONG_LONG.withName("bmult_m_scale"),
        blis_h.C_LONG_LONG.withName("bmult_m_pack_scale"),
        blis_h.C_LONG_LONG.withName("bmult_n_def"),
        blis_h.C_BOOL.withName("does_invert_diag"),
        blis_h.C_BOOL.withName("rev_iter_if_upper"),
        blis_h.C_BOOL.withName("rev_iter_if_lower"),
        MemoryLayout.paddingLayout(1),
        blis_h.C_INT.withName("pack_schema"),
        blis_h.C_INT.withName("pack_buf_type"),
        MemoryLayout.paddingLayout(4),
        blis_h.C_POINTER.withName("params")
    ).withName("packm_def_cntl_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout cntl$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cntl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * packm_cntl_t cntl
     * }
     */
    public static final GroupLayout cntl$layout() {
        return cntl$LAYOUT;
    }

    private static final long cntl$OFFSET = $LAYOUT.byteOffset(groupElement("cntl"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * packm_cntl_t cntl
     * }
     */
    public static final long cntl$offset() {
        return cntl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * packm_cntl_t cntl
     * }
     */
    public static MemorySegment cntl(MemorySegment struct) {
        return struct.asSlice(cntl$OFFSET, cntl$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * packm_cntl_t cntl
     * }
     */
    public static void cntl(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cntl$OFFSET, cntl$LAYOUT.byteSize());
    }

    private static final OfInt dt_orig$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dt_orig"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * num_t dt_orig
     * }
     */
    public static final OfInt dt_orig$layout() {
        return dt_orig$LAYOUT;
    }

    private static final long dt_orig$OFFSET = $LAYOUT.byteOffset(groupElement("dt_orig"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * num_t dt_orig
     * }
     */
    public static final long dt_orig$offset() {
        return dt_orig$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * num_t dt_orig
     * }
     */
    public static int dt_orig(MemorySegment struct) {
        return struct.get(dt_orig$LAYOUT, dt_orig$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * num_t dt_orig
     * }
     */
    public static void dt_orig(MemorySegment struct, int fieldValue) {
        struct.set(dt_orig$LAYOUT, dt_orig$OFFSET, fieldValue);
    }

    private static final OfInt dt_pack$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dt_pack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * num_t dt_pack
     * }
     */
    public static final OfInt dt_pack$layout() {
        return dt_pack$LAYOUT;
    }

    private static final long dt_pack$OFFSET = $LAYOUT.byteOffset(groupElement("dt_pack"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * num_t dt_pack
     * }
     */
    public static final long dt_pack$offset() {
        return dt_pack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * num_t dt_pack
     * }
     */
    public static int dt_pack(MemorySegment struct) {
        return struct.get(dt_pack$LAYOUT, dt_pack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * num_t dt_pack
     * }
     */
    public static void dt_pack(MemorySegment struct, int fieldValue) {
        struct.set(dt_pack$LAYOUT, dt_pack$OFFSET, fieldValue);
    }

    private static final OfInt dt_bmult$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dt_bmult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * num_t dt_bmult
     * }
     */
    public static final OfInt dt_bmult$layout() {
        return dt_bmult$LAYOUT;
    }

    private static final long dt_bmult$OFFSET = $LAYOUT.byteOffset(groupElement("dt_bmult"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * num_t dt_bmult
     * }
     */
    public static final long dt_bmult$offset() {
        return dt_bmult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * num_t dt_bmult
     * }
     */
    public static int dt_bmult(MemorySegment struct) {
        return struct.get(dt_bmult$LAYOUT, dt_bmult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * num_t dt_bmult
     * }
     */
    public static void dt_bmult(MemorySegment struct, int fieldValue) {
        struct.set(dt_bmult$LAYOUT, dt_bmult$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * packm_ker_ft ukr
     * }
     */
    public final static class ukr {

        private ukr() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0, int _x1, int _x2, int _x3, int _x4, boolean _x5, long _x6, long _x7, long _x8, long _x9, long _x10, long _x11, long _x12, MemorySegment _x13, MemorySegment _x14, long _x15, long _x16, MemorySegment _x17, long _x18, MemorySegment _x19, MemorySegment _x20);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_INT,
            blis_h.C_INT,
            blis_h.C_INT,
            blis_h.C_INT,
            blis_h.C_BOOL,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = blis_h.upcallHandle(ukr.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ukr.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, int _x0, int _x1, int _x2, int _x3, int _x4, boolean _x5, long _x6, long _x7, long _x8, long _x9, long _x10, long _x11, long _x12, MemorySegment _x13, MemorySegment _x14, long _x15, long _x16, MemorySegment _x17, long _x18, MemorySegment _x19, MemorySegment _x20) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ukr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ukr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * packm_ker_ft ukr
     * }
     */
    public static final AddressLayout ukr$layout() {
        return ukr$LAYOUT;
    }

    private static final long ukr$OFFSET = $LAYOUT.byteOffset(groupElement("ukr"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * packm_ker_ft ukr
     * }
     */
    public static final long ukr$offset() {
        return ukr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * packm_ker_ft ukr
     * }
     */
    public static MemorySegment ukr(MemorySegment struct) {
        return struct.get(ukr$LAYOUT, ukr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * packm_ker_ft ukr
     * }
     */
    public static void ukr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ukr$LAYOUT, ukr$OFFSET, fieldValue);
    }

    private static final OfLong bmult_m_def$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bmult_m_def"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t bmult_m_def
     * }
     */
    public static final OfLong bmult_m_def$layout() {
        return bmult_m_def$LAYOUT;
    }

    private static final long bmult_m_def$OFFSET = $LAYOUT.byteOffset(groupElement("bmult_m_def"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t bmult_m_def
     * }
     */
    public static final long bmult_m_def$offset() {
        return bmult_m_def$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t bmult_m_def
     * }
     */
    public static long bmult_m_def(MemorySegment struct) {
        return struct.get(bmult_m_def$LAYOUT, bmult_m_def$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t bmult_m_def
     * }
     */
    public static void bmult_m_def(MemorySegment struct, long fieldValue) {
        struct.set(bmult_m_def$LAYOUT, bmult_m_def$OFFSET, fieldValue);
    }

    private static final OfLong bmult_m_pack$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bmult_m_pack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t bmult_m_pack
     * }
     */
    public static final OfLong bmult_m_pack$layout() {
        return bmult_m_pack$LAYOUT;
    }

    private static final long bmult_m_pack$OFFSET = $LAYOUT.byteOffset(groupElement("bmult_m_pack"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t bmult_m_pack
     * }
     */
    public static final long bmult_m_pack$offset() {
        return bmult_m_pack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t bmult_m_pack
     * }
     */
    public static long bmult_m_pack(MemorySegment struct) {
        return struct.get(bmult_m_pack$LAYOUT, bmult_m_pack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t bmult_m_pack
     * }
     */
    public static void bmult_m_pack(MemorySegment struct, long fieldValue) {
        struct.set(bmult_m_pack$LAYOUT, bmult_m_pack$OFFSET, fieldValue);
    }

    private static final OfLong bmult_m_bcast$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bmult_m_bcast"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t bmult_m_bcast
     * }
     */
    public static final OfLong bmult_m_bcast$layout() {
        return bmult_m_bcast$LAYOUT;
    }

    private static final long bmult_m_bcast$OFFSET = $LAYOUT.byteOffset(groupElement("bmult_m_bcast"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t bmult_m_bcast
     * }
     */
    public static final long bmult_m_bcast$offset() {
        return bmult_m_bcast$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t bmult_m_bcast
     * }
     */
    public static long bmult_m_bcast(MemorySegment struct) {
        return struct.get(bmult_m_bcast$LAYOUT, bmult_m_bcast$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t bmult_m_bcast
     * }
     */
    public static void bmult_m_bcast(MemorySegment struct, long fieldValue) {
        struct.set(bmult_m_bcast$LAYOUT, bmult_m_bcast$OFFSET, fieldValue);
    }

    private static final OfLong bmult_m_scale$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bmult_m_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t bmult_m_scale
     * }
     */
    public static final OfLong bmult_m_scale$layout() {
        return bmult_m_scale$LAYOUT;
    }

    private static final long bmult_m_scale$OFFSET = $LAYOUT.byteOffset(groupElement("bmult_m_scale"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t bmult_m_scale
     * }
     */
    public static final long bmult_m_scale$offset() {
        return bmult_m_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t bmult_m_scale
     * }
     */
    public static long bmult_m_scale(MemorySegment struct) {
        return struct.get(bmult_m_scale$LAYOUT, bmult_m_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t bmult_m_scale
     * }
     */
    public static void bmult_m_scale(MemorySegment struct, long fieldValue) {
        struct.set(bmult_m_scale$LAYOUT, bmult_m_scale$OFFSET, fieldValue);
    }

    private static final OfLong bmult_m_pack_scale$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bmult_m_pack_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t bmult_m_pack_scale
     * }
     */
    public static final OfLong bmult_m_pack_scale$layout() {
        return bmult_m_pack_scale$LAYOUT;
    }

    private static final long bmult_m_pack_scale$OFFSET = $LAYOUT.byteOffset(groupElement("bmult_m_pack_scale"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t bmult_m_pack_scale
     * }
     */
    public static final long bmult_m_pack_scale$offset() {
        return bmult_m_pack_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t bmult_m_pack_scale
     * }
     */
    public static long bmult_m_pack_scale(MemorySegment struct) {
        return struct.get(bmult_m_pack_scale$LAYOUT, bmult_m_pack_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t bmult_m_pack_scale
     * }
     */
    public static void bmult_m_pack_scale(MemorySegment struct, long fieldValue) {
        struct.set(bmult_m_pack_scale$LAYOUT, bmult_m_pack_scale$OFFSET, fieldValue);
    }

    private static final OfLong bmult_n_def$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bmult_n_def"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t bmult_n_def
     * }
     */
    public static final OfLong bmult_n_def$layout() {
        return bmult_n_def$LAYOUT;
    }

    private static final long bmult_n_def$OFFSET = $LAYOUT.byteOffset(groupElement("bmult_n_def"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t bmult_n_def
     * }
     */
    public static final long bmult_n_def$offset() {
        return bmult_n_def$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t bmult_n_def
     * }
     */
    public static long bmult_n_def(MemorySegment struct) {
        return struct.get(bmult_n_def$LAYOUT, bmult_n_def$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t bmult_n_def
     * }
     */
    public static void bmult_n_def(MemorySegment struct, long fieldValue) {
        struct.set(bmult_n_def$LAYOUT, bmult_n_def$OFFSET, fieldValue);
    }

    private static final OfBoolean does_invert_diag$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("does_invert_diag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool does_invert_diag
     * }
     */
    public static final OfBoolean does_invert_diag$layout() {
        return does_invert_diag$LAYOUT;
    }

    private static final long does_invert_diag$OFFSET = $LAYOUT.byteOffset(groupElement("does_invert_diag"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool does_invert_diag
     * }
     */
    public static final long does_invert_diag$offset() {
        return does_invert_diag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool does_invert_diag
     * }
     */
    public static boolean does_invert_diag(MemorySegment struct) {
        return struct.get(does_invert_diag$LAYOUT, does_invert_diag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool does_invert_diag
     * }
     */
    public static void does_invert_diag(MemorySegment struct, boolean fieldValue) {
        struct.set(does_invert_diag$LAYOUT, does_invert_diag$OFFSET, fieldValue);
    }

    private static final OfBoolean rev_iter_if_upper$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("rev_iter_if_upper"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool rev_iter_if_upper
     * }
     */
    public static final OfBoolean rev_iter_if_upper$layout() {
        return rev_iter_if_upper$LAYOUT;
    }

    private static final long rev_iter_if_upper$OFFSET = $LAYOUT.byteOffset(groupElement("rev_iter_if_upper"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool rev_iter_if_upper
     * }
     */
    public static final long rev_iter_if_upper$offset() {
        return rev_iter_if_upper$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool rev_iter_if_upper
     * }
     */
    public static boolean rev_iter_if_upper(MemorySegment struct) {
        return struct.get(rev_iter_if_upper$LAYOUT, rev_iter_if_upper$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool rev_iter_if_upper
     * }
     */
    public static void rev_iter_if_upper(MemorySegment struct, boolean fieldValue) {
        struct.set(rev_iter_if_upper$LAYOUT, rev_iter_if_upper$OFFSET, fieldValue);
    }

    private static final OfBoolean rev_iter_if_lower$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("rev_iter_if_lower"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool rev_iter_if_lower
     * }
     */
    public static final OfBoolean rev_iter_if_lower$layout() {
        return rev_iter_if_lower$LAYOUT;
    }

    private static final long rev_iter_if_lower$OFFSET = $LAYOUT.byteOffset(groupElement("rev_iter_if_lower"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool rev_iter_if_lower
     * }
     */
    public static final long rev_iter_if_lower$offset() {
        return rev_iter_if_lower$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool rev_iter_if_lower
     * }
     */
    public static boolean rev_iter_if_lower(MemorySegment struct) {
        return struct.get(rev_iter_if_lower$LAYOUT, rev_iter_if_lower$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool rev_iter_if_lower
     * }
     */
    public static void rev_iter_if_lower(MemorySegment struct, boolean fieldValue) {
        struct.set(rev_iter_if_lower$LAYOUT, rev_iter_if_lower$OFFSET, fieldValue);
    }

    private static final OfInt pack_schema$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pack_schema"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pack_t pack_schema
     * }
     */
    public static final OfInt pack_schema$layout() {
        return pack_schema$LAYOUT;
    }

    private static final long pack_schema$OFFSET = $LAYOUT.byteOffset(groupElement("pack_schema"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pack_t pack_schema
     * }
     */
    public static final long pack_schema$offset() {
        return pack_schema$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pack_t pack_schema
     * }
     */
    public static int pack_schema(MemorySegment struct) {
        return struct.get(pack_schema$LAYOUT, pack_schema$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pack_t pack_schema
     * }
     */
    public static void pack_schema(MemorySegment struct, int fieldValue) {
        struct.set(pack_schema$LAYOUT, pack_schema$OFFSET, fieldValue);
    }

    private static final OfInt pack_buf_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pack_buf_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * packbuf_t pack_buf_type
     * }
     */
    public static final OfInt pack_buf_type$layout() {
        return pack_buf_type$LAYOUT;
    }

    private static final long pack_buf_type$OFFSET = $LAYOUT.byteOffset(groupElement("pack_buf_type"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * packbuf_t pack_buf_type
     * }
     */
    public static final long pack_buf_type$offset() {
        return pack_buf_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * packbuf_t pack_buf_type
     * }
     */
    public static int pack_buf_type(MemorySegment struct) {
        return struct.get(pack_buf_type$LAYOUT, pack_buf_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * packbuf_t pack_buf_type
     * }
     */
    public static void pack_buf_type(MemorySegment struct, int fieldValue) {
        struct.set(pack_buf_type$LAYOUT, pack_buf_type$OFFSET, fieldValue);
    }

    private static final AddressLayout params$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static final AddressLayout params$layout() {
        return params$LAYOUT;
    }

    private static final long params$OFFSET = $LAYOUT.byteOffset(groupElement("params"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static final long params$offset() {
        return params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static MemorySegment params(MemorySegment struct) {
        return struct.get(params$LAYOUT, params$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static void params(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(params$LAYOUT, params$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


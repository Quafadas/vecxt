// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct mem_s {
 *     pblk_t pblk;
 *     packbuf_t buf_type;
 *     pool_t *pool;
 *     siz_t size;
 * }
 * }
 */
public class mem_s {

    mem_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        pblk_t.layout().withName("pblk"),
        blis_h.C_INT.withName("buf_type"),
        MemoryLayout.paddingLayout(4),
        blis_h.C_POINTER.withName("pool"),
        blis_h.C_LONG_LONG.withName("size")
    ).withName("mem_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout pblk$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pblk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pblk_t pblk
     * }
     */
    public static final GroupLayout pblk$layout() {
        return pblk$LAYOUT;
    }

    private static final long pblk$OFFSET = $LAYOUT.byteOffset(groupElement("pblk"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pblk_t pblk
     * }
     */
    public static final long pblk$offset() {
        return pblk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pblk_t pblk
     * }
     */
    public static MemorySegment pblk(MemorySegment struct) {
        return struct.asSlice(pblk$OFFSET, pblk$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pblk_t pblk
     * }
     */
    public static void pblk(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pblk$OFFSET, pblk$LAYOUT.byteSize());
    }

    private static final OfInt buf_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("buf_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * packbuf_t buf_type
     * }
     */
    public static final OfInt buf_type$layout() {
        return buf_type$LAYOUT;
    }

    private static final long buf_type$OFFSET = $LAYOUT.byteOffset(groupElement("buf_type"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * packbuf_t buf_type
     * }
     */
    public static final long buf_type$offset() {
        return buf_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * packbuf_t buf_type
     * }
     */
    public static int buf_type(MemorySegment struct) {
        return struct.get(buf_type$LAYOUT, buf_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * packbuf_t buf_type
     * }
     */
    public static void buf_type(MemorySegment struct, int fieldValue) {
        struct.set(buf_type$LAYOUT, buf_type$OFFSET, fieldValue);
    }

    private static final AddressLayout pool$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pool"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pool_t *pool
     * }
     */
    public static final AddressLayout pool$layout() {
        return pool$LAYOUT;
    }

    private static final long pool$OFFSET = $LAYOUT.byteOffset(groupElement("pool"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pool_t *pool
     * }
     */
    public static final long pool$offset() {
        return pool$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pool_t *pool
     * }
     */
    public static MemorySegment pool(MemorySegment struct) {
        return struct.get(pool$LAYOUT, pool$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pool_t *pool
     * }
     */
    public static void pool(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pool$LAYOUT, pool$OFFSET, fieldValue);
    }

    private static final OfLong size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t size
     * }
     */
    public static final OfLong size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = $LAYOUT.byteOffset(groupElement("size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t size
     * }
     */
    public static long size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t size
     * }
     */
    public static void size(MemorySegment struct, long fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


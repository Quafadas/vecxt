// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cntx_s {
 *     stck_t blkszs;
 *     stck_t bmults;
 *     stck_t ukrs;
 *     stck_t ukr2s;
 *     stck_t ukr_prefs;
 *     stck_t l3_sup_handlers;
 * }
 * }
 */
public class cntx_s {

    cntx_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        stck_t.layout().withName("blkszs"),
        stck_t.layout().withName("bmults"),
        stck_t.layout().withName("ukrs"),
        stck_t.layout().withName("ukr2s"),
        stck_t.layout().withName("ukr_prefs"),
        stck_t.layout().withName("l3_sup_handlers")
    ).withName("cntx_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout blkszs$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("blkszs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * stck_t blkszs
     * }
     */
    public static final GroupLayout blkszs$layout() {
        return blkszs$LAYOUT;
    }

    private static final long blkszs$OFFSET = $LAYOUT.byteOffset(groupElement("blkszs"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * stck_t blkszs
     * }
     */
    public static final long blkszs$offset() {
        return blkszs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * stck_t blkszs
     * }
     */
    public static MemorySegment blkszs(MemorySegment struct) {
        return struct.asSlice(blkszs$OFFSET, blkszs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * stck_t blkszs
     * }
     */
    public static void blkszs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, blkszs$OFFSET, blkszs$LAYOUT.byteSize());
    }

    private static final GroupLayout bmults$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bmults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * stck_t bmults
     * }
     */
    public static final GroupLayout bmults$layout() {
        return bmults$LAYOUT;
    }

    private static final long bmults$OFFSET = $LAYOUT.byteOffset(groupElement("bmults"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * stck_t bmults
     * }
     */
    public static final long bmults$offset() {
        return bmults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * stck_t bmults
     * }
     */
    public static MemorySegment bmults(MemorySegment struct) {
        return struct.asSlice(bmults$OFFSET, bmults$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * stck_t bmults
     * }
     */
    public static void bmults(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bmults$OFFSET, bmults$LAYOUT.byteSize());
    }

    private static final GroupLayout ukrs$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ukrs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * stck_t ukrs
     * }
     */
    public static final GroupLayout ukrs$layout() {
        return ukrs$LAYOUT;
    }

    private static final long ukrs$OFFSET = $LAYOUT.byteOffset(groupElement("ukrs"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * stck_t ukrs
     * }
     */
    public static final long ukrs$offset() {
        return ukrs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * stck_t ukrs
     * }
     */
    public static MemorySegment ukrs(MemorySegment struct) {
        return struct.asSlice(ukrs$OFFSET, ukrs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * stck_t ukrs
     * }
     */
    public static void ukrs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ukrs$OFFSET, ukrs$LAYOUT.byteSize());
    }

    private static final GroupLayout ukr2s$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ukr2s"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * stck_t ukr2s
     * }
     */
    public static final GroupLayout ukr2s$layout() {
        return ukr2s$LAYOUT;
    }

    private static final long ukr2s$OFFSET = $LAYOUT.byteOffset(groupElement("ukr2s"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * stck_t ukr2s
     * }
     */
    public static final long ukr2s$offset() {
        return ukr2s$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * stck_t ukr2s
     * }
     */
    public static MemorySegment ukr2s(MemorySegment struct) {
        return struct.asSlice(ukr2s$OFFSET, ukr2s$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * stck_t ukr2s
     * }
     */
    public static void ukr2s(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ukr2s$OFFSET, ukr2s$LAYOUT.byteSize());
    }

    private static final GroupLayout ukr_prefs$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ukr_prefs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * stck_t ukr_prefs
     * }
     */
    public static final GroupLayout ukr_prefs$layout() {
        return ukr_prefs$LAYOUT;
    }

    private static final long ukr_prefs$OFFSET = $LAYOUT.byteOffset(groupElement("ukr_prefs"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * stck_t ukr_prefs
     * }
     */
    public static final long ukr_prefs$offset() {
        return ukr_prefs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * stck_t ukr_prefs
     * }
     */
    public static MemorySegment ukr_prefs(MemorySegment struct) {
        return struct.asSlice(ukr_prefs$OFFSET, ukr_prefs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * stck_t ukr_prefs
     * }
     */
    public static void ukr_prefs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ukr_prefs$OFFSET, ukr_prefs$LAYOUT.byteSize());
    }

    private static final GroupLayout l3_sup_handlers$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("l3_sup_handlers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * stck_t l3_sup_handlers
     * }
     */
    public static final GroupLayout l3_sup_handlers$layout() {
        return l3_sup_handlers$LAYOUT;
    }

    private static final long l3_sup_handlers$OFFSET = $LAYOUT.byteOffset(groupElement("l3_sup_handlers"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * stck_t l3_sup_handlers
     * }
     */
    public static final long l3_sup_handlers$offset() {
        return l3_sup_handlers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * stck_t l3_sup_handlers
     * }
     */
    public static MemorySegment l3_sup_handlers(MemorySegment struct) {
        return struct.asSlice(l3_sup_handlers$OFFSET, l3_sup_handlers$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * stck_t l3_sup_handlers
     * }
     */
    public static void l3_sup_handlers(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, l3_sup_handlers$OFFSET, l3_sup_handlers$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


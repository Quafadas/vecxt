// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class blis_h extends blis_h$shared {

    blis_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();


    static {
        System.loadLibrary("blis");
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    private static final int BLIS_VERSION_MAJOR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BLIS_VERSION_MAJOR 2
     * }
     */
    public static int BLIS_VERSION_MAJOR() {
        return BLIS_VERSION_MAJOR;
    }
    private static final int BLIS_VERSION_MINOR = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_VERSION_MINOR 0
     * }
     */
    public static int BLIS_VERSION_MINOR() {
        return BLIS_VERSION_MINOR;
    }
    private static final int BLIS_VERSION_REVISION = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_VERSION_REVISION 0
     * }
     */
    public static int BLIS_VERSION_REVISION() {
        return BLIS_VERSION_REVISION;
    }
    private static final int BLIS_BLAS_INT_TYPE_SIZE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BLAS_INT_TYPE_SIZE 32
     * }
     */
    public static int BLIS_BLAS_INT_TYPE_SIZE() {
        return BLIS_BLAS_INT_TYPE_SIZE;
    }
    private static final int __PTHREAD_SIZE__ = (int)8176L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }
    private static final int __PTHREAD_ATTR_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEX_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }
    private static final int __PTHREAD_CONDATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }
    private static final int __PTHREAD_COND_SIZE__ = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }
    private static final int __PTHREAD_ONCE_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }
    private static final int __PTHREAD_RWLOCK_SIZE__ = (int)192L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }
    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }
    private static final int BLIS_OS_OSX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_OS_OSX 1
     * }
     */
    public static int BLIS_OS_OSX() {
        return BLIS_OS_OSX;
    }
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int BLIS_INT_TYPE_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define BLIS_INT_TYPE_SIZE 64
     * }
     */
    public static int BLIS_INT_TYPE_SIZE() {
        return BLIS_INT_TYPE_SIZE;
    }
    private static final int BLIS_CACHE_LINE_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define BLIS_CACHE_LINE_SIZE 64
     * }
     */
    public static int BLIS_CACHE_LINE_SIZE() {
        return BLIS_CACHE_LINE_SIZE;
    }
    private static final int BLIS_NT_MAX_PRIME = (int)11L;
    /**
     * {@snippet lang=c :
     * #define BLIS_NT_MAX_PRIME 11
     * }
     */
    public static int BLIS_NT_MAX_PRIME() {
        return BLIS_NT_MAX_PRIME;
    }
    private static final int BLIS_NUM_FP_TYPES = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BLIS_NUM_FP_TYPES 4
     * }
     */
    public static int BLIS_NUM_FP_TYPES() {
        return BLIS_NUM_FP_TYPES;
    }
    private static final int BLIS_SIZEOF_S = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SIZEOF_S 4
     * }
     */
    public static int BLIS_SIZEOF_S() {
        return BLIS_SIZEOF_S;
    }
    private static final int BLIS_SIZEOF_D = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SIZEOF_D 8
     * }
     */
    public static int BLIS_SIZEOF_D() {
        return BLIS_SIZEOF_D;
    }
    private static final int BLIS_SIZEOF_C = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SIZEOF_C 8
     * }
     */
    public static int BLIS_SIZEOF_C() {
        return BLIS_SIZEOF_C;
    }
    private static final int BLIS_SIZEOF_Z = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SIZEOF_Z 16
     * }
     */
    public static int BLIS_SIZEOF_Z() {
        return BLIS_SIZEOF_Z;
    }
    private static final int BLIS_DOMAIN_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_DOMAIN_NUM_BITS 1
     * }
     */
    public static int BLIS_DOMAIN_NUM_BITS() {
        return BLIS_DOMAIN_NUM_BITS;
    }
    private static final int BLIS_PRECISION_NUM_BITS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PRECISION_NUM_BITS 2
     * }
     */
    public static int BLIS_PRECISION_NUM_BITS() {
        return BLIS_PRECISION_NUM_BITS;
    }
    private static final int BLIS_TRANS_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_TRANS_NUM_BITS 1
     * }
     */
    public static int BLIS_TRANS_NUM_BITS() {
        return BLIS_TRANS_NUM_BITS;
    }
    private static final int BLIS_CONJ_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_CONJ_NUM_BITS 1
     * }
     */
    public static int BLIS_CONJ_NUM_BITS() {
        return BLIS_CONJ_NUM_BITS;
    }
    private static final int BLIS_UPPER_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_UPPER_NUM_BITS 1
     * }
     */
    public static int BLIS_UPPER_NUM_BITS() {
        return BLIS_UPPER_NUM_BITS;
    }
    private static final int BLIS_DIAG_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_DIAG_NUM_BITS 1
     * }
     */
    public static int BLIS_DIAG_NUM_BITS() {
        return BLIS_DIAG_NUM_BITS;
    }
    private static final int BLIS_LOWER_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_LOWER_NUM_BITS 1
     * }
     */
    public static int BLIS_LOWER_NUM_BITS() {
        return BLIS_LOWER_NUM_BITS;
    }
    private static final int BLIS_UNIT_DIAG_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_UNIT_DIAG_NUM_BITS 1
     * }
     */
    public static int BLIS_UNIT_DIAG_NUM_BITS() {
        return BLIS_UNIT_DIAG_NUM_BITS;
    }
    private static final int BLIS_INVERT_DIAG_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_INVERT_DIAG_NUM_BITS 1
     * }
     */
    public static int BLIS_INVERT_DIAG_NUM_BITS() {
        return BLIS_INVERT_DIAG_NUM_BITS;
    }
    private static final int BLIS_PACK_PANEL_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_PANEL_NUM_BITS 1
     * }
     */
    public static int BLIS_PACK_PANEL_NUM_BITS() {
        return BLIS_PACK_PANEL_NUM_BITS;
    }
    private static final int BLIS_PACK_FORMAT_NUM_BITS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_FORMAT_NUM_BITS 4
     * }
     */
    public static int BLIS_PACK_FORMAT_NUM_BITS() {
        return BLIS_PACK_FORMAT_NUM_BITS;
    }
    private static final int BLIS_PACK_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_NUM_BITS 1
     * }
     */
    public static int BLIS_PACK_NUM_BITS() {
        return BLIS_PACK_NUM_BITS;
    }
    private static final int BLIS_PACK_REV_IF_UPPER_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_REV_IF_UPPER_NUM_BITS 1
     * }
     */
    public static int BLIS_PACK_REV_IF_UPPER_NUM_BITS() {
        return BLIS_PACK_REV_IF_UPPER_NUM_BITS;
    }
    private static final int BLIS_PACK_REV_IF_LOWER_NUM_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_REV_IF_LOWER_NUM_BITS 1
     * }
     */
    public static int BLIS_PACK_REV_IF_LOWER_NUM_BITS() {
        return BLIS_PACK_REV_IF_LOWER_NUM_BITS;
    }
    private static final int BLIS_PACK_BUFFER_NUM_BITS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_BUFFER_NUM_BITS 2
     * }
     */
    public static int BLIS_PACK_BUFFER_NUM_BITS() {
        return BLIS_PACK_BUFFER_NUM_BITS;
    }
    private static final int BLIS_STRUC_NUM_BITS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BLIS_STRUC_NUM_BITS 2
     * }
     */
    public static int BLIS_STRUC_NUM_BITS() {
        return BLIS_STRUC_NUM_BITS;
    }
    private static final int BLIS_DATATYPE_SHIFT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_DATATYPE_SHIFT 0
     * }
     */
    public static int BLIS_DATATYPE_SHIFT() {
        return BLIS_DATATYPE_SHIFT;
    }
    private static final int BLIS_BITVAL_REAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_REAL 0
     * }
     */
    public static int BLIS_BITVAL_REAL() {
        return BLIS_BITVAL_REAL;
    }
    private static final int BLIS_BITVAL_SINGLE_PREC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_SINGLE_PREC 0
     * }
     */
    public static int BLIS_BITVAL_SINGLE_PREC() {
        return BLIS_BITVAL_SINGLE_PREC;
    }
    private static final int BLIS_BITVAL_FLOAT_TYPE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_FLOAT_TYPE 0
     * }
     */
    public static int BLIS_BITVAL_FLOAT_TYPE() {
        return BLIS_BITVAL_FLOAT_TYPE;
    }
    private static final int BLIS_BITVAL_INT_TYPE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_INT_TYPE 4
     * }
     */
    public static int BLIS_BITVAL_INT_TYPE() {
        return BLIS_BITVAL_INT_TYPE;
    }
    private static final int BLIS_BITVAL_CONST_TYPE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_CONST_TYPE 5
     * }
     */
    public static int BLIS_BITVAL_CONST_TYPE() {
        return BLIS_BITVAL_CONST_TYPE;
    }
    private static final int BLIS_BITVAL_NO_TRANS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_NO_TRANS 0
     * }
     */
    public static int BLIS_BITVAL_NO_TRANS() {
        return BLIS_BITVAL_NO_TRANS;
    }
    private static final int BLIS_BITVAL_NO_CONJ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_NO_CONJ 0
     * }
     */
    public static int BLIS_BITVAL_NO_CONJ() {
        return BLIS_BITVAL_NO_CONJ;
    }
    private static final int BLIS_BITVAL_ZEROS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_ZEROS 0
     * }
     */
    public static int BLIS_BITVAL_ZEROS() {
        return BLIS_BITVAL_ZEROS;
    }
    private static final int BLIS_BITVAL_NONUNIT_DIAG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_NONUNIT_DIAG 0
     * }
     */
    public static int BLIS_BITVAL_NONUNIT_DIAG() {
        return BLIS_BITVAL_NONUNIT_DIAG;
    }
    private static final int BLIS_BITVAL_NOT_PACKED = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_NOT_PACKED 0
     * }
     */
    public static int BLIS_BITVAL_NOT_PACKED() {
        return BLIS_BITVAL_NOT_PACKED;
    }
    private static final int BLIS_BITVAL_PACK_FWD_IF_UPPER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_PACK_FWD_IF_UPPER 0
     * }
     */
    public static int BLIS_BITVAL_PACK_FWD_IF_UPPER() {
        return BLIS_BITVAL_PACK_FWD_IF_UPPER;
    }
    private static final int BLIS_BITVAL_PACK_FWD_IF_LOWER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_PACK_FWD_IF_LOWER 0
     * }
     */
    public static int BLIS_BITVAL_PACK_FWD_IF_LOWER() {
        return BLIS_BITVAL_PACK_FWD_IF_LOWER;
    }
    private static final int BLIS_BITVAL_BUFFER_FOR_A_BLOCK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_BUFFER_FOR_A_BLOCK 0
     * }
     */
    public static int BLIS_BITVAL_BUFFER_FOR_A_BLOCK() {
        return BLIS_BITVAL_BUFFER_FOR_A_BLOCK;
    }
    private static final int BLIS_BITVAL_GENERAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_GENERAL 0
     * }
     */
    public static int BLIS_BITVAL_GENERAL() {
        return BLIS_BITVAL_GENERAL;
    }
    private static final int BLIS_NTYPE_KER_SHIFT = (int)28L;
    /**
     * {@snippet lang=c :
     * #define BLIS_NTYPE_KER_SHIFT 28
     * }
     */
    public static int BLIS_NTYPE_KER_SHIFT() {
        return BLIS_NTYPE_KER_SHIFT;
    }
    private static final int BLIS_NUM_LOOPS = (int)6L;
    /**
     * {@snippet lang=c :
     * #define BLIS_NUM_LOOPS 6
     * }
     */
    public static int BLIS_NUM_LOOPS() {
        return BLIS_NUM_LOOPS;
    }
    private static final int BLIS_MAX_SUB_NODES = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BLIS_MAX_SUB_NODES 2
     * }
     */
    public static int BLIS_MAX_SUB_NODES() {
        return BLIS_MAX_SUB_NODES;
    }
    private static final int bli_sssame = (int)1L;
    /**
     * {@snippet lang=c :
     * #define bli_sssame 1
     * }
     */
    public static int bli_sssame() {
        return bli_sssame;
    }
    private static final int bli_sdsame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_sdsame 0
     * }
     */
    public static int bli_sdsame() {
        return bli_sdsame;
    }
    private static final int bli_scsame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_scsame 0
     * }
     */
    public static int bli_scsame() {
        return bli_scsame;
    }
    private static final int bli_szsame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_szsame 0
     * }
     */
    public static int bli_szsame() {
        return bli_szsame;
    }
    private static final int bli_dssame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_dssame 0
     * }
     */
    public static int bli_dssame() {
        return bli_dssame;
    }
    private static final int bli_ddsame = (int)1L;
    /**
     * {@snippet lang=c :
     * #define bli_ddsame 1
     * }
     */
    public static int bli_ddsame() {
        return bli_ddsame;
    }
    private static final int bli_dcsame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_dcsame 0
     * }
     */
    public static int bli_dcsame() {
        return bli_dcsame;
    }
    private static final int bli_dzsame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_dzsame 0
     * }
     */
    public static int bli_dzsame() {
        return bli_dzsame;
    }
    private static final int bli_cssame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_cssame 0
     * }
     */
    public static int bli_cssame() {
        return bli_cssame;
    }
    private static final int bli_cdsame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_cdsame 0
     * }
     */
    public static int bli_cdsame() {
        return bli_cdsame;
    }
    private static final int bli_ccsame = (int)1L;
    /**
     * {@snippet lang=c :
     * #define bli_ccsame 1
     * }
     */
    public static int bli_ccsame() {
        return bli_ccsame;
    }
    private static final int bli_czsame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_czsame 0
     * }
     */
    public static int bli_czsame() {
        return bli_czsame;
    }
    private static final int bli_zssame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_zssame 0
     * }
     */
    public static int bli_zssame() {
        return bli_zssame;
    }
    private static final int bli_zdsame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_zdsame 0
     * }
     */
    public static int bli_zdsame() {
        return bli_zdsame;
    }
    private static final int bli_zcsame = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_zcsame 0
     * }
     */
    public static int bli_zcsame() {
        return bli_zcsame;
    }
    private static final int bli_zzsame = (int)1L;
    /**
     * {@snippet lang=c :
     * #define bli_zzsame 1
     * }
     */
    public static int bli_zzsame() {
        return bli_zzsame;
    }
    private static final int BLIS_SIMD_ALIGN_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SIMD_ALIGN_SIZE 16
     * }
     */
    public static int BLIS_SIMD_ALIGN_SIZE() {
        return BLIS_SIMD_ALIGN_SIZE;
    }
    private static final int BLIS_THREAD_RATIO_M = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_THREAD_RATIO_M 1
     * }
     */
    public static int BLIS_THREAD_RATIO_M() {
        return BLIS_THREAD_RATIO_M;
    }
    private static final int BLIS_THREAD_RATIO_N = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_THREAD_RATIO_N 1
     * }
     */
    public static int BLIS_THREAD_RATIO_N() {
        return BLIS_THREAD_RATIO_N;
    }
    private static final int BLIS_THREAD_MAX_IR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_THREAD_MAX_IR 1
     * }
     */
    public static int BLIS_THREAD_MAX_IR() {
        return BLIS_THREAD_MAX_IR;
    }
    private static final int BLIS_THREAD_MAX_JR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BLIS_THREAD_MAX_JR 4
     * }
     */
    public static int BLIS_THREAD_MAX_JR() {
        return BLIS_THREAD_MAX_JR;
    }
    private static final int BLIS_PAGE_SIZE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PAGE_SIZE 4096
     * }
     */
    public static int BLIS_PAGE_SIZE() {
        return BLIS_PAGE_SIZE;
    }
    private static final int BLIS_SIMD_MAX_NUM_REGISTERS = (int)32L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SIMD_MAX_NUM_REGISTERS 32
     * }
     */
    public static int BLIS_SIMD_MAX_NUM_REGISTERS() {
        return BLIS_SIMD_MAX_NUM_REGISTERS;
    }
    private static final int BLIS_SIMD_MAX_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SIMD_MAX_SIZE 64
     * }
     */
    public static int BLIS_SIMD_MAX_SIZE() {
        return BLIS_SIMD_MAX_SIZE;
    }
    private static final int BLIS_POOL_ADDR_OFFSET_SIZE_A = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_POOL_ADDR_OFFSET_SIZE_A 0
     * }
     */
    public static int BLIS_POOL_ADDR_OFFSET_SIZE_A() {
        return BLIS_POOL_ADDR_OFFSET_SIZE_A;
    }
    private static final int BLIS_POOL_ADDR_OFFSET_SIZE_B = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_POOL_ADDR_OFFSET_SIZE_B 0
     * }
     */
    public static int BLIS_POOL_ADDR_OFFSET_SIZE_B() {
        return BLIS_POOL_ADDR_OFFSET_SIZE_B;
    }
    private static final int BLIS_POOL_ADDR_OFFSET_SIZE_C = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_POOL_ADDR_OFFSET_SIZE_C 0
     * }
     */
    public static int BLIS_POOL_ADDR_OFFSET_SIZE_C() {
        return BLIS_POOL_ADDR_OFFSET_SIZE_C;
    }
    private static final int BLIS_POOL_ADDR_OFFSET_SIZE_GEN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_POOL_ADDR_OFFSET_SIZE_GEN 0
     * }
     */
    public static int BLIS_POOL_ADDR_OFFSET_SIZE_GEN() {
        return BLIS_POOL_ADDR_OFFSET_SIZE_GEN;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = blis_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = blis_h.C_POINTER;
    private static final int BLIS_NO_TRANSPOSE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum trans_t.BLIS_NO_TRANSPOSE = 0
     * }
     */
    public static int BLIS_NO_TRANSPOSE() {
        return BLIS_NO_TRANSPOSE;
    }
    private static final int BLIS_TRANSPOSE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum trans_t.BLIS_TRANSPOSE = 8
     * }
     */
    public static int BLIS_TRANSPOSE() {
        return BLIS_TRANSPOSE;
    }
    private static final int BLIS_CONJ_NO_TRANSPOSE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum trans_t.BLIS_CONJ_NO_TRANSPOSE = 16
     * }
     */
    public static int BLIS_CONJ_NO_TRANSPOSE() {
        return BLIS_CONJ_NO_TRANSPOSE;
    }
    private static final int BLIS_CONJ_TRANSPOSE = (int)24L;
    /**
     * {@snippet lang=c :
     * enum trans_t.BLIS_CONJ_TRANSPOSE = 24
     * }
     */
    public static int BLIS_CONJ_TRANSPOSE() {
        return BLIS_CONJ_TRANSPOSE;
    }
    private static final int BLIS_NO_CONJUGATE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum conj_t.BLIS_NO_CONJUGATE = 0
     * }
     */
    public static int BLIS_NO_CONJUGATE() {
        return BLIS_NO_CONJUGATE;
    }
    private static final int BLIS_CONJUGATE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum conj_t.BLIS_CONJUGATE = 16
     * }
     */
    public static int BLIS_CONJUGATE() {
        return BLIS_CONJUGATE;
    }
    private static final int BLIS_ZEROS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum uplo_t.BLIS_ZEROS = 0
     * }
     */
    public static int BLIS_ZEROS() {
        return BLIS_ZEROS;
    }
    private static final int BLIS_LOWER = (int)192L;
    /**
     * {@snippet lang=c :
     * enum uplo_t.BLIS_LOWER = 192
     * }
     */
    public static int BLIS_LOWER() {
        return BLIS_LOWER;
    }
    private static final int BLIS_UPPER = (int)96L;
    /**
     * {@snippet lang=c :
     * enum uplo_t.BLIS_UPPER = 96
     * }
     */
    public static int BLIS_UPPER() {
        return BLIS_UPPER;
    }
    private static final int BLIS_DENSE = (int)224L;
    /**
     * {@snippet lang=c :
     * enum uplo_t.BLIS_DENSE = 224
     * }
     */
    public static int BLIS_DENSE() {
        return BLIS_DENSE;
    }
    private static final int BLIS_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum side_t.BLIS_LEFT = 0
     * }
     */
    public static int BLIS_LEFT() {
        return BLIS_LEFT;
    }
    private static final int BLIS_RIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum side_t.BLIS_RIGHT = 1
     * }
     */
    public static int BLIS_RIGHT() {
        return BLIS_RIGHT;
    }
    private static final int BLIS_NONUNIT_DIAG = (int)0L;
    /**
     * {@snippet lang=c :
     * enum diag_t.BLIS_NONUNIT_DIAG = 0
     * }
     */
    public static int BLIS_NONUNIT_DIAG() {
        return BLIS_NONUNIT_DIAG;
    }
    private static final int BLIS_UNIT_DIAG = (int)256L;
    /**
     * {@snippet lang=c :
     * enum diag_t.BLIS_UNIT_DIAG = 256
     * }
     */
    public static int BLIS_UNIT_DIAG() {
        return BLIS_UNIT_DIAG;
    }
    private static final int BLIS_NO_INVERT_DIAG = (int)0L;
    /**
     * {@snippet lang=c :
     * enum invdiag_t.BLIS_NO_INVERT_DIAG = 0
     * }
     */
    public static int BLIS_NO_INVERT_DIAG() {
        return BLIS_NO_INVERT_DIAG;
    }
    private static final int BLIS_INVERT_DIAG = (int)512L;
    /**
     * {@snippet lang=c :
     * enum invdiag_t.BLIS_INVERT_DIAG = 512
     * }
     */
    public static int BLIS_INVERT_DIAG() {
        return BLIS_INVERT_DIAG;
    }
    private static final int BLIS_GENERAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum struc_t.BLIS_GENERAL = 0
     * }
     */
    public static int BLIS_GENERAL() {
        return BLIS_GENERAL;
    }
    private static final int BLIS_HERMITIAN = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum struc_t.BLIS_HERMITIAN = 1048576
     * }
     */
    public static int BLIS_HERMITIAN() {
        return BLIS_HERMITIAN;
    }
    private static final int BLIS_SYMMETRIC = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum struc_t.BLIS_SYMMETRIC = 2097152
     * }
     */
    public static int BLIS_SYMMETRIC() {
        return BLIS_SYMMETRIC;
    }
    private static final int BLIS_TRIANGULAR = (int)3145728L;
    /**
     * {@snippet lang=c :
     * enum struc_t.BLIS_TRIANGULAR = 3145728
     * }
     */
    public static int BLIS_TRIANGULAR() {
        return BLIS_TRIANGULAR;
    }
    private static final int BLIS_FLOAT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum num_t.BLIS_FLOAT = 0
     * }
     */
    public static int BLIS_FLOAT() {
        return BLIS_FLOAT;
    }
    private static final int BLIS_DOUBLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum num_t.BLIS_DOUBLE = 2
     * }
     */
    public static int BLIS_DOUBLE() {
        return BLIS_DOUBLE;
    }
    private static final int BLIS_SCOMPLEX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum num_t.BLIS_SCOMPLEX = 1
     * }
     */
    public static int BLIS_SCOMPLEX() {
        return BLIS_SCOMPLEX;
    }
    private static final int BLIS_DCOMPLEX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum num_t.BLIS_DCOMPLEX = 3
     * }
     */
    public static int BLIS_DCOMPLEX() {
        return BLIS_DCOMPLEX;
    }
    private static final int BLIS_INT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum num_t.BLIS_INT = 4
     * }
     */
    public static int BLIS_INT() {
        return BLIS_INT;
    }
    private static final int BLIS_CONSTANT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum num_t.BLIS_CONSTANT = 5
     * }
     */
    public static int BLIS_CONSTANT() {
        return BLIS_CONSTANT;
    }
    private static final int BLIS_DT_LO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum num_t.BLIS_DT_LO = 0
     * }
     */
    public static int BLIS_DT_LO() {
        return BLIS_DT_LO;
    }
    private static final int BLIS_DT_HI = (int)3L;
    /**
     * {@snippet lang=c :
     * enum num_t.BLIS_DT_HI = 3
     * }
     */
    public static int BLIS_DT_HI() {
        return BLIS_DT_HI;
    }
    private static final int BLIS_REAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum dom_t.BLIS_REAL = 0
     * }
     */
    public static int BLIS_REAL() {
        return BLIS_REAL;
    }
    private static final int BLIS_COMPLEX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum dom_t.BLIS_COMPLEX = 1
     * }
     */
    public static int BLIS_COMPLEX() {
        return BLIS_COMPLEX;
    }
    private static final int BLIS_SINGLE_PREC = (int)0L;
    /**
     * {@snippet lang=c :
     * enum prec_t.BLIS_SINGLE_PREC = 0
     * }
     */
    public static int BLIS_SINGLE_PREC() {
        return BLIS_SINGLE_PREC;
    }
    private static final int BLIS_DOUBLE_PREC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum prec_t.BLIS_DOUBLE_PREC = 2
     * }
     */
    public static int BLIS_DOUBLE_PREC() {
        return BLIS_DOUBLE_PREC;
    }
    private static final int BLIS_NOT_PACKED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum pack_t.BLIS_NOT_PACKED = 0
     * }
     */
    public static int BLIS_NOT_PACKED() {
        return BLIS_NOT_PACKED;
    }
    private static final int BLIS_PACKED_UNSPEC = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum pack_t.BLIS_PACKED_UNSPEC = 32768
     * }
     */
    public static int BLIS_PACKED_UNSPEC() {
        return BLIS_PACKED_UNSPEC;
    }
    private static final int BLIS_PACKED_VECTOR = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum pack_t.BLIS_PACKED_VECTOR = 32768
     * }
     */
    public static int BLIS_PACKED_VECTOR() {
        return BLIS_PACKED_VECTOR;
    }
    private static final int BLIS_PACKED_MATRIX = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum pack_t.BLIS_PACKED_MATRIX = 32768
     * }
     */
    public static int BLIS_PACKED_MATRIX() {
        return BLIS_PACKED_MATRIX;
    }
    private static final int BLIS_PACKED_PANELS = (int)33792L;
    /**
     * {@snippet lang=c :
     * enum pack_t.BLIS_PACKED_PANELS = 33792
     * }
     */
    public static int BLIS_PACKED_PANELS() {
        return BLIS_PACKED_PANELS;
    }
    private static final int BLIS_PACKED_PANELS_1E = (int)35840L;
    /**
     * {@snippet lang=c :
     * enum pack_t.BLIS_PACKED_PANELS_1E = 35840
     * }
     */
    public static int BLIS_PACKED_PANELS_1E() {
        return BLIS_PACKED_PANELS_1E;
    }
    private static final int BLIS_PACKED_PANELS_1R = (int)37888L;
    /**
     * {@snippet lang=c :
     * enum pack_t.BLIS_PACKED_PANELS_1R = 37888
     * }
     */
    public static int BLIS_PACKED_PANELS_1R() {
        return BLIS_PACKED_PANELS_1R;
    }
    private static final int BLIS_PACKED_PANELS_RO = (int)39936L;
    /**
     * {@snippet lang=c :
     * enum pack_t.BLIS_PACKED_PANELS_RO = 39936
     * }
     */
    public static int BLIS_PACKED_PANELS_RO() {
        return BLIS_PACKED_PANELS_RO;
    }
    private static final int BLIS_NUM_PACK_SCHEMA_TYPES_ = (int)39937L;
    /**
     * {@snippet lang=c :
     * enum pack_t.BLIS_NUM_PACK_SCHEMA_TYPES_ = 39937
     * }
     */
    public static int BLIS_NUM_PACK_SCHEMA_TYPES_() {
        return BLIS_NUM_PACK_SCHEMA_TYPES_;
    }
    private static final int BLIS_NUM_PACK_SCHEMA_TYPES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum pack_t.BLIS_NUM_PACK_SCHEMA_TYPES = 4
     * }
     */
    public static int BLIS_NUM_PACK_SCHEMA_TYPES() {
        return BLIS_NUM_PACK_SCHEMA_TYPES;
    }
    private static final int BLIS_PACK_FWD_IF_UPPER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum packord_t.BLIS_PACK_FWD_IF_UPPER = 0
     * }
     */
    public static int BLIS_PACK_FWD_IF_UPPER() {
        return BLIS_PACK_FWD_IF_UPPER;
    }
    private static final int BLIS_PACK_REV_IF_UPPER = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum packord_t.BLIS_PACK_REV_IF_UPPER = 65536
     * }
     */
    public static int BLIS_PACK_REV_IF_UPPER() {
        return BLIS_PACK_REV_IF_UPPER;
    }
    private static final int BLIS_PACK_FWD_IF_LOWER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum packord_t.BLIS_PACK_FWD_IF_LOWER = 0
     * }
     */
    public static int BLIS_PACK_FWD_IF_LOWER() {
        return BLIS_PACK_FWD_IF_LOWER;
    }
    private static final int BLIS_PACK_REV_IF_LOWER = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum packord_t.BLIS_PACK_REV_IF_LOWER = 131072
     * }
     */
    public static int BLIS_PACK_REV_IF_LOWER() {
        return BLIS_PACK_REV_IF_LOWER;
    }
    private static final int BLIS_BUFFER_FOR_A_BLOCK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum packbuf_t.BLIS_BUFFER_FOR_A_BLOCK = 0
     * }
     */
    public static int BLIS_BUFFER_FOR_A_BLOCK() {
        return BLIS_BUFFER_FOR_A_BLOCK;
    }
    private static final int BLIS_BUFFER_FOR_B_PANEL = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum packbuf_t.BLIS_BUFFER_FOR_B_PANEL = 262144
     * }
     */
    public static int BLIS_BUFFER_FOR_B_PANEL() {
        return BLIS_BUFFER_FOR_B_PANEL;
    }
    private static final int BLIS_BUFFER_FOR_C_PANEL = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum packbuf_t.BLIS_BUFFER_FOR_C_PANEL = 524288
     * }
     */
    public static int BLIS_BUFFER_FOR_C_PANEL() {
        return BLIS_BUFFER_FOR_C_PANEL;
    }
    private static final int BLIS_BUFFER_FOR_GEN_USE = (int)786432L;
    /**
     * {@snippet lang=c :
     * enum packbuf_t.BLIS_BUFFER_FOR_GEN_USE = 786432
     * }
     */
    public static int BLIS_BUFFER_FOR_GEN_USE() {
        return BLIS_BUFFER_FOR_GEN_USE;
    }
    private static final int BLIS_FWD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum dir_t.BLIS_FWD = 0
     * }
     */
    public static int BLIS_FWD() {
        return BLIS_FWD;
    }
    private static final int BLIS_BWD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum dir_t.BLIS_BWD = 1
     * }
     */
    public static int BLIS_BWD() {
        return BLIS_BWD;
    }
    private static final int BLIS_SUBPART0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART0 = 0
     * }
     */
    public static int BLIS_SUBPART0() {
        return BLIS_SUBPART0;
    }
    private static final int BLIS_SUBPART1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART1 = 1
     * }
     */
    public static int BLIS_SUBPART1() {
        return BLIS_SUBPART1;
    }
    private static final int BLIS_SUBPART2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART2 = 2
     * }
     */
    public static int BLIS_SUBPART2() {
        return BLIS_SUBPART2;
    }
    private static final int BLIS_SUBPART1AND0 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART1AND0 = 3
     * }
     */
    public static int BLIS_SUBPART1AND0() {
        return BLIS_SUBPART1AND0;
    }
    private static final int BLIS_SUBPART1AND2 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART1AND2 = 4
     * }
     */
    public static int BLIS_SUBPART1AND2() {
        return BLIS_SUBPART1AND2;
    }
    private static final int BLIS_SUBPART1A = (int)5L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART1A = 5
     * }
     */
    public static int BLIS_SUBPART1A() {
        return BLIS_SUBPART1A;
    }
    private static final int BLIS_SUBPART1B = (int)6L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART1B = 6
     * }
     */
    public static int BLIS_SUBPART1B() {
        return BLIS_SUBPART1B;
    }
    private static final int BLIS_SUBPART00 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART00 = 7
     * }
     */
    public static int BLIS_SUBPART00() {
        return BLIS_SUBPART00;
    }
    private static final int BLIS_SUBPART10 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART10 = 8
     * }
     */
    public static int BLIS_SUBPART10() {
        return BLIS_SUBPART10;
    }
    private static final int BLIS_SUBPART20 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART20 = 9
     * }
     */
    public static int BLIS_SUBPART20() {
        return BLIS_SUBPART20;
    }
    private static final int BLIS_SUBPART01 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART01 = 10
     * }
     */
    public static int BLIS_SUBPART01() {
        return BLIS_SUBPART01;
    }
    private static final int BLIS_SUBPART11 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART11 = 11
     * }
     */
    public static int BLIS_SUBPART11() {
        return BLIS_SUBPART11;
    }
    private static final int BLIS_SUBPART21 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART21 = 12
     * }
     */
    public static int BLIS_SUBPART21() {
        return BLIS_SUBPART21;
    }
    private static final int BLIS_SUBPART02 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART02 = 13
     * }
     */
    public static int BLIS_SUBPART02() {
        return BLIS_SUBPART02;
    }
    private static final int BLIS_SUBPART12 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART12 = 14
     * }
     */
    public static int BLIS_SUBPART12() {
        return BLIS_SUBPART12;
    }
    private static final int BLIS_SUBPART22 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum subpart_t.BLIS_SUBPART22 = 15
     * }
     */
    public static int BLIS_SUBPART22() {
        return BLIS_SUBPART22;
    }
    private static final int BLIS_M = (int)0L;
    /**
     * {@snippet lang=c :
     * enum mdim_t.BLIS_M = 0
     * }
     */
    public static int BLIS_M() {
        return BLIS_M;
    }
    private static final int BLIS_N = (int)1L;
    /**
     * {@snippet lang=c :
     * enum mdim_t.BLIS_N = 1
     * }
     */
    public static int BLIS_N() {
        return BLIS_N;
    }
    private static final int BLIS_MACH_EPS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_EPS = 0
     * }
     */
    public static int BLIS_MACH_EPS() {
        return BLIS_MACH_EPS;
    }
    private static final int BLIS_MACH_SFMIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_SFMIN = 1
     * }
     */
    public static int BLIS_MACH_SFMIN() {
        return BLIS_MACH_SFMIN;
    }
    private static final int BLIS_MACH_BASE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_BASE = 2
     * }
     */
    public static int BLIS_MACH_BASE() {
        return BLIS_MACH_BASE;
    }
    private static final int BLIS_MACH_PREC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_PREC = 3
     * }
     */
    public static int BLIS_MACH_PREC() {
        return BLIS_MACH_PREC;
    }
    private static final int BLIS_MACH_NDIGMANT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_NDIGMANT = 4
     * }
     */
    public static int BLIS_MACH_NDIGMANT() {
        return BLIS_MACH_NDIGMANT;
    }
    private static final int BLIS_MACH_RND = (int)5L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_RND = 5
     * }
     */
    public static int BLIS_MACH_RND() {
        return BLIS_MACH_RND;
    }
    private static final int BLIS_MACH_EMIN = (int)6L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_EMIN = 6
     * }
     */
    public static int BLIS_MACH_EMIN() {
        return BLIS_MACH_EMIN;
    }
    private static final int BLIS_MACH_RMIN = (int)7L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_RMIN = 7
     * }
     */
    public static int BLIS_MACH_RMIN() {
        return BLIS_MACH_RMIN;
    }
    private static final int BLIS_MACH_EMAX = (int)8L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_EMAX = 8
     * }
     */
    public static int BLIS_MACH_EMAX() {
        return BLIS_MACH_EMAX;
    }
    private static final int BLIS_MACH_RMAX = (int)9L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_RMAX = 9
     * }
     */
    public static int BLIS_MACH_RMAX() {
        return BLIS_MACH_RMAX;
    }
    private static final int BLIS_MACH_EPS2 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_MACH_EPS2 = 10
     * }
     */
    public static int BLIS_MACH_EPS2() {
        return BLIS_MACH_EPS2;
    }
    private static final int BLIS_NUM_MACH_PARAMS = (int)11L;
    /**
     * {@snippet lang=c :
     * enum machval_t.BLIS_NUM_MACH_PARAMS = 11
     * }
     */
    public static int BLIS_NUM_MACH_PARAMS() {
        return BLIS_NUM_MACH_PARAMS;
    }
    private static final int BLIS_1M = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ind_t.BLIS_1M = 0
     * }
     */
    public static int BLIS_1M() {
        return BLIS_1M;
    }
    private static final int BLIS_NAT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ind_t.BLIS_NAT = 1
     * }
     */
    public static int BLIS_NAT() {
        return BLIS_NAT;
    }
    private static final int BLIS_IND_FIRST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ind_t.BLIS_IND_FIRST = 0
     * }
     */
    public static int BLIS_IND_FIRST() {
        return BLIS_IND_FIRST;
    }
    private static final int BLIS_IND_LAST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ind_t.BLIS_IND_LAST = 1
     * }
     */
    public static int BLIS_IND_LAST() {
        return BLIS_IND_LAST;
    }
    private static final int BLIS_NUM_IND_METHODS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ind_t.BLIS_NUM_IND_METHODS = 2
     * }
     */
    public static int BLIS_NUM_IND_METHODS() {
        return BLIS_NUM_IND_METHODS;
    }
    private static final int BLIS_SINGLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum timpl_t.BLIS_SINGLE = 0
     * }
     */
    public static int BLIS_SINGLE() {
        return BLIS_SINGLE;
    }
    private static final int BLIS_OPENMP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum timpl_t.BLIS_OPENMP = 1
     * }
     */
    public static int BLIS_OPENMP() {
        return BLIS_OPENMP;
    }
    private static final int BLIS_POSIX = (int)2L;
    /**
     * {@snippet lang=c :
     * enum timpl_t.BLIS_POSIX = 2
     * }
     */
    public static int BLIS_POSIX() {
        return BLIS_POSIX;
    }
    private static final int BLIS_HPX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum timpl_t.BLIS_HPX = 3
     * }
     */
    public static int BLIS_HPX() {
        return BLIS_HPX;
    }
    private static final int BLIS_NUM_THREAD_IMPLS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum timpl_t.BLIS_NUM_THREAD_IMPLS = 4
     * }
     */
    public static int BLIS_NUM_THREAD_IMPLS() {
        return BLIS_NUM_THREAD_IMPLS;
    }
    private static final int BLIS_ADDV_KER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_ADDV_KER = 0
     * }
     */
    public static int BLIS_ADDV_KER() {
        return BLIS_ADDV_KER;
    }
    private static final int BLIS_AMAXV_KER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_AMAXV_KER = 1
     * }
     */
    public static int BLIS_AMAXV_KER() {
        return BLIS_AMAXV_KER;
    }
    private static final int BLIS_AXPBYV_KER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_AXPBYV_KER = 2
     * }
     */
    public static int BLIS_AXPBYV_KER() {
        return BLIS_AXPBYV_KER;
    }
    private static final int BLIS_AXPYV_KER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_AXPYV_KER = 3
     * }
     */
    public static int BLIS_AXPYV_KER() {
        return BLIS_AXPYV_KER;
    }
    private static final int BLIS_COPYV_KER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_COPYV_KER = 4
     * }
     */
    public static int BLIS_COPYV_KER() {
        return BLIS_COPYV_KER;
    }
    private static final int BLIS_DOTV_KER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_DOTV_KER = 5
     * }
     */
    public static int BLIS_DOTV_KER() {
        return BLIS_DOTV_KER;
    }
    private static final int BLIS_DOTXV_KER = (int)6L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_DOTXV_KER = 6
     * }
     */
    public static int BLIS_DOTXV_KER() {
        return BLIS_DOTXV_KER;
    }
    private static final int BLIS_INVERTV_KER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_INVERTV_KER = 7
     * }
     */
    public static int BLIS_INVERTV_KER() {
        return BLIS_INVERTV_KER;
    }
    private static final int BLIS_INVSCALV_KER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_INVSCALV_KER = 8
     * }
     */
    public static int BLIS_INVSCALV_KER() {
        return BLIS_INVSCALV_KER;
    }
    private static final int BLIS_SCALV_KER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_SCALV_KER = 9
     * }
     */
    public static int BLIS_SCALV_KER() {
        return BLIS_SCALV_KER;
    }
    private static final int BLIS_SCAL2V_KER = (int)10L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_SCAL2V_KER = 10
     * }
     */
    public static int BLIS_SCAL2V_KER() {
        return BLIS_SCAL2V_KER;
    }
    private static final int BLIS_SETV_KER = (int)11L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_SETV_KER = 11
     * }
     */
    public static int BLIS_SETV_KER() {
        return BLIS_SETV_KER;
    }
    private static final int BLIS_SUBV_KER = (int)12L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_SUBV_KER = 12
     * }
     */
    public static int BLIS_SUBV_KER() {
        return BLIS_SUBV_KER;
    }
    private static final int BLIS_SWAPV_KER = (int)13L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_SWAPV_KER = 13
     * }
     */
    public static int BLIS_SWAPV_KER() {
        return BLIS_SWAPV_KER;
    }
    private static final int BLIS_XPBYV_KER = (int)14L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_XPBYV_KER = 14
     * }
     */
    public static int BLIS_XPBYV_KER() {
        return BLIS_XPBYV_KER;
    }
    private static final int BLIS_AXPY2V_KER = (int)15L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_AXPY2V_KER = 15
     * }
     */
    public static int BLIS_AXPY2V_KER() {
        return BLIS_AXPY2V_KER;
    }
    private static final int BLIS_DOTAXPYV_KER = (int)16L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_DOTAXPYV_KER = 16
     * }
     */
    public static int BLIS_DOTAXPYV_KER() {
        return BLIS_DOTAXPYV_KER;
    }
    private static final int BLIS_AXPYF_KER = (int)17L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_AXPYF_KER = 17
     * }
     */
    public static int BLIS_AXPYF_KER() {
        return BLIS_AXPYF_KER;
    }
    private static final int BLIS_DOTXF_KER = (int)18L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_DOTXF_KER = 18
     * }
     */
    public static int BLIS_DOTXF_KER() {
        return BLIS_DOTXF_KER;
    }
    private static final int BLIS_DOTXAXPYF_KER = (int)19L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_DOTXAXPYF_KER = 19
     * }
     */
    public static int BLIS_DOTXAXPYF_KER() {
        return BLIS_DOTXAXPYF_KER;
    }
    private static final int BLIS_GEMMTRSM_L_UKR = (int)20L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMTRSM_L_UKR = 20
     * }
     */
    public static int BLIS_GEMMTRSM_L_UKR() {
        return BLIS_GEMMTRSM_L_UKR;
    }
    private static final int BLIS_GEMMTRSM_U_UKR = (int)21L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMTRSM_U_UKR = 21
     * }
     */
    public static int BLIS_GEMMTRSM_U_UKR() {
        return BLIS_GEMMTRSM_U_UKR;
    }
    private static final int BLIS_TRSM_L_UKR = (int)22L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_TRSM_L_UKR = 22
     * }
     */
    public static int BLIS_TRSM_L_UKR() {
        return BLIS_TRSM_L_UKR;
    }
    private static final int BLIS_TRSM_U_UKR = (int)23L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_TRSM_U_UKR = 23
     * }
     */
    public static int BLIS_TRSM_U_UKR() {
        return BLIS_TRSM_U_UKR;
    }
    private static final int BLIS_GEMMTRSM1M_L_UKR = (int)24L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMTRSM1M_L_UKR = 24
     * }
     */
    public static int BLIS_GEMMTRSM1M_L_UKR() {
        return BLIS_GEMMTRSM1M_L_UKR;
    }
    private static final int BLIS_GEMMTRSM1M_U_UKR = (int)25L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMTRSM1M_U_UKR = 25
     * }
     */
    public static int BLIS_GEMMTRSM1M_U_UKR() {
        return BLIS_GEMMTRSM1M_U_UKR;
    }
    private static final int BLIS_GEMMSUP_RRR_UKR = (int)26L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMSUP_RRR_UKR = 26
     * }
     */
    public static int BLIS_GEMMSUP_RRR_UKR() {
        return BLIS_GEMMSUP_RRR_UKR;
    }
    private static final int BLIS_GEMMSUP_RRC_UKR = (int)27L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMSUP_RRC_UKR = 27
     * }
     */
    public static int BLIS_GEMMSUP_RRC_UKR() {
        return BLIS_GEMMSUP_RRC_UKR;
    }
    private static final int BLIS_GEMMSUP_RCR_UKR = (int)28L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMSUP_RCR_UKR = 28
     * }
     */
    public static int BLIS_GEMMSUP_RCR_UKR() {
        return BLIS_GEMMSUP_RCR_UKR;
    }
    private static final int BLIS_GEMMSUP_RCC_UKR = (int)29L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMSUP_RCC_UKR = 29
     * }
     */
    public static int BLIS_GEMMSUP_RCC_UKR() {
        return BLIS_GEMMSUP_RCC_UKR;
    }
    private static final int BLIS_GEMMSUP_CRR_UKR = (int)30L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMSUP_CRR_UKR = 30
     * }
     */
    public static int BLIS_GEMMSUP_CRR_UKR() {
        return BLIS_GEMMSUP_CRR_UKR;
    }
    private static final int BLIS_GEMMSUP_CRC_UKR = (int)31L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMSUP_CRC_UKR = 31
     * }
     */
    public static int BLIS_GEMMSUP_CRC_UKR() {
        return BLIS_GEMMSUP_CRC_UKR;
    }
    private static final int BLIS_GEMMSUP_CCR_UKR = (int)32L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMSUP_CCR_UKR = 32
     * }
     */
    public static int BLIS_GEMMSUP_CCR_UKR() {
        return BLIS_GEMMSUP_CCR_UKR;
    }
    private static final int BLIS_GEMMSUP_CCC_UKR = (int)33L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMSUP_CCC_UKR = 33
     * }
     */
    public static int BLIS_GEMMSUP_CCC_UKR() {
        return BLIS_GEMMSUP_CCC_UKR;
    }
    private static final int BLIS_GEMMSUP_XXX_UKR = (int)34L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMMSUP_XXX_UKR = 34
     * }
     */
    public static int BLIS_GEMMSUP_XXX_UKR() {
        return BLIS_GEMMSUP_XXX_UKR;
    }
    private static final int BLIS_NUM_UKRS_ = (int)35L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_NUM_UKRS_ = 35
     * }
     */
    public static int BLIS_NUM_UKRS_() {
        return BLIS_NUM_UKRS_;
    }
    private static final int BLIS_NUM_UKRS = (int)35L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_NUM_UKRS = 35
     * }
     */
    public static int BLIS_NUM_UKRS() {
        return BLIS_NUM_UKRS;
    }
    private static final int BLIS_PACKM_KER = (int)268435456L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_PACKM_KER = 268435456
     * }
     */
    public static int BLIS_PACKM_KER() {
        return BLIS_PACKM_KER;
    }
    private static final int BLIS_PACKM_1ER_KER = (int)268435457L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_PACKM_1ER_KER = 268435457
     * }
     */
    public static int BLIS_PACKM_1ER_KER() {
        return BLIS_PACKM_1ER_KER;
    }
    private static final int BLIS_PACKM_RO_KER = (int)268435458L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_PACKM_RO_KER = 268435458
     * }
     */
    public static int BLIS_PACKM_RO_KER() {
        return BLIS_PACKM_RO_KER;
    }
    private static final int BLIS_PACKM_DIAG_KER = (int)268435459L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_PACKM_DIAG_KER = 268435459
     * }
     */
    public static int BLIS_PACKM_DIAG_KER() {
        return BLIS_PACKM_DIAG_KER;
    }
    private static final int BLIS_PACKM_DIAG_1ER_KER = (int)268435460L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_PACKM_DIAG_1ER_KER = 268435460
     * }
     */
    public static int BLIS_PACKM_DIAG_1ER_KER() {
        return BLIS_PACKM_DIAG_1ER_KER;
    }
    private static final int BLIS_PACKM_DIAG_RO_KER = (int)268435461L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_PACKM_DIAG_RO_KER = 268435461
     * }
     */
    public static int BLIS_PACKM_DIAG_RO_KER() {
        return BLIS_PACKM_DIAG_RO_KER;
    }
    private static final int BLIS_UNPACKM_KER = (int)268435462L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_UNPACKM_KER = 268435462
     * }
     */
    public static int BLIS_UNPACKM_KER() {
        return BLIS_UNPACKM_KER;
    }
    private static final int BLIS_GEMM_UKR = (int)268435463L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMM_UKR = 268435463
     * }
     */
    public static int BLIS_GEMM_UKR() {
        return BLIS_GEMM_UKR;
    }
    private static final int BLIS_GEMM1M_UKR = (int)268435464L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMM1M_UKR = 268435464
     * }
     */
    public static int BLIS_GEMM1M_UKR() {
        return BLIS_GEMM1M_UKR;
    }
    private static final int BLIS_GEMM_CCR_UKR = (int)268435465L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMM_CCR_UKR = 268435465
     * }
     */
    public static int BLIS_GEMM_CCR_UKR() {
        return BLIS_GEMM_CCR_UKR;
    }
    private static final int BLIS_GEMM_RCC_UKR = (int)268435466L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMM_RCC_UKR = 268435466
     * }
     */
    public static int BLIS_GEMM_RCC_UKR() {
        return BLIS_GEMM_RCC_UKR;
    }
    private static final int BLIS_GEMM_CRR_UKR = (int)268435467L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_GEMM_CRR_UKR = 268435467
     * }
     */
    public static int BLIS_GEMM_CRR_UKR() {
        return BLIS_GEMM_CRR_UKR;
    }
    private static final int BLIS_NUM_UKR2S_ = (int)268435468L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_NUM_UKR2S_ = 268435468
     * }
     */
    public static int BLIS_NUM_UKR2S_() {
        return BLIS_NUM_UKR2S_;
    }
    private static final int BLIS_NUM_UKR2S = (int)12L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_NUM_UKR2S = 12
     * }
     */
    public static int BLIS_NUM_UKR2S() {
        return BLIS_NUM_UKR2S;
    }
    private static final int BLIS_UKRS_END_ = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum ukr_t.BLIS_UKRS_END_ = -1
     * }
     */
    public static int BLIS_UKRS_END_() {
        return BLIS_UKRS_END_;
    }
    private static final int BLIS_GEMM_UKR_ROW_PREF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMM_UKR_ROW_PREF = 0
     * }
     */
    public static int BLIS_GEMM_UKR_ROW_PREF() {
        return BLIS_GEMM_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMTRSM_L_UKR_ROW_PREF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMTRSM_L_UKR_ROW_PREF = 1
     * }
     */
    public static int BLIS_GEMMTRSM_L_UKR_ROW_PREF() {
        return BLIS_GEMMTRSM_L_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMTRSM_U_UKR_ROW_PREF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMTRSM_U_UKR_ROW_PREF = 2
     * }
     */
    public static int BLIS_GEMMTRSM_U_UKR_ROW_PREF() {
        return BLIS_GEMMTRSM_U_UKR_ROW_PREF;
    }
    private static final int BLIS_TRSM_L_UKR_ROW_PREF = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_TRSM_L_UKR_ROW_PREF = 3
     * }
     */
    public static int BLIS_TRSM_L_UKR_ROW_PREF() {
        return BLIS_TRSM_L_UKR_ROW_PREF;
    }
    private static final int BLIS_TRSM_U_UKR_ROW_PREF = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_TRSM_U_UKR_ROW_PREF = 4
     * }
     */
    public static int BLIS_TRSM_U_UKR_ROW_PREF() {
        return BLIS_TRSM_U_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMSUP_RRR_UKR_ROW_PREF = (int)5L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMSUP_RRR_UKR_ROW_PREF = 5
     * }
     */
    public static int BLIS_GEMMSUP_RRR_UKR_ROW_PREF() {
        return BLIS_GEMMSUP_RRR_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMSUP_RRC_UKR_ROW_PREF = (int)6L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMSUP_RRC_UKR_ROW_PREF = 6
     * }
     */
    public static int BLIS_GEMMSUP_RRC_UKR_ROW_PREF() {
        return BLIS_GEMMSUP_RRC_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMSUP_RCR_UKR_ROW_PREF = (int)7L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMSUP_RCR_UKR_ROW_PREF = 7
     * }
     */
    public static int BLIS_GEMMSUP_RCR_UKR_ROW_PREF() {
        return BLIS_GEMMSUP_RCR_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMSUP_RCC_UKR_ROW_PREF = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMSUP_RCC_UKR_ROW_PREF = 8
     * }
     */
    public static int BLIS_GEMMSUP_RCC_UKR_ROW_PREF() {
        return BLIS_GEMMSUP_RCC_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMSUP_CRR_UKR_ROW_PREF = (int)9L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMSUP_CRR_UKR_ROW_PREF = 9
     * }
     */
    public static int BLIS_GEMMSUP_CRR_UKR_ROW_PREF() {
        return BLIS_GEMMSUP_CRR_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMSUP_CRC_UKR_ROW_PREF = (int)10L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMSUP_CRC_UKR_ROW_PREF = 10
     * }
     */
    public static int BLIS_GEMMSUP_CRC_UKR_ROW_PREF() {
        return BLIS_GEMMSUP_CRC_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMSUP_CCR_UKR_ROW_PREF = (int)11L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMSUP_CCR_UKR_ROW_PREF = 11
     * }
     */
    public static int BLIS_GEMMSUP_CCR_UKR_ROW_PREF() {
        return BLIS_GEMMSUP_CCR_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMSUP_CCC_UKR_ROW_PREF = (int)12L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMSUP_CCC_UKR_ROW_PREF = 12
     * }
     */
    public static int BLIS_GEMMSUP_CCC_UKR_ROW_PREF() {
        return BLIS_GEMMSUP_CCC_UKR_ROW_PREF;
    }
    private static final int BLIS_GEMMSUP_XXX_UKR_ROW_PREF = (int)13L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_GEMMSUP_XXX_UKR_ROW_PREF = 13
     * }
     */
    public static int BLIS_GEMMSUP_XXX_UKR_ROW_PREF() {
        return BLIS_GEMMSUP_XXX_UKR_ROW_PREF;
    }
    private static final int BLIS_NUM_UKR_PREFS = (int)14L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_NUM_UKR_PREFS = 14
     * }
     */
    public static int BLIS_NUM_UKR_PREFS() {
        return BLIS_NUM_UKR_PREFS;
    }
    private static final int BLIS_UKR_PREFS_END_ = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum ukr_pref_t.BLIS_UKR_PREFS_END_ = -1
     * }
     */
    public static int BLIS_UKR_PREFS_END_() {
        return BLIS_UKR_PREFS_END_;
    }
    private static final int BLIS_REFERENCE_UKERNEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum kimpl_t.BLIS_REFERENCE_UKERNEL = 0
     * }
     */
    public static int BLIS_REFERENCE_UKERNEL() {
        return BLIS_REFERENCE_UKERNEL;
    }
    private static final int BLIS_VIRTUAL_UKERNEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum kimpl_t.BLIS_VIRTUAL_UKERNEL = 1
     * }
     */
    public static int BLIS_VIRTUAL_UKERNEL() {
        return BLIS_VIRTUAL_UKERNEL;
    }
    private static final int BLIS_OPTIMIZED_UKERNEL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum kimpl_t.BLIS_OPTIMIZED_UKERNEL = 2
     * }
     */
    public static int BLIS_OPTIMIZED_UKERNEL() {
        return BLIS_OPTIMIZED_UKERNEL;
    }
    private static final int BLIS_NOTAPPLIC_UKERNEL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum kimpl_t.BLIS_NOTAPPLIC_UKERNEL = 3
     * }
     */
    public static int BLIS_NOTAPPLIC_UKERNEL() {
        return BLIS_NOTAPPLIC_UKERNEL;
    }
    private static final int BLIS_NUM_UKR_IMPL_TYPES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum kimpl_t.BLIS_NUM_UKR_IMPL_TYPES = 4
     * }
     */
    public static int BLIS_NUM_UKR_IMPL_TYPES() {
        return BLIS_NUM_UKR_IMPL_TYPES;
    }
    private static final int BLIS_RRR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum stor3_t.BLIS_RRR = 0
     * }
     */
    public static int BLIS_RRR() {
        return BLIS_RRR;
    }
    private static final int BLIS_RRC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum stor3_t.BLIS_RRC = 1
     * }
     */
    public static int BLIS_RRC() {
        return BLIS_RRC;
    }
    private static final int BLIS_RCR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum stor3_t.BLIS_RCR = 2
     * }
     */
    public static int BLIS_RCR() {
        return BLIS_RCR;
    }
    private static final int BLIS_RCC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum stor3_t.BLIS_RCC = 3
     * }
     */
    public static int BLIS_RCC() {
        return BLIS_RCC;
    }
    private static final int BLIS_CRR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum stor3_t.BLIS_CRR = 4
     * }
     */
    public static int BLIS_CRR() {
        return BLIS_CRR;
    }
    private static final int BLIS_CRC = (int)5L;
    /**
     * {@snippet lang=c :
     * enum stor3_t.BLIS_CRC = 5
     * }
     */
    public static int BLIS_CRC() {
        return BLIS_CRC;
    }
    private static final int BLIS_CCR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum stor3_t.BLIS_CCR = 6
     * }
     */
    public static int BLIS_CCR() {
        return BLIS_CCR;
    }
    private static final int BLIS_CCC = (int)7L;
    /**
     * {@snippet lang=c :
     * enum stor3_t.BLIS_CCC = 7
     * }
     */
    public static int BLIS_CCC() {
        return BLIS_CCC;
    }
    private static final int BLIS_XXX = (int)8L;
    /**
     * {@snippet lang=c :
     * enum stor3_t.BLIS_XXX = 8
     * }
     */
    public static int BLIS_XXX() {
        return BLIS_XXX;
    }
    private static final int BLIS_NUM_3OP_RC_COMBOS = (int)9L;
    /**
     * {@snippet lang=c :
     * enum stor3_t.BLIS_NUM_3OP_RC_COMBOS = 9
     * }
     */
    public static int BLIS_NUM_3OP_RC_COMBOS() {
        return BLIS_NUM_3OP_RC_COMBOS;
    }
    private static final int BLIS_GEMM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_GEMM = 0
     * }
     */
    public static int BLIS_GEMM() {
        return BLIS_GEMM;
    }
    private static final int BLIS_GEMMT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_GEMMT = 1
     * }
     */
    public static int BLIS_GEMMT() {
        return BLIS_GEMMT;
    }
    private static final int BLIS_HEMM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_HEMM = 2
     * }
     */
    public static int BLIS_HEMM() {
        return BLIS_HEMM;
    }
    private static final int BLIS_HERK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_HERK = 3
     * }
     */
    public static int BLIS_HERK() {
        return BLIS_HERK;
    }
    private static final int BLIS_HER2K = (int)4L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_HER2K = 4
     * }
     */
    public static int BLIS_HER2K() {
        return BLIS_HER2K;
    }
    private static final int BLIS_SYMM = (int)5L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_SYMM = 5
     * }
     */
    public static int BLIS_SYMM() {
        return BLIS_SYMM;
    }
    private static final int BLIS_SYRK = (int)6L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_SYRK = 6
     * }
     */
    public static int BLIS_SYRK() {
        return BLIS_SYRK;
    }
    private static final int BLIS_SYR2K = (int)7L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_SYR2K = 7
     * }
     */
    public static int BLIS_SYR2K() {
        return BLIS_SYR2K;
    }
    private static final int BLIS_TRMM3 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_TRMM3 = 8
     * }
     */
    public static int BLIS_TRMM3() {
        return BLIS_TRMM3;
    }
    private static final int BLIS_TRMM = (int)9L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_TRMM = 9
     * }
     */
    public static int BLIS_TRMM() {
        return BLIS_TRMM;
    }
    private static final int BLIS_TRSM = (int)10L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_TRSM = 10
     * }
     */
    public static int BLIS_TRSM() {
        return BLIS_TRSM;
    }
    private static final int BLIS_NOID = (int)11L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_NOID = 11
     * }
     */
    public static int BLIS_NOID() {
        return BLIS_NOID;
    }
    private static final int BLIS_NUM_LEVEL3_OPS = (int)11L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_NUM_LEVEL3_OPS = 11
     * }
     */
    public static int BLIS_NUM_LEVEL3_OPS() {
        return BLIS_NUM_LEVEL3_OPS;
    }
    private static final int BLIS_LEVEL3_OPS_END_ = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum opid_t.BLIS_LEVEL3_OPS_END_ = -1
     * }
     */
    public static int BLIS_LEVEL3_OPS_END_() {
        return BLIS_LEVEL3_OPS_END_;
    }
    private static final int BLIS_KR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_KR = 0
     * }
     */
    public static int BLIS_KR() {
        return BLIS_KR;
    }
    private static final int BLIS_MR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_MR = 1
     * }
     */
    public static int BLIS_MR() {
        return BLIS_MR;
    }
    private static final int BLIS_NR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_NR = 2
     * }
     */
    public static int BLIS_NR() {
        return BLIS_NR;
    }
    private static final int BLIS_MC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_MC = 3
     * }
     */
    public static int BLIS_MC() {
        return BLIS_MC;
    }
    private static final int BLIS_KC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_KC = 4
     * }
     */
    public static int BLIS_KC() {
        return BLIS_KC;
    }
    private static final int BLIS_NC = (int)5L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_NC = 5
     * }
     */
    public static int BLIS_NC() {
        return BLIS_NC;
    }
    private static final int BLIS_BBM = (int)6L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_BBM = 6
     * }
     */
    public static int BLIS_BBM() {
        return BLIS_BBM;
    }
    private static final int BLIS_BBN = (int)7L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_BBN = 7
     * }
     */
    public static int BLIS_BBN() {
        return BLIS_BBN;
    }
    private static final int BLIS_M2 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_M2 = 8
     * }
     */
    public static int BLIS_M2() {
        return BLIS_M2;
    }
    private static final int BLIS_N2 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_N2 = 9
     * }
     */
    public static int BLIS_N2() {
        return BLIS_N2;
    }
    private static final int BLIS_AF = (int)10L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_AF = 10
     * }
     */
    public static int BLIS_AF() {
        return BLIS_AF;
    }
    private static final int BLIS_DF = (int)11L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_DF = 11
     * }
     */
    public static int BLIS_DF() {
        return BLIS_DF;
    }
    private static final int BLIS_XF = (int)12L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_XF = 12
     * }
     */
    public static int BLIS_XF() {
        return BLIS_XF;
    }
    private static final int BLIS_MT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_MT = 13
     * }
     */
    public static int BLIS_MT() {
        return BLIS_MT;
    }
    private static final int BLIS_NT = (int)14L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_NT = 14
     * }
     */
    public static int BLIS_NT() {
        return BLIS_NT;
    }
    private static final int BLIS_KT = (int)15L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_KT = 15
     * }
     */
    public static int BLIS_KT() {
        return BLIS_KT;
    }
    private static final int BLIS_KR_SUP = (int)16L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_KR_SUP = 16
     * }
     */
    public static int BLIS_KR_SUP() {
        return BLIS_KR_SUP;
    }
    private static final int BLIS_MR_SUP = (int)17L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_MR_SUP = 17
     * }
     */
    public static int BLIS_MR_SUP() {
        return BLIS_MR_SUP;
    }
    private static final int BLIS_NR_SUP = (int)18L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_NR_SUP = 18
     * }
     */
    public static int BLIS_NR_SUP() {
        return BLIS_NR_SUP;
    }
    private static final int BLIS_MC_SUP = (int)19L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_MC_SUP = 19
     * }
     */
    public static int BLIS_MC_SUP() {
        return BLIS_MC_SUP;
    }
    private static final int BLIS_KC_SUP = (int)20L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_KC_SUP = 20
     * }
     */
    public static int BLIS_KC_SUP() {
        return BLIS_KC_SUP;
    }
    private static final int BLIS_NC_SUP = (int)21L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_NC_SUP = 21
     * }
     */
    public static int BLIS_NC_SUP() {
        return BLIS_NC_SUP;
    }
    private static final int BLIS_NO_PART = (int)22L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_NO_PART = 22
     * }
     */
    public static int BLIS_NO_PART() {
        return BLIS_NO_PART;
    }
    private static final int BLIS_NUM_BLKSZS = (int)22L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_NUM_BLKSZS = 22
     * }
     */
    public static int BLIS_NUM_BLKSZS() {
        return BLIS_NUM_BLKSZS;
    }
    private static final int BLIS_BLKSZS_END_ = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum bszid_t.BLIS_BLKSZS_END_ = -1
     * }
     */
    public static int BLIS_BLKSZS_END_() {
        return BLIS_BLKSZS_END_;
    }
    private static final int BLIS_THREAD_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/include//bli_type_defs.h:940:1).BLIS_THREAD_NONE = 0
     * }
     */
    public static int BLIS_THREAD_NONE() {
        return BLIS_THREAD_NONE;
    }
    private static final int BLIS_THREAD_KR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/include//bli_type_defs.h:940:1).BLIS_THREAD_KR = 1
     * }
     */
    public static int BLIS_THREAD_KR() {
        return BLIS_THREAD_KR;
    }
    private static final int BLIS_THREAD_MR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/include//bli_type_defs.h:940:1).BLIS_THREAD_MR = 2
     * }
     */
    public static int BLIS_THREAD_MR() {
        return BLIS_THREAD_MR;
    }
    private static final int BLIS_THREAD_NR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/include//bli_type_defs.h:940:1).BLIS_THREAD_NR = 4
     * }
     */
    public static int BLIS_THREAD_NR() {
        return BLIS_THREAD_NR;
    }
    private static final int BLIS_THREAD_MC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/include//bli_type_defs.h:940:1).BLIS_THREAD_MC = 8
     * }
     */
    public static int BLIS_THREAD_MC() {
        return BLIS_THREAD_MC;
    }
    private static final int BLIS_THREAD_KC = (int)16L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/include//bli_type_defs.h:940:1).BLIS_THREAD_KC = 16
     * }
     */
    public static int BLIS_THREAD_KC() {
        return BLIS_THREAD_KC;
    }
    private static final int BLIS_THREAD_NC = (int)32L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/include//bli_type_defs.h:940:1).BLIS_THREAD_NC = 32
     * }
     */
    public static int BLIS_THREAD_NC() {
        return BLIS_THREAD_NC;
    }
    private static final int BLIS_ARCH_SKX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_SKX = 0
     * }
     */
    public static int BLIS_ARCH_SKX() {
        return BLIS_ARCH_SKX;
    }
    private static final int BLIS_ARCH_KNL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_KNL = 1
     * }
     */
    public static int BLIS_ARCH_KNL() {
        return BLIS_ARCH_KNL;
    }
    private static final int BLIS_ARCH_KNC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_KNC = 2
     * }
     */
    public static int BLIS_ARCH_KNC() {
        return BLIS_ARCH_KNC;
    }
    private static final int BLIS_ARCH_HASWELL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_HASWELL = 3
     * }
     */
    public static int BLIS_ARCH_HASWELL() {
        return BLIS_ARCH_HASWELL;
    }
    private static final int BLIS_ARCH_SANDYBRIDGE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_SANDYBRIDGE = 4
     * }
     */
    public static int BLIS_ARCH_SANDYBRIDGE() {
        return BLIS_ARCH_SANDYBRIDGE;
    }
    private static final int BLIS_ARCH_PENRYN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_PENRYN = 5
     * }
     */
    public static int BLIS_ARCH_PENRYN() {
        return BLIS_ARCH_PENRYN;
    }
    private static final int BLIS_ARCH_ZEN3 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_ZEN3 = 6
     * }
     */
    public static int BLIS_ARCH_ZEN3() {
        return BLIS_ARCH_ZEN3;
    }
    private static final int BLIS_ARCH_ZEN2 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_ZEN2 = 7
     * }
     */
    public static int BLIS_ARCH_ZEN2() {
        return BLIS_ARCH_ZEN2;
    }
    private static final int BLIS_ARCH_ZEN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_ZEN = 8
     * }
     */
    public static int BLIS_ARCH_ZEN() {
        return BLIS_ARCH_ZEN;
    }
    private static final int BLIS_ARCH_EXCAVATOR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_EXCAVATOR = 9
     * }
     */
    public static int BLIS_ARCH_EXCAVATOR() {
        return BLIS_ARCH_EXCAVATOR;
    }
    private static final int BLIS_ARCH_STEAMROLLER = (int)10L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_STEAMROLLER = 10
     * }
     */
    public static int BLIS_ARCH_STEAMROLLER() {
        return BLIS_ARCH_STEAMROLLER;
    }
    private static final int BLIS_ARCH_PILEDRIVER = (int)11L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_PILEDRIVER = 11
     * }
     */
    public static int BLIS_ARCH_PILEDRIVER() {
        return BLIS_ARCH_PILEDRIVER;
    }
    private static final int BLIS_ARCH_BULLDOZER = (int)12L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_BULLDOZER = 12
     * }
     */
    public static int BLIS_ARCH_BULLDOZER() {
        return BLIS_ARCH_BULLDOZER;
    }
    private static final int BLIS_ARCH_ARMSVE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_ARMSVE = 13
     * }
     */
    public static int BLIS_ARCH_ARMSVE() {
        return BLIS_ARCH_ARMSVE;
    }
    private static final int BLIS_ARCH_A64FX = (int)14L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_A64FX = 14
     * }
     */
    public static int BLIS_ARCH_A64FX() {
        return BLIS_ARCH_A64FX;
    }
    private static final int BLIS_ARCH_ALTRAMAX = (int)15L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_ALTRAMAX = 15
     * }
     */
    public static int BLIS_ARCH_ALTRAMAX() {
        return BLIS_ARCH_ALTRAMAX;
    }
    private static final int BLIS_ARCH_ALTRA = (int)16L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_ALTRA = 16
     * }
     */
    public static int BLIS_ARCH_ALTRA() {
        return BLIS_ARCH_ALTRA;
    }
    private static final int BLIS_ARCH_FIRESTORM = (int)17L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_FIRESTORM = 17
     * }
     */
    public static int BLIS_ARCH_FIRESTORM() {
        return BLIS_ARCH_FIRESTORM;
    }
    private static final int BLIS_ARCH_THUNDERX2 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_THUNDERX2 = 18
     * }
     */
    public static int BLIS_ARCH_THUNDERX2() {
        return BLIS_ARCH_THUNDERX2;
    }
    private static final int BLIS_ARCH_CORTEXA57 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_CORTEXA57 = 19
     * }
     */
    public static int BLIS_ARCH_CORTEXA57() {
        return BLIS_ARCH_CORTEXA57;
    }
    private static final int BLIS_ARCH_CORTEXA53 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_CORTEXA53 = 20
     * }
     */
    public static int BLIS_ARCH_CORTEXA53() {
        return BLIS_ARCH_CORTEXA53;
    }
    private static final int BLIS_ARCH_CORTEXA15 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_CORTEXA15 = 21
     * }
     */
    public static int BLIS_ARCH_CORTEXA15() {
        return BLIS_ARCH_CORTEXA15;
    }
    private static final int BLIS_ARCH_CORTEXA9 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_CORTEXA9 = 22
     * }
     */
    public static int BLIS_ARCH_CORTEXA9() {
        return BLIS_ARCH_CORTEXA9;
    }
    private static final int BLIS_ARCH_POWER10 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_POWER10 = 23
     * }
     */
    public static int BLIS_ARCH_POWER10() {
        return BLIS_ARCH_POWER10;
    }
    private static final int BLIS_ARCH_POWER9 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_POWER9 = 24
     * }
     */
    public static int BLIS_ARCH_POWER9() {
        return BLIS_ARCH_POWER9;
    }
    private static final int BLIS_ARCH_POWER7 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_POWER7 = 25
     * }
     */
    public static int BLIS_ARCH_POWER7() {
        return BLIS_ARCH_POWER7;
    }
    private static final int BLIS_ARCH_BGQ = (int)26L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_BGQ = 26
     * }
     */
    public static int BLIS_ARCH_BGQ() {
        return BLIS_ARCH_BGQ;
    }
    private static final int BLIS_ARCH_RV32I = (int)27L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_RV32I = 27
     * }
     */
    public static int BLIS_ARCH_RV32I() {
        return BLIS_ARCH_RV32I;
    }
    private static final int BLIS_ARCH_RV64I = (int)28L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_RV64I = 28
     * }
     */
    public static int BLIS_ARCH_RV64I() {
        return BLIS_ARCH_RV64I;
    }
    private static final int BLIS_ARCH_RV32IV = (int)29L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_RV32IV = 29
     * }
     */
    public static int BLIS_ARCH_RV32IV() {
        return BLIS_ARCH_RV32IV;
    }
    private static final int BLIS_ARCH_RV64IV = (int)30L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_RV64IV = 30
     * }
     */
    public static int BLIS_ARCH_RV64IV() {
        return BLIS_ARCH_RV64IV;
    }
    private static final int BLIS_ARCH_SIFIVE_X280 = (int)31L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_SIFIVE_X280 = 31
     * }
     */
    public static int BLIS_ARCH_SIFIVE_X280() {
        return BLIS_ARCH_SIFIVE_X280;
    }
    private static final int BLIS_ARCH_GENERIC = (int)32L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_ARCH_GENERIC = 32
     * }
     */
    public static int BLIS_ARCH_GENERIC() {
        return BLIS_ARCH_GENERIC;
    }
    private static final int BLIS_NUM_ARCHS = (int)33L;
    /**
     * {@snippet lang=c :
     * enum arch_t.BLIS_NUM_ARCHS = 33
     * }
     */
    public static int BLIS_NUM_ARCHS() {
        return BLIS_NUM_ARCHS;
    }
    private static final int BLIS_NO_ERROR_CHECKING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum errlev_t.BLIS_NO_ERROR_CHECKING = 0
     * }
     */
    public static int BLIS_NO_ERROR_CHECKING() {
        return BLIS_NO_ERROR_CHECKING;
    }
    private static final int BLIS_FULL_ERROR_CHECKING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum errlev_t.BLIS_FULL_ERROR_CHECKING = 1
     * }
     */
    public static int BLIS_FULL_ERROR_CHECKING() {
        return BLIS_FULL_ERROR_CHECKING;
    }
    private static final int BLIS_SUCCESS = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_SUCCESS = -1
     * }
     */
    public static int BLIS_SUCCESS() {
        return BLIS_SUCCESS;
    }
    private static final int BLIS_FAILURE = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_FAILURE = -2
     * }
     */
    public static int BLIS_FAILURE() {
        return BLIS_FAILURE;
    }
    private static final int BLIS_ERROR_CODE_MIN = (int)-9L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_ERROR_CODE_MIN = -9
     * }
     */
    public static int BLIS_ERROR_CODE_MIN() {
        return BLIS_ERROR_CODE_MIN;
    }
    private static final int BLIS_INVALID_ERROR_CHECKING_LEVEL = (int)-10L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_ERROR_CHECKING_LEVEL = -10
     * }
     */
    public static int BLIS_INVALID_ERROR_CHECKING_LEVEL() {
        return BLIS_INVALID_ERROR_CHECKING_LEVEL;
    }
    private static final int BLIS_UNDEFINED_ERROR_CODE = (int)-11L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_UNDEFINED_ERROR_CODE = -11
     * }
     */
    public static int BLIS_UNDEFINED_ERROR_CODE() {
        return BLIS_UNDEFINED_ERROR_CODE;
    }
    private static final int BLIS_NULL_POINTER = (int)-12L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_NULL_POINTER = -12
     * }
     */
    public static int BLIS_NULL_POINTER() {
        return BLIS_NULL_POINTER;
    }
    private static final int BLIS_NOT_YET_IMPLEMENTED = (int)-13L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_NOT_YET_IMPLEMENTED = -13
     * }
     */
    public static int BLIS_NOT_YET_IMPLEMENTED() {
        return BLIS_NOT_YET_IMPLEMENTED;
    }
    private static final int BLIS_OUT_OF_BOUNDS = (int)-14L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_OUT_OF_BOUNDS = -14
     * }
     */
    public static int BLIS_OUT_OF_BOUNDS() {
        return BLIS_OUT_OF_BOUNDS;
    }
    private static final int BLIS_LOCK_FAILURE = (int)-15L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_LOCK_FAILURE = -15
     * }
     */
    public static int BLIS_LOCK_FAILURE() {
        return BLIS_LOCK_FAILURE;
    }
    private static final int BLIS_INVALID_SIDE = (int)-20L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_SIDE = -20
     * }
     */
    public static int BLIS_INVALID_SIDE() {
        return BLIS_INVALID_SIDE;
    }
    private static final int BLIS_INVALID_UPLO = (int)-21L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_UPLO = -21
     * }
     */
    public static int BLIS_INVALID_UPLO() {
        return BLIS_INVALID_UPLO;
    }
    private static final int BLIS_INVALID_TRANS = (int)-22L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_TRANS = -22
     * }
     */
    public static int BLIS_INVALID_TRANS() {
        return BLIS_INVALID_TRANS;
    }
    private static final int BLIS_INVALID_CONJ = (int)-23L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_CONJ = -23
     * }
     */
    public static int BLIS_INVALID_CONJ() {
        return BLIS_INVALID_CONJ;
    }
    private static final int BLIS_INVALID_DIAG = (int)-24L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_DIAG = -24
     * }
     */
    public static int BLIS_INVALID_DIAG() {
        return BLIS_INVALID_DIAG;
    }
    private static final int BLIS_INVALID_MACHVAL = (int)-25L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_MACHVAL = -25
     * }
     */
    public static int BLIS_INVALID_MACHVAL() {
        return BLIS_INVALID_MACHVAL;
    }
    private static final int BLIS_EXPECTED_NONUNIT_DIAG = (int)-26L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_NONUNIT_DIAG = -26
     * }
     */
    public static int BLIS_EXPECTED_NONUNIT_DIAG() {
        return BLIS_EXPECTED_NONUNIT_DIAG;
    }
    private static final int BLIS_INVALID_DATATYPE = (int)-30L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_DATATYPE = -30
     * }
     */
    public static int BLIS_INVALID_DATATYPE() {
        return BLIS_INVALID_DATATYPE;
    }
    private static final int BLIS_EXPECTED_FLOATING_POINT_DATATYPE = (int)-31L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_FLOATING_POINT_DATATYPE = -31
     * }
     */
    public static int BLIS_EXPECTED_FLOATING_POINT_DATATYPE() {
        return BLIS_EXPECTED_FLOATING_POINT_DATATYPE;
    }
    private static final int BLIS_EXPECTED_NONINTEGER_DATATYPE = (int)-32L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_NONINTEGER_DATATYPE = -32
     * }
     */
    public static int BLIS_EXPECTED_NONINTEGER_DATATYPE() {
        return BLIS_EXPECTED_NONINTEGER_DATATYPE;
    }
    private static final int BLIS_EXPECTED_NONCONSTANT_DATATYPE = (int)-33L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_NONCONSTANT_DATATYPE = -33
     * }
     */
    public static int BLIS_EXPECTED_NONCONSTANT_DATATYPE() {
        return BLIS_EXPECTED_NONCONSTANT_DATATYPE;
    }
    private static final int BLIS_EXPECTED_REAL_DATATYPE = (int)-34L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_REAL_DATATYPE = -34
     * }
     */
    public static int BLIS_EXPECTED_REAL_DATATYPE() {
        return BLIS_EXPECTED_REAL_DATATYPE;
    }
    private static final int BLIS_EXPECTED_INTEGER_DATATYPE = (int)-35L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_INTEGER_DATATYPE = -35
     * }
     */
    public static int BLIS_EXPECTED_INTEGER_DATATYPE() {
        return BLIS_EXPECTED_INTEGER_DATATYPE;
    }
    private static final int BLIS_INCONSISTENT_DATATYPES = (int)-36L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INCONSISTENT_DATATYPES = -36
     * }
     */
    public static int BLIS_INCONSISTENT_DATATYPES() {
        return BLIS_INCONSISTENT_DATATYPES;
    }
    private static final int BLIS_EXPECTED_REAL_PROJ_OF = (int)-37L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_REAL_PROJ_OF = -37
     * }
     */
    public static int BLIS_EXPECTED_REAL_PROJ_OF() {
        return BLIS_EXPECTED_REAL_PROJ_OF;
    }
    private static final int BLIS_EXPECTED_REAL_VALUED_OBJECT = (int)-38L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_REAL_VALUED_OBJECT = -38
     * }
     */
    public static int BLIS_EXPECTED_REAL_VALUED_OBJECT() {
        return BLIS_EXPECTED_REAL_VALUED_OBJECT;
    }
    private static final int BLIS_INCONSISTENT_PRECISIONS = (int)-39L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INCONSISTENT_PRECISIONS = -39
     * }
     */
    public static int BLIS_INCONSISTENT_PRECISIONS() {
        return BLIS_INCONSISTENT_PRECISIONS;
    }
    private static final int BLIS_NONCONFORMAL_DIMENSIONS = (int)-40L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_NONCONFORMAL_DIMENSIONS = -40
     * }
     */
    public static int BLIS_NONCONFORMAL_DIMENSIONS() {
        return BLIS_NONCONFORMAL_DIMENSIONS;
    }
    private static final int BLIS_EXPECTED_SCALAR_OBJECT = (int)-41L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_SCALAR_OBJECT = -41
     * }
     */
    public static int BLIS_EXPECTED_SCALAR_OBJECT() {
        return BLIS_EXPECTED_SCALAR_OBJECT;
    }
    private static final int BLIS_EXPECTED_VECTOR_OBJECT = (int)-42L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_VECTOR_OBJECT = -42
     * }
     */
    public static int BLIS_EXPECTED_VECTOR_OBJECT() {
        return BLIS_EXPECTED_VECTOR_OBJECT;
    }
    private static final int BLIS_UNEQUAL_VECTOR_LENGTHS = (int)-43L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_UNEQUAL_VECTOR_LENGTHS = -43
     * }
     */
    public static int BLIS_UNEQUAL_VECTOR_LENGTHS() {
        return BLIS_UNEQUAL_VECTOR_LENGTHS;
    }
    private static final int BLIS_EXPECTED_SQUARE_OBJECT = (int)-44L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_SQUARE_OBJECT = -44
     * }
     */
    public static int BLIS_EXPECTED_SQUARE_OBJECT() {
        return BLIS_EXPECTED_SQUARE_OBJECT;
    }
    private static final int BLIS_UNEXPECTED_OBJECT_LENGTH = (int)-45L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_UNEXPECTED_OBJECT_LENGTH = -45
     * }
     */
    public static int BLIS_UNEXPECTED_OBJECT_LENGTH() {
        return BLIS_UNEXPECTED_OBJECT_LENGTH;
    }
    private static final int BLIS_UNEXPECTED_OBJECT_WIDTH = (int)-46L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_UNEXPECTED_OBJECT_WIDTH = -46
     * }
     */
    public static int BLIS_UNEXPECTED_OBJECT_WIDTH() {
        return BLIS_UNEXPECTED_OBJECT_WIDTH;
    }
    private static final int BLIS_UNEXPECTED_VECTOR_DIM = (int)-47L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_UNEXPECTED_VECTOR_DIM = -47
     * }
     */
    public static int BLIS_UNEXPECTED_VECTOR_DIM() {
        return BLIS_UNEXPECTED_VECTOR_DIM;
    }
    private static final int BLIS_UNEXPECTED_DIAG_OFFSET = (int)-48L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_UNEXPECTED_DIAG_OFFSET = -48
     * }
     */
    public static int BLIS_UNEXPECTED_DIAG_OFFSET() {
        return BLIS_UNEXPECTED_DIAG_OFFSET;
    }
    private static final int BLIS_NEGATIVE_DIMENSION = (int)-49L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_NEGATIVE_DIMENSION = -49
     * }
     */
    public static int BLIS_NEGATIVE_DIMENSION() {
        return BLIS_NEGATIVE_DIMENSION;
    }
    private static final int BLIS_INVALID_ROW_STRIDE = (int)-50L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_ROW_STRIDE = -50
     * }
     */
    public static int BLIS_INVALID_ROW_STRIDE() {
        return BLIS_INVALID_ROW_STRIDE;
    }
    private static final int BLIS_INVALID_COL_STRIDE = (int)-51L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_COL_STRIDE = -51
     * }
     */
    public static int BLIS_INVALID_COL_STRIDE() {
        return BLIS_INVALID_COL_STRIDE;
    }
    private static final int BLIS_INVALID_DIM_STRIDE_COMBINATION = (int)-52L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_DIM_STRIDE_COMBINATION = -52
     * }
     */
    public static int BLIS_INVALID_DIM_STRIDE_COMBINATION() {
        return BLIS_INVALID_DIM_STRIDE_COMBINATION;
    }
    private static final int BLIS_EXPECTED_GENERAL_OBJECT = (int)-60L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_GENERAL_OBJECT = -60
     * }
     */
    public static int BLIS_EXPECTED_GENERAL_OBJECT() {
        return BLIS_EXPECTED_GENERAL_OBJECT;
    }
    private static final int BLIS_EXPECTED_HERMITIAN_OBJECT = (int)-61L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_HERMITIAN_OBJECT = -61
     * }
     */
    public static int BLIS_EXPECTED_HERMITIAN_OBJECT() {
        return BLIS_EXPECTED_HERMITIAN_OBJECT;
    }
    private static final int BLIS_EXPECTED_SYMMETRIC_OBJECT = (int)-62L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_SYMMETRIC_OBJECT = -62
     * }
     */
    public static int BLIS_EXPECTED_SYMMETRIC_OBJECT() {
        return BLIS_EXPECTED_SYMMETRIC_OBJECT;
    }
    private static final int BLIS_EXPECTED_TRIANGULAR_OBJECT = (int)-63L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_TRIANGULAR_OBJECT = -63
     * }
     */
    public static int BLIS_EXPECTED_TRIANGULAR_OBJECT() {
        return BLIS_EXPECTED_TRIANGULAR_OBJECT;
    }
    private static final int BLIS_EXPECTED_UPPER_OR_LOWER_OBJECT = (int)-70L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_UPPER_OR_LOWER_OBJECT = -70
     * }
     */
    public static int BLIS_EXPECTED_UPPER_OR_LOWER_OBJECT() {
        return BLIS_EXPECTED_UPPER_OR_LOWER_OBJECT;
    }
    private static final int BLIS_INVALID_3x1_SUBPART = (int)-80L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_3x1_SUBPART = -80
     * }
     */
    public static int BLIS_INVALID_3x1_SUBPART() {
        return BLIS_INVALID_3x1_SUBPART;
    }
    private static final int BLIS_INVALID_1x3_SUBPART = (int)-81L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_1x3_SUBPART = -81
     * }
     */
    public static int BLIS_INVALID_1x3_SUBPART() {
        return BLIS_INVALID_1x3_SUBPART;
    }
    private static final int BLIS_INVALID_3x3_SUBPART = (int)-82L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_3x3_SUBPART = -82
     * }
     */
    public static int BLIS_INVALID_3x3_SUBPART() {
        return BLIS_INVALID_3x3_SUBPART;
    }
    private static final int BLIS_UNEXPECTED_NULL_CONTROL_TREE = (int)-90L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_UNEXPECTED_NULL_CONTROL_TREE = -90
     * }
     */
    public static int BLIS_UNEXPECTED_NULL_CONTROL_TREE() {
        return BLIS_UNEXPECTED_NULL_CONTROL_TREE;
    }
    private static final int BLIS_PACK_SCHEMA_NOT_SUPPORTED_FOR_UNPACK = (int)-100L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_PACK_SCHEMA_NOT_SUPPORTED_FOR_UNPACK = -100
     * }
     */
    public static int BLIS_PACK_SCHEMA_NOT_SUPPORTED_FOR_UNPACK() {
        return BLIS_PACK_SCHEMA_NOT_SUPPORTED_FOR_UNPACK;
    }
    private static final int BLIS_PACK_SCHEMA_NOT_SUPPORTED_FOR_PART = (int)-101L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_PACK_SCHEMA_NOT_SUPPORTED_FOR_PART = -101
     * }
     */
    public static int BLIS_PACK_SCHEMA_NOT_SUPPORTED_FOR_PART() {
        return BLIS_PACK_SCHEMA_NOT_SUPPORTED_FOR_PART;
    }
    private static final int BLIS_EXPECTED_NONNULL_OBJECT_BUFFER = (int)-110L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_NONNULL_OBJECT_BUFFER = -110
     * }
     */
    public static int BLIS_EXPECTED_NONNULL_OBJECT_BUFFER() {
        return BLIS_EXPECTED_NONNULL_OBJECT_BUFFER;
    }
    private static final int BLIS_MALLOC_RETURNED_NULL = (int)-120L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_MALLOC_RETURNED_NULL = -120
     * }
     */
    public static int BLIS_MALLOC_RETURNED_NULL() {
        return BLIS_MALLOC_RETURNED_NULL;
    }
    private static final int BLIS_INVALID_PACKBUF = (int)-130L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_PACKBUF = -130
     * }
     */
    public static int BLIS_INVALID_PACKBUF() {
        return BLIS_INVALID_PACKBUF;
    }
    private static final int BLIS_EXHAUSTED_CONTIG_MEMORY_POOL = (int)-131L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXHAUSTED_CONTIG_MEMORY_POOL = -131
     * }
     */
    public static int BLIS_EXHAUSTED_CONTIG_MEMORY_POOL() {
        return BLIS_EXHAUSTED_CONTIG_MEMORY_POOL;
    }
    private static final int BLIS_INSUFFICIENT_STACK_BUF_SIZE = (int)-132L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INSUFFICIENT_STACK_BUF_SIZE = -132
     * }
     */
    public static int BLIS_INSUFFICIENT_STACK_BUF_SIZE() {
        return BLIS_INSUFFICIENT_STACK_BUF_SIZE;
    }
    private static final int BLIS_ALIGNMENT_NOT_POWER_OF_TWO = (int)-133L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_ALIGNMENT_NOT_POWER_OF_TWO = -133
     * }
     */
    public static int BLIS_ALIGNMENT_NOT_POWER_OF_TWO() {
        return BLIS_ALIGNMENT_NOT_POWER_OF_TWO;
    }
    private static final int BLIS_ALIGNMENT_NOT_MULT_OF_PTR_SIZE = (int)-134L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_ALIGNMENT_NOT_MULT_OF_PTR_SIZE = -134
     * }
     */
    public static int BLIS_ALIGNMENT_NOT_MULT_OF_PTR_SIZE() {
        return BLIS_ALIGNMENT_NOT_MULT_OF_PTR_SIZE;
    }
    private static final int BLIS_EXPECTED_OBJECT_ALIAS = (int)-140L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_EXPECTED_OBJECT_ALIAS = -140
     * }
     */
    public static int BLIS_EXPECTED_OBJECT_ALIAS() {
        return BLIS_EXPECTED_OBJECT_ALIAS;
    }
    private static final int BLIS_INVALID_ARCH_ID = (int)-150L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_ARCH_ID = -150
     * }
     */
    public static int BLIS_INVALID_ARCH_ID() {
        return BLIS_INVALID_ARCH_ID;
    }
    private static final int BLIS_UNINITIALIZED_GKS_CNTX = (int)-151L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_UNINITIALIZED_GKS_CNTX = -151
     * }
     */
    public static int BLIS_UNINITIALIZED_GKS_CNTX() {
        return BLIS_UNINITIALIZED_GKS_CNTX;
    }
    private static final int BLIS_INVALID_UKR_ID = (int)-152L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_INVALID_UKR_ID = -152
     * }
     */
    public static int BLIS_INVALID_UKR_ID() {
        return BLIS_INVALID_UKR_ID;
    }
    private static final int BLIS_MC_DEF_NONMULTIPLE_OF_MR = (int)-160L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_MC_DEF_NONMULTIPLE_OF_MR = -160
     * }
     */
    public static int BLIS_MC_DEF_NONMULTIPLE_OF_MR() {
        return BLIS_MC_DEF_NONMULTIPLE_OF_MR;
    }
    private static final int BLIS_MC_MAX_NONMULTIPLE_OF_MR = (int)-161L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_MC_MAX_NONMULTIPLE_OF_MR = -161
     * }
     */
    public static int BLIS_MC_MAX_NONMULTIPLE_OF_MR() {
        return BLIS_MC_MAX_NONMULTIPLE_OF_MR;
    }
    private static final int BLIS_NC_DEF_NONMULTIPLE_OF_NR = (int)-162L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_NC_DEF_NONMULTIPLE_OF_NR = -162
     * }
     */
    public static int BLIS_NC_DEF_NONMULTIPLE_OF_NR() {
        return BLIS_NC_DEF_NONMULTIPLE_OF_NR;
    }
    private static final int BLIS_NC_MAX_NONMULTIPLE_OF_NR = (int)-163L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_NC_MAX_NONMULTIPLE_OF_NR = -163
     * }
     */
    public static int BLIS_NC_MAX_NONMULTIPLE_OF_NR() {
        return BLIS_NC_MAX_NONMULTIPLE_OF_NR;
    }
    private static final int BLIS_KC_DEF_NONMULTIPLE_OF_KR = (int)-164L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_KC_DEF_NONMULTIPLE_OF_KR = -164
     * }
     */
    public static int BLIS_KC_DEF_NONMULTIPLE_OF_KR() {
        return BLIS_KC_DEF_NONMULTIPLE_OF_KR;
    }
    private static final int BLIS_KC_MAX_NONMULTIPLE_OF_KR = (int)-165L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_KC_MAX_NONMULTIPLE_OF_KR = -165
     * }
     */
    public static int BLIS_KC_MAX_NONMULTIPLE_OF_KR() {
        return BLIS_KC_MAX_NONMULTIPLE_OF_KR;
    }
    private static final int BLIS_MR_NOT_EVEN_FOR_REAL_TYPE = (int)-166L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_MR_NOT_EVEN_FOR_REAL_TYPE = -166
     * }
     */
    public static int BLIS_MR_NOT_EVEN_FOR_REAL_TYPE() {
        return BLIS_MR_NOT_EVEN_FOR_REAL_TYPE;
    }
    private static final int BLIS_PACKMR_NOT_EVEN_FOR_REAL_TYPE = (int)-167L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_PACKMR_NOT_EVEN_FOR_REAL_TYPE = -167
     * }
     */
    public static int BLIS_PACKMR_NOT_EVEN_FOR_REAL_TYPE() {
        return BLIS_PACKMR_NOT_EVEN_FOR_REAL_TYPE;
    }
    private static final int BLIS_NR_NOT_EVEN_FOR_REAL_TYPE = (int)-168L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_NR_NOT_EVEN_FOR_REAL_TYPE = -168
     * }
     */
    public static int BLIS_NR_NOT_EVEN_FOR_REAL_TYPE() {
        return BLIS_NR_NOT_EVEN_FOR_REAL_TYPE;
    }
    private static final int BLIS_PACKNR_NOT_EVEN_FOR_REAL_TYPE = (int)-169L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_PACKNR_NOT_EVEN_FOR_REAL_TYPE = -169
     * }
     */
    public static int BLIS_PACKNR_NOT_EVEN_FOR_REAL_TYPE() {
        return BLIS_PACKNR_NOT_EVEN_FOR_REAL_TYPE;
    }
    private static final int BLIS_ERROR_CODE_MAX = (int)-170L;
    /**
     * {@snippet lang=c :
     * enum err_t.BLIS_ERROR_CODE_MAX = -170
     * }
     */
    public static int BLIS_ERROR_CODE_MAX() {
        return BLIS_ERROR_CODE_MAX;
    }

    private static class BLIS_TWO$constants {
        public static final GroupLayout LAYOUT = obj_s.layout();
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("BLIS_TWO").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_TWO
     * }
     */
    public static GroupLayout BLIS_TWO$layout() {
        return BLIS_TWO$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_TWO
     * }
     */
    public static MemorySegment BLIS_TWO() {
        return BLIS_TWO$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_TWO
     * }
     */
    public static void BLIS_TWO(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, BLIS_TWO$constants.SEGMENT, 0L, BLIS_TWO$constants.LAYOUT.byteSize());
    }

    private static class BLIS_ONE$constants {
        public static final GroupLayout LAYOUT = obj_s.layout();
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("BLIS_ONE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_ONE
     * }
     */
    public static GroupLayout BLIS_ONE$layout() {
        return BLIS_ONE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_ONE
     * }
     */
    public static MemorySegment BLIS_ONE() {
        return BLIS_ONE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_ONE
     * }
     */
    public static void BLIS_ONE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, BLIS_ONE$constants.SEGMENT, 0L, BLIS_ONE$constants.LAYOUT.byteSize());
    }

    private static class BLIS_ZERO$constants {
        public static final GroupLayout LAYOUT = obj_s.layout();
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("BLIS_ZERO").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_ZERO
     * }
     */
    public static GroupLayout BLIS_ZERO$layout() {
        return BLIS_ZERO$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_ZERO
     * }
     */
    public static MemorySegment BLIS_ZERO() {
        return BLIS_ZERO$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_ZERO
     * }
     */
    public static void BLIS_ZERO(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, BLIS_ZERO$constants.SEGMENT, 0L, BLIS_ZERO$constants.LAYOUT.byteSize());
    }

    private static class BLIS_MINUS_ONE$constants {
        public static final GroupLayout LAYOUT = obj_s.layout();
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("BLIS_MINUS_ONE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_MINUS_ONE
     * }
     */
    public static GroupLayout BLIS_MINUS_ONE$layout() {
        return BLIS_MINUS_ONE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_MINUS_ONE
     * }
     */
    public static MemorySegment BLIS_MINUS_ONE() {
        return BLIS_MINUS_ONE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_MINUS_ONE
     * }
     */
    public static void BLIS_MINUS_ONE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, BLIS_MINUS_ONE$constants.SEGMENT, 0L, BLIS_MINUS_ONE$constants.LAYOUT.byteSize());
    }

    private static class BLIS_MINUS_TWO$constants {
        public static final GroupLayout LAYOUT = obj_s.layout();
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("BLIS_MINUS_TWO").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_MINUS_TWO
     * }
     */
    public static GroupLayout BLIS_MINUS_TWO$layout() {
        return BLIS_MINUS_TWO$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_MINUS_TWO
     * }
     */
    public static MemorySegment BLIS_MINUS_TWO() {
        return BLIS_MINUS_TWO$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_MINUS_TWO
     * }
     */
    public static void BLIS_MINUS_TWO(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, BLIS_MINUS_TWO$constants.SEGMENT, 0L, BLIS_MINUS_TWO$constants.LAYOUT.byteSize());
    }

    private static class BLIS_ONE_I$constants {
        public static final GroupLayout LAYOUT = obj_s.layout();
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("BLIS_ONE_I").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_ONE_I
     * }
     */
    public static GroupLayout BLIS_ONE_I$layout() {
        return BLIS_ONE_I$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_ONE_I
     * }
     */
    public static MemorySegment BLIS_ONE_I() {
        return BLIS_ONE_I$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_ONE_I
     * }
     */
    public static void BLIS_ONE_I(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, BLIS_ONE_I$constants.SEGMENT, 0L, BLIS_ONE_I$constants.LAYOUT.byteSize());
    }

    private static class BLIS_MINUS_ONE_I$constants {
        public static final GroupLayout LAYOUT = obj_s.layout();
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("BLIS_MINUS_ONE_I").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_MINUS_ONE_I
     * }
     */
    public static GroupLayout BLIS_MINUS_ONE_I$layout() {
        return BLIS_MINUS_ONE_I$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_MINUS_ONE_I
     * }
     */
    public static MemorySegment BLIS_MINUS_ONE_I() {
        return BLIS_MINUS_ONE_I$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_MINUS_ONE_I
     * }
     */
    public static void BLIS_MINUS_ONE_I(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, BLIS_MINUS_ONE_I$constants.SEGMENT, 0L, BLIS_MINUS_ONE_I$constants.LAYOUT.byteSize());
    }

    private static class BLIS_NAN$constants {
        public static final GroupLayout LAYOUT = obj_s.layout();
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("BLIS_NAN").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_NAN
     * }
     */
    public static GroupLayout BLIS_NAN$layout() {
        return BLIS_NAN$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_NAN
     * }
     */
    public static MemorySegment BLIS_NAN() {
        return BLIS_NAN$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const obj_t BLIS_NAN
     * }
     */
    public static void BLIS_NAN(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, BLIS_NAN$constants.SEGMENT, 0L, BLIS_NAN$constants.LAYOUT.byteSize());
    }

    private static class BLIS_SINGLE_COMM$constants {
        public static final GroupLayout LAYOUT = thrcomm_s.layout();
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("BLIS_SINGLE_COMM").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern thrcomm_t BLIS_SINGLE_COMM
     * }
     */
    public static GroupLayout BLIS_SINGLE_COMM$layout() {
        return BLIS_SINGLE_COMM$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern thrcomm_t BLIS_SINGLE_COMM
     * }
     */
    public static MemorySegment BLIS_SINGLE_COMM() {
        return BLIS_SINGLE_COMM$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern thrcomm_t BLIS_SINGLE_COMM
     * }
     */
    public static void BLIS_SINGLE_COMM(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, BLIS_SINGLE_COMM$constants.SEGMENT, 0L, BLIS_SINGLE_COMM$constants.LAYOUT.byteSize());
    }

    private static class bli_obj_create_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create_check(num_t dt, dim_t m, dim_t n, inc_t rs, inc_t cs, const obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_create_check$descriptor() {
        return bli_obj_create_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create_check(num_t dt, dim_t m, dim_t n, inc_t rs, inc_t cs, const obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_create_check$handle() {
        return bli_obj_create_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create_check(num_t dt, dim_t m, dim_t n, inc_t rs, inc_t cs, const obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_create_check$address() {
        return bli_obj_create_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create_check(num_t dt, dim_t m, dim_t n, inc_t rs, inc_t cs, const obj_t *obj)
     * }
     */
    public static void bli_obj_create_check(int dt, long m, long n, long rs, long cs, MemorySegment obj) {
        var mh$ = bli_obj_create_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create_check", dt, m, n, rs, cs, obj);
            }
            mh$.invokeExact(dt, m, n, rs, cs, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_create_without_buffer_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create_without_buffer_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create_without_buffer_check(num_t dt, dim_t m, dim_t n, const obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_create_without_buffer_check$descriptor() {
        return bli_obj_create_without_buffer_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create_without_buffer_check(num_t dt, dim_t m, dim_t n, const obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_create_without_buffer_check$handle() {
        return bli_obj_create_without_buffer_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create_without_buffer_check(num_t dt, dim_t m, dim_t n, const obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_create_without_buffer_check$address() {
        return bli_obj_create_without_buffer_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create_without_buffer_check(num_t dt, dim_t m, dim_t n, const obj_t *obj)
     * }
     */
    public static void bli_obj_create_without_buffer_check(int dt, long m, long n, MemorySegment obj) {
        var mh$ = bli_obj_create_without_buffer_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create_without_buffer_check", dt, m, n, obj);
            }
            mh$.invokeExact(dt, m, n, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_alloc_buffer_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_alloc_buffer_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_alloc_buffer_check(inc_t rs, inc_t cs, inc_t is, const obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_alloc_buffer_check$descriptor() {
        return bli_obj_alloc_buffer_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_alloc_buffer_check(inc_t rs, inc_t cs, inc_t is, const obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_alloc_buffer_check$handle() {
        return bli_obj_alloc_buffer_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_alloc_buffer_check(inc_t rs, inc_t cs, inc_t is, const obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_alloc_buffer_check$address() {
        return bli_obj_alloc_buffer_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_alloc_buffer_check(inc_t rs, inc_t cs, inc_t is, const obj_t *obj)
     * }
     */
    public static void bli_obj_alloc_buffer_check(long rs, long cs, long is, MemorySegment obj) {
        var mh$ = bli_obj_alloc_buffer_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_alloc_buffer_check", rs, cs, is, obj);
            }
            mh$.invokeExact(rs, cs, is, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_attach_buffer_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_attach_buffer_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_attach_buffer_check(const void *p, inc_t rs, inc_t cs, inc_t is, const obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_attach_buffer_check$descriptor() {
        return bli_obj_attach_buffer_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_attach_buffer_check(const void *p, inc_t rs, inc_t cs, inc_t is, const obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_attach_buffer_check$handle() {
        return bli_obj_attach_buffer_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_attach_buffer_check(const void *p, inc_t rs, inc_t cs, inc_t is, const obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_attach_buffer_check$address() {
        return bli_obj_attach_buffer_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_attach_buffer_check(const void *p, inc_t rs, inc_t cs, inc_t is, const obj_t *obj)
     * }
     */
    public static void bli_obj_attach_buffer_check(MemorySegment p, long rs, long cs, long is, MemorySegment obj) {
        var mh$ = bli_obj_attach_buffer_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_attach_buffer_check", p, rs, cs, is, obj);
            }
            mh$.invokeExact(p, rs, cs, is, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_create_scalar_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create_scalar_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create_scalar_check(num_t dt, const obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_create_scalar_check$descriptor() {
        return bli_obj_create_scalar_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create_scalar_check(num_t dt, const obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_create_scalar_check$handle() {
        return bli_obj_create_scalar_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create_scalar_check(num_t dt, const obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_create_scalar_check$address() {
        return bli_obj_create_scalar_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create_scalar_check(num_t dt, const obj_t *obj)
     * }
     */
    public static void bli_obj_create_scalar_check(int dt, MemorySegment obj) {
        var mh$ = bli_obj_create_scalar_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create_scalar_check", dt, obj);
            }
            mh$.invokeExact(dt, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_free_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_free_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_free_check(const obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_free_check$descriptor() {
        return bli_obj_free_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_free_check(const obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_free_check$handle() {
        return bli_obj_free_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_free_check(const obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_free_check$address() {
        return bli_obj_free_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_free_check(const obj_t *obj)
     * }
     */
    public static void bli_obj_free_check(MemorySegment obj) {
        var mh$ = bli_obj_free_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_free_check", obj);
            }
            mh$.invokeExact(obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_create_const_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_DOUBLE,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create_const_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create_const_check(double value, const obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_create_const_check$descriptor() {
        return bli_obj_create_const_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create_const_check(double value, const obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_create_const_check$handle() {
        return bli_obj_create_const_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create_const_check(double value, const obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_create_const_check$address() {
        return bli_obj_create_const_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create_const_check(double value, const obj_t *obj)
     * }
     */
    public static void bli_obj_create_const_check(double value, MemorySegment obj) {
        var mh$ = bli_obj_create_const_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create_const_check", value, obj);
            }
            mh$.invokeExact(value, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_create_const_copy_of_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create_const_copy_of_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create_const_copy_of_check(const obj_t *a, const obj_t *b)
     * }
     */
    public static FunctionDescriptor bli_obj_create_const_copy_of_check$descriptor() {
        return bli_obj_create_const_copy_of_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create_const_copy_of_check(const obj_t *a, const obj_t *b)
     * }
     */
    public static MethodHandle bli_obj_create_const_copy_of_check$handle() {
        return bli_obj_create_const_copy_of_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create_const_copy_of_check(const obj_t *a, const obj_t *b)
     * }
     */
    public static MemorySegment bli_obj_create_const_copy_of_check$address() {
        return bli_obj_create_const_copy_of_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create_const_copy_of_check(const obj_t *a, const obj_t *b)
     * }
     */
    public static void bli_obj_create_const_copy_of_check(MemorySegment a, MemorySegment b) {
        var mh$ = bli_obj_create_const_copy_of_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create_const_copy_of_check", a, b);
            }
            mh$.invokeExact(a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_print_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_print_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_print_check(const char *label, const obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_print_check$descriptor() {
        return bli_obj_print_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_print_check(const char *label, const obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_print_check$handle() {
        return bli_obj_print_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_print_check(const char *label, const obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_print_check$address() {
        return bli_obj_print_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_print_check(const char *label, const obj_t *obj)
     * }
     */
    public static void bli_obj_print_check(MemorySegment label, MemorySegment obj) {
        var mh$ = bli_obj_print_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_print_check", label, obj);
            }
            mh$.invokeExact(label, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create(num_t dt, dim_t m, dim_t n, inc_t rs, inc_t cs, obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_create$descriptor() {
        return bli_obj_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create(num_t dt, dim_t m, dim_t n, inc_t rs, inc_t cs, obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_create$handle() {
        return bli_obj_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create(num_t dt, dim_t m, dim_t n, inc_t rs, inc_t cs, obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_create$address() {
        return bli_obj_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create(num_t dt, dim_t m, dim_t n, inc_t rs, inc_t cs, obj_t *obj)
     * }
     */
    public static void bli_obj_create(int dt, long m, long n, long rs, long cs, MemorySegment obj) {
        var mh$ = bli_obj_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create", dt, m, n, rs, cs, obj);
            }
            mh$.invokeExact(dt, m, n, rs, cs, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_create_with_attached_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create_with_attached_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create_with_attached_buffer(num_t dt, dim_t m, dim_t n, void *p, inc_t rs, inc_t cs, obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_create_with_attached_buffer$descriptor() {
        return bli_obj_create_with_attached_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create_with_attached_buffer(num_t dt, dim_t m, dim_t n, void *p, inc_t rs, inc_t cs, obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_create_with_attached_buffer$handle() {
        return bli_obj_create_with_attached_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create_with_attached_buffer(num_t dt, dim_t m, dim_t n, void *p, inc_t rs, inc_t cs, obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_create_with_attached_buffer$address() {
        return bli_obj_create_with_attached_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create_with_attached_buffer(num_t dt, dim_t m, dim_t n, void *p, inc_t rs, inc_t cs, obj_t *obj)
     * }
     */
    public static void bli_obj_create_with_attached_buffer(int dt, long m, long n, MemorySegment p, long rs, long cs, MemorySegment obj) {
        var mh$ = bli_obj_create_with_attached_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create_with_attached_buffer", dt, m, n, p, rs, cs, obj);
            }
            mh$.invokeExact(dt, m, n, p, rs, cs, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_create_without_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create_without_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create_without_buffer(num_t dt, dim_t m, dim_t n, obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_create_without_buffer$descriptor() {
        return bli_obj_create_without_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create_without_buffer(num_t dt, dim_t m, dim_t n, obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_create_without_buffer$handle() {
        return bli_obj_create_without_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create_without_buffer(num_t dt, dim_t m, dim_t n, obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_create_without_buffer$address() {
        return bli_obj_create_without_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create_without_buffer(num_t dt, dim_t m, dim_t n, obj_t *obj)
     * }
     */
    public static void bli_obj_create_without_buffer(int dt, long m, long n, MemorySegment obj) {
        var mh$ = bli_obj_create_without_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create_without_buffer", dt, m, n, obj);
            }
            mh$.invokeExact(dt, m, n, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_alloc_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_alloc_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_alloc_buffer(inc_t rs, inc_t cs, inc_t is, obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_alloc_buffer$descriptor() {
        return bli_obj_alloc_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_alloc_buffer(inc_t rs, inc_t cs, inc_t is, obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_alloc_buffer$handle() {
        return bli_obj_alloc_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_alloc_buffer(inc_t rs, inc_t cs, inc_t is, obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_alloc_buffer$address() {
        return bli_obj_alloc_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_alloc_buffer(inc_t rs, inc_t cs, inc_t is, obj_t *obj)
     * }
     */
    public static void bli_obj_alloc_buffer(long rs, long cs, long is, MemorySegment obj) {
        var mh$ = bli_obj_alloc_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_alloc_buffer", rs, cs, is, obj);
            }
            mh$.invokeExact(rs, cs, is, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_attach_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_attach_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_attach_buffer(void *p, inc_t rs, inc_t cs, inc_t is, obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_attach_buffer$descriptor() {
        return bli_obj_attach_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_attach_buffer(void *p, inc_t rs, inc_t cs, inc_t is, obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_attach_buffer$handle() {
        return bli_obj_attach_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_attach_buffer(void *p, inc_t rs, inc_t cs, inc_t is, obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_attach_buffer$address() {
        return bli_obj_attach_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_attach_buffer(void *p, inc_t rs, inc_t cs, inc_t is, obj_t *obj)
     * }
     */
    public static void bli_obj_attach_buffer(MemorySegment p, long rs, long cs, long is, MemorySegment obj) {
        var mh$ = bli_obj_attach_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_attach_buffer", p, rs, cs, is, obj);
            }
            mh$.invokeExact(p, rs, cs, is, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_create_1x1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create_1x1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create_1x1(num_t dt, obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_create_1x1$descriptor() {
        return bli_obj_create_1x1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create_1x1(num_t dt, obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_create_1x1$handle() {
        return bli_obj_create_1x1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create_1x1(num_t dt, obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_create_1x1$address() {
        return bli_obj_create_1x1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create_1x1(num_t dt, obj_t *obj)
     * }
     */
    public static void bli_obj_create_1x1(int dt, MemorySegment obj) {
        var mh$ = bli_obj_create_1x1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create_1x1", dt, obj);
            }
            mh$.invokeExact(dt, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_create_1x1_with_attached_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create_1x1_with_attached_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create_1x1_with_attached_buffer(num_t dt, void *p, obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_create_1x1_with_attached_buffer$descriptor() {
        return bli_obj_create_1x1_with_attached_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create_1x1_with_attached_buffer(num_t dt, void *p, obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_create_1x1_with_attached_buffer$handle() {
        return bli_obj_create_1x1_with_attached_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create_1x1_with_attached_buffer(num_t dt, void *p, obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_create_1x1_with_attached_buffer$address() {
        return bli_obj_create_1x1_with_attached_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create_1x1_with_attached_buffer(num_t dt, void *p, obj_t *obj)
     * }
     */
    public static void bli_obj_create_1x1_with_attached_buffer(int dt, MemorySegment p, MemorySegment obj) {
        var mh$ = bli_obj_create_1x1_with_attached_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create_1x1_with_attached_buffer", dt, p, obj);
            }
            mh$.invokeExact(dt, p, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_create_conf_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_create_conf_to");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_create_conf_to(const obj_t *s, obj_t *d)
     * }
     */
    public static FunctionDescriptor bli_obj_create_conf_to$descriptor() {
        return bli_obj_create_conf_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_create_conf_to(const obj_t *s, obj_t *d)
     * }
     */
    public static MethodHandle bli_obj_create_conf_to$handle() {
        return bli_obj_create_conf_to.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_create_conf_to(const obj_t *s, obj_t *d)
     * }
     */
    public static MemorySegment bli_obj_create_conf_to$address() {
        return bli_obj_create_conf_to.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_create_conf_to(const obj_t *s, obj_t *d)
     * }
     */
    public static void bli_obj_create_conf_to(MemorySegment s, MemorySegment d) {
        var mh$ = bli_obj_create_conf_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_create_conf_to", s, d);
            }
            mh$.invokeExact(s, d);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_free(obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_free$descriptor() {
        return bli_obj_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_free(obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_free$handle() {
        return bli_obj_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_free(obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_free$address() {
        return bli_obj_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_free(obj_t *obj)
     * }
     */
    public static void bli_obj_free(MemorySegment obj) {
        var mh$ = bli_obj_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_free", obj);
            }
            mh$.invokeExact(obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_print(const char *label, const obj_t *obj)
     * }
     */
    public static FunctionDescriptor bli_obj_print$descriptor() {
        return bli_obj_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_print(const char *label, const obj_t *obj)
     * }
     */
    public static MethodHandle bli_obj_print$handle() {
        return bli_obj_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_print(const char *label, const obj_t *obj)
     * }
     */
    public static MemorySegment bli_obj_print$address() {
        return bli_obj_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_print(const char *label, const obj_t *obj)
     * }
     */
    public static void bli_obj_print(MemorySegment label, MemorySegment obj) {
        var mh$ = bli_obj_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_print", label, obj);
            }
            mh$.invokeExact(label, obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_scalar_init_detached {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_scalar_init_detached");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_scalar_init_detached(num_t dt, obj_t *beta)
     * }
     */
    public static FunctionDescriptor bli_obj_scalar_init_detached$descriptor() {
        return bli_obj_scalar_init_detached.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_scalar_init_detached(num_t dt, obj_t *beta)
     * }
     */
    public static MethodHandle bli_obj_scalar_init_detached$handle() {
        return bli_obj_scalar_init_detached.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_scalar_init_detached(num_t dt, obj_t *beta)
     * }
     */
    public static MemorySegment bli_obj_scalar_init_detached$address() {
        return bli_obj_scalar_init_detached.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_scalar_init_detached(num_t dt, obj_t *beta)
     * }
     */
    public static void bli_obj_scalar_init_detached(int dt, MemorySegment beta) {
        var mh$ = bli_obj_scalar_init_detached.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_scalar_init_detached", dt, beta);
            }
            mh$.invokeExact(dt, beta);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_scalar_init_detached_copy_of {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_INT,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_scalar_init_detached_copy_of");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_scalar_init_detached_copy_of(num_t dt, conj_t conj, const obj_t *alpha, obj_t *beta)
     * }
     */
    public static FunctionDescriptor bli_obj_scalar_init_detached_copy_of$descriptor() {
        return bli_obj_scalar_init_detached_copy_of.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_scalar_init_detached_copy_of(num_t dt, conj_t conj, const obj_t *alpha, obj_t *beta)
     * }
     */
    public static MethodHandle bli_obj_scalar_init_detached_copy_of$handle() {
        return bli_obj_scalar_init_detached_copy_of.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_scalar_init_detached_copy_of(num_t dt, conj_t conj, const obj_t *alpha, obj_t *beta)
     * }
     */
    public static MemorySegment bli_obj_scalar_init_detached_copy_of$address() {
        return bli_obj_scalar_init_detached_copy_of.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_scalar_init_detached_copy_of(num_t dt, conj_t conj, const obj_t *alpha, obj_t *beta)
     * }
     */
    public static void bli_obj_scalar_init_detached_copy_of(int dt, int conj, MemorySegment alpha, MemorySegment beta) {
        var mh$ = bli_obj_scalar_init_detached_copy_of.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_scalar_init_detached_copy_of", dt, conj, alpha, beta);
            }
            mh$.invokeExact(dt, conj, alpha, beta);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_scalar_detach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_scalar_detach");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_scalar_detach(const obj_t *a, obj_t *alpha)
     * }
     */
    public static FunctionDescriptor bli_obj_scalar_detach$descriptor() {
        return bli_obj_scalar_detach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_scalar_detach(const obj_t *a, obj_t *alpha)
     * }
     */
    public static MethodHandle bli_obj_scalar_detach$handle() {
        return bli_obj_scalar_detach.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_scalar_detach(const obj_t *a, obj_t *alpha)
     * }
     */
    public static MemorySegment bli_obj_scalar_detach$address() {
        return bli_obj_scalar_detach.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_scalar_detach(const obj_t *a, obj_t *alpha)
     * }
     */
    public static void bli_obj_scalar_detach(MemorySegment a, MemorySegment alpha) {
        var mh$ = bli_obj_scalar_detach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_scalar_detach", a, alpha);
            }
            mh$.invokeExact(a, alpha);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_scalar_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_scalar_attach");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_scalar_attach(conj_t conj, const obj_t *alpha, obj_t *a)
     * }
     */
    public static FunctionDescriptor bli_obj_scalar_attach$descriptor() {
        return bli_obj_scalar_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_scalar_attach(conj_t conj, const obj_t *alpha, obj_t *a)
     * }
     */
    public static MethodHandle bli_obj_scalar_attach$handle() {
        return bli_obj_scalar_attach.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_scalar_attach(conj_t conj, const obj_t *alpha, obj_t *a)
     * }
     */
    public static MemorySegment bli_obj_scalar_attach$address() {
        return bli_obj_scalar_attach.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_scalar_attach(conj_t conj, const obj_t *alpha, obj_t *a)
     * }
     */
    public static void bli_obj_scalar_attach(int conj, MemorySegment alpha, MemorySegment a) {
        var mh$ = bli_obj_scalar_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_scalar_attach", conj, alpha, a);
            }
            mh$.invokeExact(conj, alpha, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_scalar_cast_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_INT,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_scalar_cast_to");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_scalar_cast_to(num_t dt, obj_t *a)
     * }
     */
    public static FunctionDescriptor bli_obj_scalar_cast_to$descriptor() {
        return bli_obj_scalar_cast_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_scalar_cast_to(num_t dt, obj_t *a)
     * }
     */
    public static MethodHandle bli_obj_scalar_cast_to$handle() {
        return bli_obj_scalar_cast_to.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_scalar_cast_to(num_t dt, obj_t *a)
     * }
     */
    public static MemorySegment bli_obj_scalar_cast_to$address() {
        return bli_obj_scalar_cast_to.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_scalar_cast_to(num_t dt, obj_t *a)
     * }
     */
    public static void bli_obj_scalar_cast_to(int dt, MemorySegment a) {
        var mh$ = bli_obj_scalar_cast_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_scalar_cast_to", dt, a);
            }
            mh$.invokeExact(dt, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_scalar_apply_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_scalar_apply_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_scalar_apply_scalar(const obj_t *alpha, obj_t *a)
     * }
     */
    public static FunctionDescriptor bli_obj_scalar_apply_scalar$descriptor() {
        return bli_obj_scalar_apply_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_scalar_apply_scalar(const obj_t *alpha, obj_t *a)
     * }
     */
    public static MethodHandle bli_obj_scalar_apply_scalar$handle() {
        return bli_obj_scalar_apply_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_scalar_apply_scalar(const obj_t *alpha, obj_t *a)
     * }
     */
    public static MemorySegment bli_obj_scalar_apply_scalar$address() {
        return bli_obj_scalar_apply_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_scalar_apply_scalar(const obj_t *alpha, obj_t *a)
     * }
     */
    public static void bli_obj_scalar_apply_scalar(MemorySegment alpha, MemorySegment a) {
        var mh$ = bli_obj_scalar_apply_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_scalar_apply_scalar", alpha, a);
            }
            mh$.invokeExact(alpha, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_scalar_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_scalar_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_obj_scalar_reset(obj_t *a)
     * }
     */
    public static FunctionDescriptor bli_obj_scalar_reset$descriptor() {
        return bli_obj_scalar_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_obj_scalar_reset(obj_t *a)
     * }
     */
    public static MethodHandle bli_obj_scalar_reset$handle() {
        return bli_obj_scalar_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_obj_scalar_reset(obj_t *a)
     * }
     */
    public static MemorySegment bli_obj_scalar_reset$address() {
        return bli_obj_scalar_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_obj_scalar_reset(obj_t *a)
     * }
     */
    public static void bli_obj_scalar_reset(MemorySegment a) {
        var mh$ = bli_obj_scalar_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_scalar_reset", a);
            }
            mh$.invokeExact(a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_scalar_has_nonzero_imag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            blis_h.C_BOOL,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_scalar_has_nonzero_imag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool bli_obj_scalar_has_nonzero_imag(obj_t *a)
     * }
     */
    public static FunctionDescriptor bli_obj_scalar_has_nonzero_imag$descriptor() {
        return bli_obj_scalar_has_nonzero_imag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool bli_obj_scalar_has_nonzero_imag(obj_t *a)
     * }
     */
    public static MethodHandle bli_obj_scalar_has_nonzero_imag$handle() {
        return bli_obj_scalar_has_nonzero_imag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool bli_obj_scalar_has_nonzero_imag(obj_t *a)
     * }
     */
    public static MemorySegment bli_obj_scalar_has_nonzero_imag$address() {
        return bli_obj_scalar_has_nonzero_imag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool bli_obj_scalar_has_nonzero_imag(obj_t *a)
     * }
     */
    public static boolean bli_obj_scalar_has_nonzero_imag(MemorySegment a) {
        var mh$ = bli_obj_scalar_has_nonzero_imag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_scalar_has_nonzero_imag", a);
            }
            return (boolean)mh$.invokeExact(a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_scalar_equals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            blis_h.C_BOOL,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_scalar_equals");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool bli_obj_scalar_equals(const obj_t *a, const obj_t *beta)
     * }
     */
    public static FunctionDescriptor bli_obj_scalar_equals$descriptor() {
        return bli_obj_scalar_equals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool bli_obj_scalar_equals(const obj_t *a, const obj_t *beta)
     * }
     */
    public static MethodHandle bli_obj_scalar_equals$handle() {
        return bli_obj_scalar_equals.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool bli_obj_scalar_equals(const obj_t *a, const obj_t *beta)
     * }
     */
    public static MemorySegment bli_obj_scalar_equals$address() {
        return bli_obj_scalar_equals.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool bli_obj_scalar_equals(const obj_t *a, const obj_t *beta)
     * }
     */
    public static boolean bli_obj_scalar_equals(MemorySegment a, MemorySegment beta) {
        var mh$ = bli_obj_scalar_equals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_scalar_equals", a, beta);
            }
            return (boolean)mh$.invokeExact(a, beta);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_equals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            blis_h.C_BOOL,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_equals");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool bli_obj_equals(const obj_t *a, const obj_t *b)
     * }
     */
    public static FunctionDescriptor bli_obj_equals$descriptor() {
        return bli_obj_equals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool bli_obj_equals(const obj_t *a, const obj_t *b)
     * }
     */
    public static MethodHandle bli_obj_equals$handle() {
        return bli_obj_equals.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool bli_obj_equals(const obj_t *a, const obj_t *b)
     * }
     */
    public static MemorySegment bli_obj_equals$address() {
        return bli_obj_equals.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool bli_obj_equals(const obj_t *a, const obj_t *b)
     * }
     */
    public static boolean bli_obj_equals(MemorySegment a, MemorySegment b) {
        var mh$ = bli_obj_equals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_equals", a, b);
            }
            return (boolean)mh$.invokeExact(a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_imag_equals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            blis_h.C_BOOL,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_imag_equals");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool bli_obj_imag_equals(const obj_t *a, const obj_t *b)
     * }
     */
    public static FunctionDescriptor bli_obj_imag_equals$descriptor() {
        return bli_obj_imag_equals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool bli_obj_imag_equals(const obj_t *a, const obj_t *b)
     * }
     */
    public static MethodHandle bli_obj_imag_equals$handle() {
        return bli_obj_imag_equals.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool bli_obj_imag_equals(const obj_t *a, const obj_t *b)
     * }
     */
    public static MemorySegment bli_obj_imag_equals$address() {
        return bli_obj_imag_equals.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool bli_obj_imag_equals(const obj_t *a, const obj_t *b)
     * }
     */
    public static boolean bli_obj_imag_equals(MemorySegment a, MemorySegment b) {
        var mh$ = bli_obj_imag_equals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_imag_equals", a, b);
            }
            return (boolean)mh$.invokeExact(a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_obj_imag_is_zero {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            blis_h.C_BOOL,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_obj_imag_is_zero");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool bli_obj_imag_is_zero(const obj_t *a)
     * }
     */
    public static FunctionDescriptor bli_obj_imag_is_zero$descriptor() {
        return bli_obj_imag_is_zero.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool bli_obj_imag_is_zero(const obj_t *a)
     * }
     */
    public static MethodHandle bli_obj_imag_is_zero$handle() {
        return bli_obj_imag_is_zero.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool bli_obj_imag_is_zero(const obj_t *a)
     * }
     */
    public static MemorySegment bli_obj_imag_is_zero$address() {
        return bli_obj_imag_is_zero.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool bli_obj_imag_is_zero(const obj_t *a)
     * }
     */
    public static boolean bli_obj_imag_is_zero(MemorySegment a) {
        var mh$ = bli_obj_imag_is_zero.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_obj_imag_is_zero", a);
            }
            return (boolean)mh$.invokeExact(a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VENDOR_ARM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:169:1).VENDOR_ARM = 0
     * }
     */
    public static int VENDOR_ARM() {
        return VENDOR_ARM;
    }
    private static final int VENDOR_IBM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:169:1).VENDOR_IBM = 1
     * }
     */
    public static int VENDOR_IBM() {
        return VENDOR_IBM;
    }
    private static final int VENDOR_UNKNOWN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:169:1).VENDOR_UNKNOWN = 2
     * }
     */
    public static int VENDOR_UNKNOWN() {
        return VENDOR_UNKNOWN;
    }
    private static final int MODEL_ARMV7 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:175:1).MODEL_ARMV7 = 0
     * }
     */
    public static int MODEL_ARMV7() {
        return MODEL_ARMV7;
    }
    private static final int MODEL_ARMV8 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:175:1).MODEL_ARMV8 = 1
     * }
     */
    public static int MODEL_ARMV8() {
        return MODEL_ARMV8;
    }
    private static final int MODEL_POWER7 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:175:1).MODEL_POWER7 = 2
     * }
     */
    public static int MODEL_POWER7() {
        return MODEL_POWER7;
    }
    private static final int MODEL_POWER9 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:175:1).MODEL_POWER9 = 3
     * }
     */
    public static int MODEL_POWER9() {
        return MODEL_POWER9;
    }
    private static final int MODEL_POWER10 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:175:1).MODEL_POWER10 = 4
     * }
     */
    public static int MODEL_POWER10() {
        return MODEL_POWER10;
    }
    private static final int MODEL_UNKNOWN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:175:1).MODEL_UNKNOWN = 5
     * }
     */
    public static int MODEL_UNKNOWN() {
        return MODEL_UNKNOWN;
    }
    private static final int FEATURE_NEON = (int)1L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:184:1).FEATURE_NEON = 1
     * }
     */
    public static int FEATURE_NEON() {
        return FEATURE_NEON;
    }
    private static final int FEATURE_SVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum enum (unnamed at ./frame/base//bli_cpuid.h:184:1).FEATURE_SVE = 2
     * }
     */
    public static int FEATURE_SVE() {
        return FEATURE_SVE;
    }

    private static class bli_addv_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_addv_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_addv_check(const obj_t *x, const obj_t *y)
     * }
     */
    public static FunctionDescriptor bli_addv_check$descriptor() {
        return bli_addv_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_addv_check(const obj_t *x, const obj_t *y)
     * }
     */
    public static MethodHandle bli_addv_check$handle() {
        return bli_addv_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_addv_check(const obj_t *x, const obj_t *y)
     * }
     */
    public static MemorySegment bli_addv_check$address() {
        return bli_addv_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_addv_check(const obj_t *x, const obj_t *y)
     * }
     */
    public static void bli_addv_check(MemorySegment x, MemorySegment y) {
        var mh$ = bli_addv_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_addv_check", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_addv_ex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_addv_ex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_addv_ex(const obj_t *x, const obj_t *y, const cntx_t *cntx, const rntm_t *rntm)
     * }
     */
    public static FunctionDescriptor bli_addv_ex$descriptor() {
        return bli_addv_ex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_addv_ex(const obj_t *x, const obj_t *y, const cntx_t *cntx, const rntm_t *rntm)
     * }
     */
    public static MethodHandle bli_addv_ex$handle() {
        return bli_addv_ex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_addv_ex(const obj_t *x, const obj_t *y, const cntx_t *cntx, const rntm_t *rntm)
     * }
     */
    public static MemorySegment bli_addv_ex$address() {
        return bli_addv_ex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_addv_ex(const obj_t *x, const obj_t *y, const cntx_t *cntx, const rntm_t *rntm)
     * }
     */
    public static void bli_addv_ex(MemorySegment x, MemorySegment y, MemorySegment cntx, MemorySegment rntm) {
        var mh$ = bli_addv_ex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_addv_ex", x, y, cntx, rntm);
            }
            mh$.invokeExact(x, y, cntx, rntm);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_addv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_addv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_addv(const obj_t *x, const obj_t *y)
     * }
     */
    public static FunctionDescriptor bli_addv$descriptor() {
        return bli_addv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_addv(const obj_t *x, const obj_t *y)
     * }
     */
    public static MethodHandle bli_addv$handle() {
        return bli_addv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_addv(const obj_t *x, const obj_t *y)
     * }
     */
    public static MemorySegment bli_addv$address() {
        return bli_addv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_addv(const obj_t *x, const obj_t *y)
     * }
     */
    public static void bli_addv(MemorySegment x, MemorySegment y) {
        var mh$ = bli_addv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_addv", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_addv_ex_qfp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            blis_h.C_POINTER,
            blis_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_addv_ex_qfp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * addv_ex_vft bli_addv_ex_qfp(num_t dt)
     * }
     */
    public static FunctionDescriptor bli_addv_ex_qfp$descriptor() {
        return bli_addv_ex_qfp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * addv_ex_vft bli_addv_ex_qfp(num_t dt)
     * }
     */
    public static MethodHandle bli_addv_ex_qfp$handle() {
        return bli_addv_ex_qfp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * addv_ex_vft bli_addv_ex_qfp(num_t dt)
     * }
     */
    public static MemorySegment bli_addv_ex_qfp$address() {
        return bli_addv_ex_qfp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * addv_ex_vft bli_addv_ex_qfp(num_t dt)
     * }
     */
    public static MemorySegment bli_addv_ex_qfp(int dt) {
        var mh$ = bli_addv_ex_qfp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_addv_ex_qfp", dt);
            }
            return (MemorySegment)mh$.invokeExact(dt);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bli_addd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("bli_addd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void bli_addd(const obj_t *x, const obj_t *y)
     * }
     */
    public static FunctionDescriptor bli_addd$descriptor() {
        return bli_addd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void bli_addd(const obj_t *x, const obj_t *y)
     * }
     */
    public static MethodHandle bli_addd$handle() {
        return bli_addd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void bli_addd(const obj_t *x, const obj_t *y)
     * }
     */
    public static MemorySegment bli_addd$address() {
        return bli_addd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void bli_addd(const obj_t *x, const obj_t *y)
     * }
     */
    public static void bli_addd(MemorySegment x, MemorySegment y) {
        var mh$ = bli_addd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bli_addd", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CblasRowMajor = (int)101L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_ORDER.CblasRowMajor = 101
     * }
     */
    public static int CblasRowMajor() {
        return CblasRowMajor;
    }
    private static final int CblasColMajor = (int)102L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_ORDER.CblasColMajor = 102
     * }
     */
    public static int CblasColMajor() {
        return CblasColMajor;
    }
    private static final int CblasNoTrans = (int)111L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_TRANSPOSE.CblasNoTrans = 111
     * }
     */
    public static int CblasNoTrans() {
        return CblasNoTrans;
    }
    private static final int CblasTrans = (int)112L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_TRANSPOSE.CblasTrans = 112
     * }
     */
    public static int CblasTrans() {
        return CblasTrans;
    }
    private static final int CblasConjTrans = (int)113L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_TRANSPOSE.CblasConjTrans = 113
     * }
     */
    public static int CblasConjTrans() {
        return CblasConjTrans;
    }
    private static final int CblasUpper = (int)121L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_UPLO.CblasUpper = 121
     * }
     */
    public static int CblasUpper() {
        return CblasUpper;
    }
    private static final int CblasLower = (int)122L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_UPLO.CblasLower = 122
     * }
     */
    public static int CblasLower() {
        return CblasLower;
    }
    private static final int CblasNonUnit = (int)131L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_DIAG.CblasNonUnit = 131
     * }
     */
    public static int CblasNonUnit() {
        return CblasNonUnit;
    }
    private static final int CblasUnit = (int)132L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_DIAG.CblasUnit = 132
     * }
     */
    public static int CblasUnit() {
        return CblasUnit;
    }
    private static final int CblasLeft = (int)141L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_SIDE.CblasLeft = 141
     * }
     */
    public static int CblasLeft() {
        return CblasLeft;
    }
    private static final int CblasRight = (int)142L;
    /**
     * {@snippet lang=c :
     * enum CBLAS_SIDE.CblasRight = 142
     * }
     */
    public static int CblasRight() {
        return CblasRight;
    }
    /**
     * {@snippet lang=c :
     * #define BLIS_VERSION_STRING "2.0"
     * }
     */
    public static MemorySegment BLIS_VERSION_STRING() {
        class Holder {
            static final MemorySegment BLIS_VERSION_STRING
                = blis_h.LIBRARY_ARENA.allocateFrom("2.0");
        }
        return Holder.BLIS_VERSION_STRING;
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final long BLIS_MAX_TYPE_SIZE = 16L;
    /**
     * {@snippet lang=c :
     * #define BLIS_MAX_TYPE_SIZE 16
     * }
     */
    public static long BLIS_MAX_TYPE_SIZE() {
        return BLIS_MAX_TYPE_SIZE;
    }
    private static final int BLIS_DATATYPE_NUM_BITS = (int)3L;
    /**
     * {@snippet lang=c :
     * #define BLIS_DATATYPE_NUM_BITS 3
     * }
     */
    public static int BLIS_DATATYPE_NUM_BITS() {
        return BLIS_DATATYPE_NUM_BITS;
    }
    private static final int BLIS_CONJTRANS_NUM_BITS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BLIS_CONJTRANS_NUM_BITS 2
     * }
     */
    public static int BLIS_CONJTRANS_NUM_BITS() {
        return BLIS_CONJTRANS_NUM_BITS;
    }
    private static final int BLIS_UPLO_NUM_BITS = (int)3L;
    /**
     * {@snippet lang=c :
     * #define BLIS_UPLO_NUM_BITS 3
     * }
     */
    public static int BLIS_UPLO_NUM_BITS() {
        return BLIS_UPLO_NUM_BITS;
    }
    private static final int BLIS_PACK_SCHEMA_NUM_BITS = (int)6L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_SCHEMA_NUM_BITS 6
     * }
     */
    public static int BLIS_PACK_SCHEMA_NUM_BITS() {
        return BLIS_PACK_SCHEMA_NUM_BITS;
    }
    private static final int BLIS_DOMAIN_SHIFT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_DOMAIN_SHIFT 0
     * }
     */
    public static int BLIS_DOMAIN_SHIFT() {
        return BLIS_DOMAIN_SHIFT;
    }
    private static final int BLIS_PRECISION_SHIFT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PRECISION_SHIFT 1
     * }
     */
    public static int BLIS_PRECISION_SHIFT() {
        return BLIS_PRECISION_SHIFT;
    }
    private static final int BLIS_CONJTRANS_SHIFT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define BLIS_CONJTRANS_SHIFT 3
     * }
     */
    public static int BLIS_CONJTRANS_SHIFT() {
        return BLIS_CONJTRANS_SHIFT;
    }
    private static final int BLIS_TRANS_SHIFT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define BLIS_TRANS_SHIFT 3
     * }
     */
    public static int BLIS_TRANS_SHIFT() {
        return BLIS_TRANS_SHIFT;
    }
    private static final int BLIS_CONJ_SHIFT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BLIS_CONJ_SHIFT 4
     * }
     */
    public static int BLIS_CONJ_SHIFT() {
        return BLIS_CONJ_SHIFT;
    }
    private static final int BLIS_UPLO_SHIFT = (int)5L;
    /**
     * {@snippet lang=c :
     * #define BLIS_UPLO_SHIFT 5
     * }
     */
    public static int BLIS_UPLO_SHIFT() {
        return BLIS_UPLO_SHIFT;
    }
    private static final int BLIS_UPPER_SHIFT = (int)5L;
    /**
     * {@snippet lang=c :
     * #define BLIS_UPPER_SHIFT 5
     * }
     */
    public static int BLIS_UPPER_SHIFT() {
        return BLIS_UPPER_SHIFT;
    }
    private static final int BLIS_DIAG_SHIFT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define BLIS_DIAG_SHIFT 6
     * }
     */
    public static int BLIS_DIAG_SHIFT() {
        return BLIS_DIAG_SHIFT;
    }
    private static final int BLIS_LOWER_SHIFT = (int)7L;
    /**
     * {@snippet lang=c :
     * #define BLIS_LOWER_SHIFT 7
     * }
     */
    public static int BLIS_LOWER_SHIFT() {
        return BLIS_LOWER_SHIFT;
    }
    private static final int BLIS_UNIT_DIAG_SHIFT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BLIS_UNIT_DIAG_SHIFT 8
     * }
     */
    public static int BLIS_UNIT_DIAG_SHIFT() {
        return BLIS_UNIT_DIAG_SHIFT;
    }
    private static final int BLIS_INVERT_DIAG_SHIFT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define BLIS_INVERT_DIAG_SHIFT 9
     * }
     */
    public static int BLIS_INVERT_DIAG_SHIFT() {
        return BLIS_INVERT_DIAG_SHIFT;
    }
    private static final int BLIS_PACK_SCHEMA_SHIFT = (int)10L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_SCHEMA_SHIFT 10
     * }
     */
    public static int BLIS_PACK_SCHEMA_SHIFT() {
        return BLIS_PACK_SCHEMA_SHIFT;
    }
    private static final int BLIS_PACK_PANEL_SHIFT = (int)10L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_PANEL_SHIFT 10
     * }
     */
    public static int BLIS_PACK_PANEL_SHIFT() {
        return BLIS_PACK_PANEL_SHIFT;
    }
    private static final int BLIS_PACK_FORMAT_SHIFT = (int)11L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_FORMAT_SHIFT 11
     * }
     */
    public static int BLIS_PACK_FORMAT_SHIFT() {
        return BLIS_PACK_FORMAT_SHIFT;
    }
    private static final int BLIS_PACK_SHIFT = (int)15L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_SHIFT 15
     * }
     */
    public static int BLIS_PACK_SHIFT() {
        return BLIS_PACK_SHIFT;
    }
    private static final int BLIS_PACK_REV_IF_UPPER_SHIFT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_REV_IF_UPPER_SHIFT 16
     * }
     */
    public static int BLIS_PACK_REV_IF_UPPER_SHIFT() {
        return BLIS_PACK_REV_IF_UPPER_SHIFT;
    }
    private static final int BLIS_PACK_REV_IF_LOWER_SHIFT = (int)17L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_REV_IF_LOWER_SHIFT 17
     * }
     */
    public static int BLIS_PACK_REV_IF_LOWER_SHIFT() {
        return BLIS_PACK_REV_IF_LOWER_SHIFT;
    }
    private static final int BLIS_PACK_BUFFER_SHIFT = (int)18L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_BUFFER_SHIFT 18
     * }
     */
    public static int BLIS_PACK_BUFFER_SHIFT() {
        return BLIS_PACK_BUFFER_SHIFT;
    }
    private static final int BLIS_STRUC_SHIFT = (int)20L;
    /**
     * {@snippet lang=c :
     * #define BLIS_STRUC_SHIFT 20
     * }
     */
    public static int BLIS_STRUC_SHIFT() {
        return BLIS_STRUC_SHIFT;
    }
    private static final int BLIS_COMP_PREC_SHIFT = (int)22L;
    /**
     * {@snippet lang=c :
     * #define BLIS_COMP_PREC_SHIFT 22
     * }
     */
    public static int BLIS_COMP_PREC_SHIFT() {
        return BLIS_COMP_PREC_SHIFT;
    }
    private static final int BLIS_SCALAR_DT_SHIFT = (int)24L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SCALAR_DT_SHIFT 24
     * }
     */
    public static int BLIS_SCALAR_DT_SHIFT() {
        return BLIS_SCALAR_DT_SHIFT;
    }
    private static final int BLIS_SCALAR_DOMAIN_SHIFT = (int)24L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SCALAR_DOMAIN_SHIFT 24
     * }
     */
    public static int BLIS_SCALAR_DOMAIN_SHIFT() {
        return BLIS_SCALAR_DOMAIN_SHIFT;
    }
    private static final int BLIS_SCALAR_PREC_SHIFT = (int)25L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SCALAR_PREC_SHIFT 25
     * }
     */
    public static int BLIS_SCALAR_PREC_SHIFT() {
        return BLIS_SCALAR_PREC_SHIFT;
    }
    private static final int BLIS_INFO_NUM_BITS = (int)27L;
    /**
     * {@snippet lang=c :
     * #define BLIS_INFO_NUM_BITS 27
     * }
     */
    public static int BLIS_INFO_NUM_BITS() {
        return BLIS_INFO_NUM_BITS;
    }
    private static final int BLIS_DATATYPE_BITS = (int)7L;
    /**
     * {@snippet lang=c :
     * #define BLIS_DATATYPE_BITS 7
     * }
     */
    public static int BLIS_DATATYPE_BITS() {
        return BLIS_DATATYPE_BITS;
    }
    private static final int BLIS_DOMAIN_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_DOMAIN_BIT 1
     * }
     */
    public static int BLIS_DOMAIN_BIT() {
        return BLIS_DOMAIN_BIT;
    }
    private static final int BLIS_PRECISION_BIT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PRECISION_BIT 6
     * }
     */
    public static int BLIS_PRECISION_BIT() {
        return BLIS_PRECISION_BIT;
    }
    private static final int BLIS_CONJTRANS_BITS = (int)24L;
    /**
     * {@snippet lang=c :
     * #define BLIS_CONJTRANS_BITS 24
     * }
     */
    public static int BLIS_CONJTRANS_BITS() {
        return BLIS_CONJTRANS_BITS;
    }
    private static final int BLIS_TRANS_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BLIS_TRANS_BIT 8
     * }
     */
    public static int BLIS_TRANS_BIT() {
        return BLIS_TRANS_BIT;
    }
    private static final int BLIS_CONJ_BIT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BLIS_CONJ_BIT 16
     * }
     */
    public static int BLIS_CONJ_BIT() {
        return BLIS_CONJ_BIT;
    }
    private static final int BLIS_UPLO_BITS = (int)224L;
    /**
     * {@snippet lang=c :
     * #define BLIS_UPLO_BITS 224
     * }
     */
    public static int BLIS_UPLO_BITS() {
        return BLIS_UPLO_BITS;
    }
    private static final int BLIS_UPPER_BIT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define BLIS_UPPER_BIT 32
     * }
     */
    public static int BLIS_UPPER_BIT() {
        return BLIS_UPPER_BIT;
    }
    private static final int BLIS_DIAG_BIT = (int)64L;
    /**
     * {@snippet lang=c :
     * #define BLIS_DIAG_BIT 64
     * }
     */
    public static int BLIS_DIAG_BIT() {
        return BLIS_DIAG_BIT;
    }
    private static final int BLIS_LOWER_BIT = (int)128L;
    /**
     * {@snippet lang=c :
     * #define BLIS_LOWER_BIT 128
     * }
     */
    public static int BLIS_LOWER_BIT() {
        return BLIS_LOWER_BIT;
    }
    private static final int BLIS_UNIT_DIAG_BIT = (int)256L;
    /**
     * {@snippet lang=c :
     * #define BLIS_UNIT_DIAG_BIT 256
     * }
     */
    public static int BLIS_UNIT_DIAG_BIT() {
        return BLIS_UNIT_DIAG_BIT;
    }
    private static final int BLIS_INVERT_DIAG_BIT = (int)512L;
    /**
     * {@snippet lang=c :
     * #define BLIS_INVERT_DIAG_BIT 512
     * }
     */
    public static int BLIS_INVERT_DIAG_BIT() {
        return BLIS_INVERT_DIAG_BIT;
    }
    private static final int BLIS_PACK_SCHEMA_BITS = (int)64512L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_SCHEMA_BITS 64512
     * }
     */
    public static int BLIS_PACK_SCHEMA_BITS() {
        return BLIS_PACK_SCHEMA_BITS;
    }
    private static final int BLIS_PACK_PANEL_BIT = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_PANEL_BIT 1024
     * }
     */
    public static int BLIS_PACK_PANEL_BIT() {
        return BLIS_PACK_PANEL_BIT;
    }
    private static final int BLIS_PACK_FORMAT_BITS = (int)30720L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_FORMAT_BITS 30720
     * }
     */
    public static int BLIS_PACK_FORMAT_BITS() {
        return BLIS_PACK_FORMAT_BITS;
    }
    private static final int BLIS_PACK_BIT = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_BIT 32768
     * }
     */
    public static int BLIS_PACK_BIT() {
        return BLIS_PACK_BIT;
    }
    private static final int BLIS_PACK_REV_IF_UPPER_BIT = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_REV_IF_UPPER_BIT 65536
     * }
     */
    public static int BLIS_PACK_REV_IF_UPPER_BIT() {
        return BLIS_PACK_REV_IF_UPPER_BIT;
    }
    private static final int BLIS_PACK_REV_IF_LOWER_BIT = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_REV_IF_LOWER_BIT 131072
     * }
     */
    public static int BLIS_PACK_REV_IF_LOWER_BIT() {
        return BLIS_PACK_REV_IF_LOWER_BIT;
    }
    private static final int BLIS_PACK_BUFFER_BITS = (int)786432L;
    /**
     * {@snippet lang=c :
     * #define BLIS_PACK_BUFFER_BITS 786432
     * }
     */
    public static int BLIS_PACK_BUFFER_BITS() {
        return BLIS_PACK_BUFFER_BITS;
    }
    private static final int BLIS_STRUC_BITS = (int)3145728L;
    /**
     * {@snippet lang=c :
     * #define BLIS_STRUC_BITS 3145728
     * }
     */
    public static int BLIS_STRUC_BITS() {
        return BLIS_STRUC_BITS;
    }
    private static final int BLIS_COMP_PREC_BIT = (int)12582912L;
    /**
     * {@snippet lang=c :
     * #define BLIS_COMP_PREC_BIT 12582912
     * }
     */
    public static int BLIS_COMP_PREC_BIT() {
        return BLIS_COMP_PREC_BIT;
    }
    private static final int BLIS_SCALAR_DT_BITS = (int)117440512L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SCALAR_DT_BITS 117440512
     * }
     */
    public static int BLIS_SCALAR_DT_BITS() {
        return BLIS_SCALAR_DT_BITS;
    }
    private static final int BLIS_SCALAR_DOMAIN_BIT = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SCALAR_DOMAIN_BIT 16777216
     * }
     */
    public static int BLIS_SCALAR_DOMAIN_BIT() {
        return BLIS_SCALAR_DOMAIN_BIT;
    }
    private static final int BLIS_SCALAR_PREC_BIT = (int)100663296L;
    /**
     * {@snippet lang=c :
     * #define BLIS_SCALAR_PREC_BIT 100663296
     * }
     */
    public static int BLIS_SCALAR_PREC_BIT() {
        return BLIS_SCALAR_PREC_BIT;
    }
    private static final int BLIS_BITVAL_COMPLEX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_COMPLEX 1
     * }
     */
    public static int BLIS_BITVAL_COMPLEX() {
        return BLIS_BITVAL_COMPLEX;
    }
    private static final int BLIS_BITVAL_DOUBLE_PREC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_DOUBLE_PREC 2
     * }
     */
    public static int BLIS_BITVAL_DOUBLE_PREC() {
        return BLIS_BITVAL_DOUBLE_PREC;
    }
    private static final int BLIS_BITVAL_SCOMPLEX_TYPE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_SCOMPLEX_TYPE 1
     * }
     */
    public static int BLIS_BITVAL_SCOMPLEX_TYPE() {
        return BLIS_BITVAL_SCOMPLEX_TYPE;
    }
    private static final int BLIS_BITVAL_DOUBLE_TYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_DOUBLE_TYPE 2
     * }
     */
    public static int BLIS_BITVAL_DOUBLE_TYPE() {
        return BLIS_BITVAL_DOUBLE_TYPE;
    }
    private static final int BLIS_BITVAL_DCOMPLEX_TYPE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_DCOMPLEX_TYPE 3
     * }
     */
    public static int BLIS_BITVAL_DCOMPLEX_TYPE() {
        return BLIS_BITVAL_DCOMPLEX_TYPE;
    }
    private static final int BLIS_BITVAL_TRANS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_TRANS 8
     * }
     */
    public static int BLIS_BITVAL_TRANS() {
        return BLIS_BITVAL_TRANS;
    }
    private static final int BLIS_BITVAL_CONJ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_CONJ 16
     * }
     */
    public static int BLIS_BITVAL_CONJ() {
        return BLIS_BITVAL_CONJ;
    }
    private static final int BLIS_BITVAL_CONJ_TRANS = (int)24L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_CONJ_TRANS 24
     * }
     */
    public static int BLIS_BITVAL_CONJ_TRANS() {
        return BLIS_BITVAL_CONJ_TRANS;
    }
    private static final int BLIS_BITVAL_UPPER = (int)96L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_UPPER 96
     * }
     */
    public static int BLIS_BITVAL_UPPER() {
        return BLIS_BITVAL_UPPER;
    }
    private static final int BLIS_BITVAL_LOWER = (int)192L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_LOWER 192
     * }
     */
    public static int BLIS_BITVAL_LOWER() {
        return BLIS_BITVAL_LOWER;
    }
    private static final int BLIS_BITVAL_DENSE = (int)224L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_DENSE 224
     * }
     */
    public static int BLIS_BITVAL_DENSE() {
        return BLIS_BITVAL_DENSE;
    }
    private static final int BLIS_BITVAL_UNIT_DIAG = (int)256L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_UNIT_DIAG 256
     * }
     */
    public static int BLIS_BITVAL_UNIT_DIAG() {
        return BLIS_BITVAL_UNIT_DIAG;
    }
    private static final int BLIS_BITVAL_INVERT_DIAG = (int)512L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_INVERT_DIAG 512
     * }
     */
    public static int BLIS_BITVAL_INVERT_DIAG() {
        return BLIS_BITVAL_INVERT_DIAG;
    }
    private static final int BLIS_BITVAL_1E = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_1E 2048
     * }
     */
    public static int BLIS_BITVAL_1E() {
        return BLIS_BITVAL_1E;
    }
    private static final int BLIS_BITVAL_1R = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_1R 4096
     * }
     */
    public static int BLIS_BITVAL_1R() {
        return BLIS_BITVAL_1R;
    }
    private static final int BLIS_BITVAL_RO = (int)6144L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_RO 6144
     * }
     */
    public static int BLIS_BITVAL_RO() {
        return BLIS_BITVAL_RO;
    }
    private static final int BLIS_BITVAL_PACKED_UNSPEC = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_PACKED_UNSPEC 32768
     * }
     */
    public static int BLIS_BITVAL_PACKED_UNSPEC() {
        return BLIS_BITVAL_PACKED_UNSPEC;
    }
    private static final int BLIS_BITVAL_PACKED_PANELS = (int)33792L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_PACKED_PANELS 33792
     * }
     */
    public static int BLIS_BITVAL_PACKED_PANELS() {
        return BLIS_BITVAL_PACKED_PANELS;
    }
    private static final int BLIS_BITVAL_PACKED_PANELS_1E = (int)35840L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_PACKED_PANELS_1E 35840
     * }
     */
    public static int BLIS_BITVAL_PACKED_PANELS_1E() {
        return BLIS_BITVAL_PACKED_PANELS_1E;
    }
    private static final int BLIS_BITVAL_PACKED_PANELS_1R = (int)37888L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_PACKED_PANELS_1R 37888
     * }
     */
    public static int BLIS_BITVAL_PACKED_PANELS_1R() {
        return BLIS_BITVAL_PACKED_PANELS_1R;
    }
    private static final int BLIS_BITVAL_PACKED_PANELS_RO = (int)39936L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_PACKED_PANELS_RO 39936
     * }
     */
    public static int BLIS_BITVAL_PACKED_PANELS_RO() {
        return BLIS_BITVAL_PACKED_PANELS_RO;
    }
    private static final int BLIS_BITVAL_PACK_REV_IF_UPPER = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_PACK_REV_IF_UPPER 65536
     * }
     */
    public static int BLIS_BITVAL_PACK_REV_IF_UPPER() {
        return BLIS_BITVAL_PACK_REV_IF_UPPER;
    }
    private static final int BLIS_BITVAL_PACK_REV_IF_LOWER = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_PACK_REV_IF_LOWER 131072
     * }
     */
    public static int BLIS_BITVAL_PACK_REV_IF_LOWER() {
        return BLIS_BITVAL_PACK_REV_IF_LOWER;
    }
    private static final int BLIS_BITVAL_BUFFER_FOR_B_PANEL = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_BUFFER_FOR_B_PANEL 262144
     * }
     */
    public static int BLIS_BITVAL_BUFFER_FOR_B_PANEL() {
        return BLIS_BITVAL_BUFFER_FOR_B_PANEL;
    }
    private static final int BLIS_BITVAL_BUFFER_FOR_C_PANEL = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_BUFFER_FOR_C_PANEL 524288
     * }
     */
    public static int BLIS_BITVAL_BUFFER_FOR_C_PANEL() {
        return BLIS_BITVAL_BUFFER_FOR_C_PANEL;
    }
    private static final int BLIS_BITVAL_BUFFER_FOR_GEN_USE = (int)786432L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_BUFFER_FOR_GEN_USE 786432
     * }
     */
    public static int BLIS_BITVAL_BUFFER_FOR_GEN_USE() {
        return BLIS_BITVAL_BUFFER_FOR_GEN_USE;
    }
    private static final int BLIS_BITVAL_HERMITIAN = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_HERMITIAN 1048576
     * }
     */
    public static int BLIS_BITVAL_HERMITIAN() {
        return BLIS_BITVAL_HERMITIAN;
    }
    private static final int BLIS_BITVAL_SYMMETRIC = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_SYMMETRIC 2097152
     * }
     */
    public static int BLIS_BITVAL_SYMMETRIC() {
        return BLIS_BITVAL_SYMMETRIC;
    }
    private static final int BLIS_BITVAL_TRIANGULAR = (int)3145728L;
    /**
     * {@snippet lang=c :
     * #define BLIS_BITVAL_TRIANGULAR 3145728
     * }
     */
    public static int BLIS_BITVAL_TRIANGULAR() {
        return BLIS_BITVAL_TRIANGULAR;
    }
    private static final int BLIS_MACH_PARAM_FIRST = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_MACH_PARAM_FIRST 0
     * }
     */
    public static int BLIS_MACH_PARAM_FIRST() {
        return BLIS_MACH_PARAM_FIRST;
    }
    private static final int BLIS_MACH_PARAM_LAST = (int)10L;
    /**
     * {@snippet lang=c :
     * #define BLIS_MACH_PARAM_LAST 10
     * }
     */
    public static int BLIS_MACH_PARAM_LAST() {
        return BLIS_MACH_PARAM_LAST;
    }
    private static final int bli_1m = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_1m 0
     * }
     */
    public static int bli_1m() {
        return bli_1m;
    }
    private static final int bli_nat = (int)1L;
    /**
     * {@snippet lang=c :
     * #define bli_nat 1
     * }
     */
    public static int bli_nat() {
        return bli_nat;
    }
    private static final int BLIS_NTYPE_KER_BITS = (int)4026531840L;
    /**
     * {@snippet lang=c :
     * #define BLIS_NTYPE_KER_BITS 4026531840
     * }
     */
    public static int BLIS_NTYPE_KER_BITS() {
        return BLIS_NTYPE_KER_BITS;
    }
    private static final int BLIS_1TYPE_KER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BLIS_1TYPE_KER 0
     * }
     */
    public static int BLIS_1TYPE_KER() {
        return BLIS_1TYPE_KER;
    }
    private static final int BLIS_2TYPE_KER = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define BLIS_2TYPE_KER 268435456
     * }
     */
    public static int BLIS_2TYPE_KER() {
        return BLIS_2TYPE_KER;
    }
    private static final int BLIS_3TYPE_KER = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define BLIS_3TYPE_KER 536870912
     * }
     */
    public static int BLIS_3TYPE_KER() {
        return BLIS_3TYPE_KER;
    }
    private static final int BLIS_VA_END = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define BLIS_VA_END 4294967295
     * }
     */
    public static int BLIS_VA_END() {
        return BLIS_VA_END;
    }
    /**
     * {@snippet lang=c :
     * #define BLIS_FUNC_PREFIX_STR "bli"
     * }
     */
    public static MemorySegment BLIS_FUNC_PREFIX_STR() {
        class Holder {
            static final MemorySegment BLIS_FUNC_PREFIX_STR
                = blis_h.LIBRARY_ARENA.allocateFrom("bli");
        }
        return Holder.BLIS_FUNC_PREFIX_STR;
    }
    private static final int bli_stype = (int)0L;
    /**
     * {@snippet lang=c :
     * #define bli_stype 0
     * }
     */
    public static int bli_stype() {
        return bli_stype;
    }
    private static final int bli_dtype = (int)2L;
    /**
     * {@snippet lang=c :
     * #define bli_dtype 2
     * }
     */
    public static int bli_dtype() {
        return bli_dtype;
    }
    private static final int bli_ctype = (int)1L;
    /**
     * {@snippet lang=c :
     * #define bli_ctype 1
     * }
     */
    public static int bli_ctype() {
        return bli_ctype;
    }
    private static final int bli_ztype = (int)3L;
    /**
     * {@snippet lang=c :
     * #define bli_ztype 3
     * }
     */
    public static int bli_ztype() {
        return bli_ztype;
    }
    private static final float bli_stwo = 2.0f;
    /**
     * {@snippet lang=c :
     * #define bli_stwo 2.0
     * }
     */
    public static float bli_stwo() {
        return bli_stwo;
    }
    private static final float bli_sone = 1.0f;
    /**
     * {@snippet lang=c :
     * #define bli_sone 1.0
     * }
     */
    public static float bli_sone() {
        return bli_sone;
    }
    private static final float bli_szero = 0.0f;
    /**
     * {@snippet lang=c :
     * #define bli_szero 0.0
     * }
     */
    public static float bli_szero() {
        return bli_szero;
    }
    private static final float bli_smone = -1.0f;
    /**
     * {@snippet lang=c :
     * #define bli_smone -1.0
     * }
     */
    public static float bli_smone() {
        return bli_smone;
    }
    private static final float bli_smtwo = -2.0f;
    /**
     * {@snippet lang=c :
     * #define bli_smtwo -2.0
     * }
     */
    public static float bli_smtwo() {
        return bli_smtwo;
    }
    private static final double bli_dtwo = 2.0d;
    /**
     * {@snippet lang=c :
     * #define bli_dtwo 2.0
     * }
     */
    public static double bli_dtwo() {
        return bli_dtwo;
    }
    private static final double bli_done = 1.0d;
    /**
     * {@snippet lang=c :
     * #define bli_done 1.0
     * }
     */
    public static double bli_done() {
        return bli_done;
    }
    private static final double bli_dzero = 0.0d;
    /**
     * {@snippet lang=c :
     * #define bli_dzero 0.0
     * }
     */
    public static double bli_dzero() {
        return bli_dzero;
    }
    private static final double bli_dmone = -1.0d;
    /**
     * {@snippet lang=c :
     * #define bli_dmone -1.0
     * }
     */
    public static double bli_dmone() {
        return bli_dmone;
    }
    private static final double bli_dmtwo = -2.0d;
    /**
     * {@snippet lang=c :
     * #define bli_dmtwo -2.0
     * }
     */
    public static double bli_dmtwo() {
        return bli_dmtwo;
    }
    private static final int BLIS_STACK_BUF_MAX_SIZE = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define BLIS_STACK_BUF_MAX_SIZE 8192
     * }
     */
    public static int BLIS_STACK_BUF_MAX_SIZE() {
        return BLIS_STACK_BUF_MAX_SIZE;
    }
    private static final int BLIS_STACK_BUF_ALIGN_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BLIS_STACK_BUF_ALIGN_SIZE 16
     * }
     */
    public static int BLIS_STACK_BUF_ALIGN_SIZE() {
        return BLIS_STACK_BUF_ALIGN_SIZE;
    }
    private static final int BLIS_HEAP_ADDR_ALIGN_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BLIS_HEAP_ADDR_ALIGN_SIZE 16
     * }
     */
    public static int BLIS_HEAP_ADDR_ALIGN_SIZE() {
        return BLIS_HEAP_ADDR_ALIGN_SIZE;
    }
    private static final int BLIS_HEAP_STRIDE_ALIGN_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BLIS_HEAP_STRIDE_ALIGN_SIZE 16
     * }
     */
    public static int BLIS_HEAP_STRIDE_ALIGN_SIZE() {
        return BLIS_HEAP_STRIDE_ALIGN_SIZE;
    }
    private static final int BLIS_POOL_ADDR_ALIGN_SIZE_A = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define BLIS_POOL_ADDR_ALIGN_SIZE_A 4096
     * }
     */
    public static int BLIS_POOL_ADDR_ALIGN_SIZE_A() {
        return BLIS_POOL_ADDR_ALIGN_SIZE_A;
    }
    private static final int BLIS_POOL_ADDR_ALIGN_SIZE_B = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define BLIS_POOL_ADDR_ALIGN_SIZE_B 4096
     * }
     */
    public static int BLIS_POOL_ADDR_ALIGN_SIZE_B() {
        return BLIS_POOL_ADDR_ALIGN_SIZE_B;
    }
    private static final int BLIS_POOL_ADDR_ALIGN_SIZE_C = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define BLIS_POOL_ADDR_ALIGN_SIZE_C 4096
     * }
     */
    public static int BLIS_POOL_ADDR_ALIGN_SIZE_C() {
        return BLIS_POOL_ADDR_ALIGN_SIZE_C;
    }
    private static final int BLIS_POOL_ADDR_ALIGN_SIZE_GEN = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define BLIS_POOL_ADDR_ALIGN_SIZE_GEN 4096
     * }
     */
    public static int BLIS_POOL_ADDR_ALIGN_SIZE_GEN() {
        return BLIS_POOL_ADDR_ALIGN_SIZE_GEN;
    }
    private static final int TRUE_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TRUE_ 1
     * }
     */
    public static int TRUE_() {
        return TRUE_;
    }
    private static final int FALSE_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FALSE_ 0
     * }
     */
    public static int FALSE_() {
        return FALSE_;
    }
    private static final int BLIS_MAX_BLAS_FUNC_STR_LENGTH = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BLIS_MAX_BLAS_FUNC_STR_LENGTH 8
     * }
     */
    public static int BLIS_MAX_BLAS_FUNC_STR_LENGTH() {
        return BLIS_MAX_BLAS_FUNC_STR_LENGTH;
    }
}


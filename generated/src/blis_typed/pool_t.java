// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     void *block_ptrs;
 *     dim_t block_ptrs_len;
 *     dim_t top_index;
 *     dim_t num_blocks;
 *     siz_t block_size;
 *     siz_t align_size;
 *     siz_t offset_size;
 *     malloc_ft malloc_fp;
 *     free_ft free_fp;
 * }
 * }
 */
public class pool_t {

    pool_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_POINTER.withName("block_ptrs"),
        blis_h.C_LONG_LONG.withName("block_ptrs_len"),
        blis_h.C_LONG_LONG.withName("top_index"),
        blis_h.C_LONG_LONG.withName("num_blocks"),
        blis_h.C_LONG_LONG.withName("block_size"),
        blis_h.C_LONG_LONG.withName("align_size"),
        blis_h.C_LONG_LONG.withName("offset_size"),
        blis_h.C_POINTER.withName("malloc_fp"),
        blis_h.C_POINTER.withName("free_fp")
    ).withName("pool_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout block_ptrs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("block_ptrs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *block_ptrs
     * }
     */
    public static final AddressLayout block_ptrs$layout() {
        return block_ptrs$LAYOUT;
    }

    private static final long block_ptrs$OFFSET = $LAYOUT.byteOffset(groupElement("block_ptrs"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *block_ptrs
     * }
     */
    public static final long block_ptrs$offset() {
        return block_ptrs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *block_ptrs
     * }
     */
    public static MemorySegment block_ptrs(MemorySegment struct) {
        return struct.get(block_ptrs$LAYOUT, block_ptrs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *block_ptrs
     * }
     */
    public static void block_ptrs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(block_ptrs$LAYOUT, block_ptrs$OFFSET, fieldValue);
    }

    private static final OfLong block_ptrs_len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("block_ptrs_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t block_ptrs_len
     * }
     */
    public static final OfLong block_ptrs_len$layout() {
        return block_ptrs_len$LAYOUT;
    }

    private static final long block_ptrs_len$OFFSET = $LAYOUT.byteOffset(groupElement("block_ptrs_len"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t block_ptrs_len
     * }
     */
    public static final long block_ptrs_len$offset() {
        return block_ptrs_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t block_ptrs_len
     * }
     */
    public static long block_ptrs_len(MemorySegment struct) {
        return struct.get(block_ptrs_len$LAYOUT, block_ptrs_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t block_ptrs_len
     * }
     */
    public static void block_ptrs_len(MemorySegment struct, long fieldValue) {
        struct.set(block_ptrs_len$LAYOUT, block_ptrs_len$OFFSET, fieldValue);
    }

    private static final OfLong top_index$LAYOUT = (OfLong)$LAYOUT.select(groupElement("top_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t top_index
     * }
     */
    public static final OfLong top_index$layout() {
        return top_index$LAYOUT;
    }

    private static final long top_index$OFFSET = $LAYOUT.byteOffset(groupElement("top_index"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t top_index
     * }
     */
    public static final long top_index$offset() {
        return top_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t top_index
     * }
     */
    public static long top_index(MemorySegment struct) {
        return struct.get(top_index$LAYOUT, top_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t top_index
     * }
     */
    public static void top_index(MemorySegment struct, long fieldValue) {
        struct.set(top_index$LAYOUT, top_index$OFFSET, fieldValue);
    }

    private static final OfLong num_blocks$LAYOUT = (OfLong)$LAYOUT.select(groupElement("num_blocks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t num_blocks
     * }
     */
    public static final OfLong num_blocks$layout() {
        return num_blocks$LAYOUT;
    }

    private static final long num_blocks$OFFSET = $LAYOUT.byteOffset(groupElement("num_blocks"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t num_blocks
     * }
     */
    public static final long num_blocks$offset() {
        return num_blocks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t num_blocks
     * }
     */
    public static long num_blocks(MemorySegment struct) {
        return struct.get(num_blocks$LAYOUT, num_blocks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t num_blocks
     * }
     */
    public static void num_blocks(MemorySegment struct, long fieldValue) {
        struct.set(num_blocks$LAYOUT, num_blocks$OFFSET, fieldValue);
    }

    private static final OfLong block_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("block_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t block_size
     * }
     */
    public static final OfLong block_size$layout() {
        return block_size$LAYOUT;
    }

    private static final long block_size$OFFSET = $LAYOUT.byteOffset(groupElement("block_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t block_size
     * }
     */
    public static final long block_size$offset() {
        return block_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t block_size
     * }
     */
    public static long block_size(MemorySegment struct) {
        return struct.get(block_size$LAYOUT, block_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t block_size
     * }
     */
    public static void block_size(MemorySegment struct, long fieldValue) {
        struct.set(block_size$LAYOUT, block_size$OFFSET, fieldValue);
    }

    private static final OfLong align_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("align_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t align_size
     * }
     */
    public static final OfLong align_size$layout() {
        return align_size$LAYOUT;
    }

    private static final long align_size$OFFSET = $LAYOUT.byteOffset(groupElement("align_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t align_size
     * }
     */
    public static final long align_size$offset() {
        return align_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t align_size
     * }
     */
    public static long align_size(MemorySegment struct) {
        return struct.get(align_size$LAYOUT, align_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t align_size
     * }
     */
    public static void align_size(MemorySegment struct, long fieldValue) {
        struct.set(align_size$LAYOUT, align_size$OFFSET, fieldValue);
    }

    private static final OfLong offset_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("offset_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t offset_size
     * }
     */
    public static final OfLong offset_size$layout() {
        return offset_size$LAYOUT;
    }

    private static final long offset_size$OFFSET = $LAYOUT.byteOffset(groupElement("offset_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t offset_size
     * }
     */
    public static final long offset_size$offset() {
        return offset_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t offset_size
     * }
     */
    public static long offset_size(MemorySegment struct) {
        return struct.get(offset_size$LAYOUT, offset_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t offset_size
     * }
     */
    public static void offset_size(MemorySegment struct, long fieldValue) {
        struct.set(offset_size$LAYOUT, offset_size$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * malloc_ft malloc_fp
     * }
     */
    public final static class malloc_fp {

        private malloc_fp() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(long _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            blis_h.C_POINTER,
            blis_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = blis_h.upcallHandle(malloc_fp.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(malloc_fp.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, long _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout malloc_fp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("malloc_fp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * malloc_ft malloc_fp
     * }
     */
    public static final AddressLayout malloc_fp$layout() {
        return malloc_fp$LAYOUT;
    }

    private static final long malloc_fp$OFFSET = $LAYOUT.byteOffset(groupElement("malloc_fp"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * malloc_ft malloc_fp
     * }
     */
    public static final long malloc_fp$offset() {
        return malloc_fp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * malloc_ft malloc_fp
     * }
     */
    public static MemorySegment malloc_fp(MemorySegment struct) {
        return struct.get(malloc_fp$LAYOUT, malloc_fp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * malloc_ft malloc_fp
     * }
     */
    public static void malloc_fp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(malloc_fp$LAYOUT, malloc_fp$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * free_ft free_fp
     * }
     */
    public final static class free_fp {

        private free_fp() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            blis_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = blis_h.upcallHandle(free_fp.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free_fp.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free_fp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free_fp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * free_ft free_fp
     * }
     */
    public static final AddressLayout free_fp$layout() {
        return free_fp$LAYOUT;
    }

    private static final long free_fp$OFFSET = $LAYOUT.byteOffset(groupElement("free_fp"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * free_ft free_fp
     * }
     */
    public static final long free_fp$offset() {
        return free_fp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * free_ft free_fp
     * }
     */
    public static MemorySegment free_fp(MemorySegment struct) {
        return struct.get(free_fp$LAYOUT, free_fp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * free_ft free_fp
     * }
     */
    public static void free_fp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free_fp$LAYOUT, free_fp$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


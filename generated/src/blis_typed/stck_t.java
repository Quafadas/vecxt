// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     siz_t elem_size;
 *     siz_t block_len;
 *     siz_t max_blocks;
 *     siz_t size;
 *     siz_t capacity;
 *     void **blocks;
 *     bli_pthread_mutex_t lock;
 * }
 * }
 */
public class stck_t {

    stck_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_LONG_LONG.withName("elem_size"),
        blis_h.C_LONG_LONG.withName("block_len"),
        blis_h.C_LONG_LONG.withName("max_blocks"),
        blis_h.C_LONG_LONG.withName("size"),
        blis_h.C_LONG_LONG.withName("capacity"),
        blis_h.C_POINTER.withName("blocks"),
        _opaque_pthread_mutex_t.layout().withName("lock")
    ).withName("stck_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong elem_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("elem_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static final OfLong elem_size$layout() {
        return elem_size$LAYOUT;
    }

    private static final long elem_size$OFFSET = $LAYOUT.byteOffset(groupElement("elem_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static final long elem_size$offset() {
        return elem_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static long elem_size(MemorySegment struct) {
        return struct.get(elem_size$LAYOUT, elem_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static void elem_size(MemorySegment struct, long fieldValue) {
        struct.set(elem_size$LAYOUT, elem_size$OFFSET, fieldValue);
    }

    private static final OfLong block_len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("block_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t block_len
     * }
     */
    public static final OfLong block_len$layout() {
        return block_len$LAYOUT;
    }

    private static final long block_len$OFFSET = $LAYOUT.byteOffset(groupElement("block_len"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t block_len
     * }
     */
    public static final long block_len$offset() {
        return block_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t block_len
     * }
     */
    public static long block_len(MemorySegment struct) {
        return struct.get(block_len$LAYOUT, block_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t block_len
     * }
     */
    public static void block_len(MemorySegment struct, long fieldValue) {
        struct.set(block_len$LAYOUT, block_len$OFFSET, fieldValue);
    }

    private static final OfLong max_blocks$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_blocks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t max_blocks
     * }
     */
    public static final OfLong max_blocks$layout() {
        return max_blocks$LAYOUT;
    }

    private static final long max_blocks$OFFSET = $LAYOUT.byteOffset(groupElement("max_blocks"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t max_blocks
     * }
     */
    public static final long max_blocks$offset() {
        return max_blocks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t max_blocks
     * }
     */
    public static long max_blocks(MemorySegment struct) {
        return struct.get(max_blocks$LAYOUT, max_blocks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t max_blocks
     * }
     */
    public static void max_blocks(MemorySegment struct, long fieldValue) {
        struct.set(max_blocks$LAYOUT, max_blocks$OFFSET, fieldValue);
    }

    private static final OfLong size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t size
     * }
     */
    public static final OfLong size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = $LAYOUT.byteOffset(groupElement("size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t size
     * }
     */
    public static long size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t size
     * }
     */
    public static void size(MemorySegment struct, long fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfLong capacity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("capacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t capacity
     * }
     */
    public static final OfLong capacity$layout() {
        return capacity$LAYOUT;
    }

    private static final long capacity$OFFSET = $LAYOUT.byteOffset(groupElement("capacity"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t capacity
     * }
     */
    public static final long capacity$offset() {
        return capacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t capacity
     * }
     */
    public static long capacity(MemorySegment struct) {
        return struct.get(capacity$LAYOUT, capacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t capacity
     * }
     */
    public static void capacity(MemorySegment struct, long fieldValue) {
        struct.set(capacity$LAYOUT, capacity$OFFSET, fieldValue);
    }

    private static final AddressLayout blocks$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("blocks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void **blocks
     * }
     */
    public static final AddressLayout blocks$layout() {
        return blocks$LAYOUT;
    }

    private static final long blocks$OFFSET = $LAYOUT.byteOffset(groupElement("blocks"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void **blocks
     * }
     */
    public static final long blocks$offset() {
        return blocks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void **blocks
     * }
     */
    public static MemorySegment blocks(MemorySegment struct) {
        return struct.get(blocks$LAYOUT, blocks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void **blocks
     * }
     */
    public static void blocks(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(blocks$LAYOUT, blocks$OFFSET, fieldValue);
    }

    private static final GroupLayout lock$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("lock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bli_pthread_mutex_t lock
     * }
     */
    public static final GroupLayout lock$layout() {
        return lock$LAYOUT;
    }

    private static final long lock$OFFSET = $LAYOUT.byteOffset(groupElement("lock"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bli_pthread_mutex_t lock
     * }
     */
    public static final long lock$offset() {
        return lock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bli_pthread_mutex_t lock
     * }
     */
    public static MemorySegment lock(MemorySegment struct) {
        return struct.asSlice(lock$OFFSET, lock$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bli_pthread_mutex_t lock
     * }
     */
    public static void lock(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lock$OFFSET, lock$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


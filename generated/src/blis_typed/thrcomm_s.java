// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct thrcomm_s {
 *     void *sent_object;
 *     dim_t n_threads;
 *     timpl_t ti;
 *     char padding1[64];
 *     gint_t barrier_sense;
 *     char padding2[64];
 *     dim_t barrier_threads_arrived;
 *     char padding3[64];
 * }
 * }
 */
public class thrcomm_s {

    thrcomm_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_POINTER.withName("sent_object"),
        blis_h.C_LONG_LONG.withName("n_threads"),
        blis_h.C_INT.withName("ti"),
        MemoryLayout.sequenceLayout(64, blis_h.C_CHAR).withName("padding1"),
        MemoryLayout.paddingLayout(4),
        blis_h.C_LONG_LONG.withName("barrier_sense"),
        MemoryLayout.sequenceLayout(64, blis_h.C_CHAR).withName("padding2"),
        blis_h.C_LONG_LONG.withName("barrier_threads_arrived"),
        MemoryLayout.sequenceLayout(64, blis_h.C_CHAR).withName("padding3")
    ).withName("thrcomm_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout sent_object$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sent_object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *sent_object
     * }
     */
    public static final AddressLayout sent_object$layout() {
        return sent_object$LAYOUT;
    }

    private static final long sent_object$OFFSET = $LAYOUT.byteOffset(groupElement("sent_object"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *sent_object
     * }
     */
    public static final long sent_object$offset() {
        return sent_object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *sent_object
     * }
     */
    public static MemorySegment sent_object(MemorySegment struct) {
        return struct.get(sent_object$LAYOUT, sent_object$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *sent_object
     * }
     */
    public static void sent_object(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sent_object$LAYOUT, sent_object$OFFSET, fieldValue);
    }

    private static final OfLong n_threads$LAYOUT = (OfLong)$LAYOUT.select(groupElement("n_threads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t n_threads
     * }
     */
    public static final OfLong n_threads$layout() {
        return n_threads$LAYOUT;
    }

    private static final long n_threads$OFFSET = $LAYOUT.byteOffset(groupElement("n_threads"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t n_threads
     * }
     */
    public static final long n_threads$offset() {
        return n_threads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t n_threads
     * }
     */
    public static long n_threads(MemorySegment struct) {
        return struct.get(n_threads$LAYOUT, n_threads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t n_threads
     * }
     */
    public static void n_threads(MemorySegment struct, long fieldValue) {
        struct.set(n_threads$LAYOUT, n_threads$OFFSET, fieldValue);
    }

    private static final OfInt ti$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ti"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * timpl_t ti
     * }
     */
    public static final OfInt ti$layout() {
        return ti$LAYOUT;
    }

    private static final long ti$OFFSET = $LAYOUT.byteOffset(groupElement("ti"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * timpl_t ti
     * }
     */
    public static final long ti$offset() {
        return ti$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * timpl_t ti
     * }
     */
    public static int ti(MemorySegment struct) {
        return struct.get(ti$LAYOUT, ti$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * timpl_t ti
     * }
     */
    public static void ti(MemorySegment struct, int fieldValue) {
        struct.set(ti$LAYOUT, ti$OFFSET, fieldValue);
    }

    private static final SequenceLayout padding1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("padding1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char padding1[64]
     * }
     */
    public static final SequenceLayout padding1$layout() {
        return padding1$LAYOUT;
    }

    private static final long padding1$OFFSET = $LAYOUT.byteOffset(groupElement("padding1"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char padding1[64]
     * }
     */
    public static final long padding1$offset() {
        return padding1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char padding1[64]
     * }
     */
    public static MemorySegment padding1(MemorySegment struct) {
        return struct.asSlice(padding1$OFFSET, padding1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char padding1[64]
     * }
     */
    public static void padding1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, padding1$OFFSET, padding1$LAYOUT.byteSize());
    }

    private static long[] padding1$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char padding1[64]
     * }
     */
    public static long[] padding1$dimensions() {
        return padding1$DIMS;
    }
    private static final VarHandle padding1$ELEM_HANDLE = padding1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char padding1[64]
     * }
     */
    public static byte padding1(MemorySegment struct, long index0) {
        return (byte)padding1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char padding1[64]
     * }
     */
    public static void padding1(MemorySegment struct, long index0, byte fieldValue) {
        padding1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong barrier_sense$LAYOUT = (OfLong)$LAYOUT.select(groupElement("barrier_sense"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint_t barrier_sense
     * }
     */
    public static final OfLong barrier_sense$layout() {
        return barrier_sense$LAYOUT;
    }

    private static final long barrier_sense$OFFSET = $LAYOUT.byteOffset(groupElement("barrier_sense"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint_t barrier_sense
     * }
     */
    public static final long barrier_sense$offset() {
        return barrier_sense$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint_t barrier_sense
     * }
     */
    public static long barrier_sense(MemorySegment struct) {
        return struct.get(barrier_sense$LAYOUT, barrier_sense$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint_t barrier_sense
     * }
     */
    public static void barrier_sense(MemorySegment struct, long fieldValue) {
        struct.set(barrier_sense$LAYOUT, barrier_sense$OFFSET, fieldValue);
    }

    private static final SequenceLayout padding2$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("padding2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char padding2[64]
     * }
     */
    public static final SequenceLayout padding2$layout() {
        return padding2$LAYOUT;
    }

    private static final long padding2$OFFSET = $LAYOUT.byteOffset(groupElement("padding2"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char padding2[64]
     * }
     */
    public static final long padding2$offset() {
        return padding2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char padding2[64]
     * }
     */
    public static MemorySegment padding2(MemorySegment struct) {
        return struct.asSlice(padding2$OFFSET, padding2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char padding2[64]
     * }
     */
    public static void padding2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, padding2$OFFSET, padding2$LAYOUT.byteSize());
    }

    private static long[] padding2$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char padding2[64]
     * }
     */
    public static long[] padding2$dimensions() {
        return padding2$DIMS;
    }
    private static final VarHandle padding2$ELEM_HANDLE = padding2$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char padding2[64]
     * }
     */
    public static byte padding2(MemorySegment struct, long index0) {
        return (byte)padding2$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char padding2[64]
     * }
     */
    public static void padding2(MemorySegment struct, long index0, byte fieldValue) {
        padding2$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong barrier_threads_arrived$LAYOUT = (OfLong)$LAYOUT.select(groupElement("barrier_threads_arrived"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t barrier_threads_arrived
     * }
     */
    public static final OfLong barrier_threads_arrived$layout() {
        return barrier_threads_arrived$LAYOUT;
    }

    private static final long barrier_threads_arrived$OFFSET = $LAYOUT.byteOffset(groupElement("barrier_threads_arrived"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t barrier_threads_arrived
     * }
     */
    public static final long barrier_threads_arrived$offset() {
        return barrier_threads_arrived$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t barrier_threads_arrived
     * }
     */
    public static long barrier_threads_arrived(MemorySegment struct) {
        return struct.get(barrier_threads_arrived$LAYOUT, barrier_threads_arrived$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t barrier_threads_arrived
     * }
     */
    public static void barrier_threads_arrived(MemorySegment struct, long fieldValue) {
        struct.set(barrier_threads_arrived$LAYOUT, barrier_threads_arrived$OFFSET, fieldValue);
    }

    private static final SequenceLayout padding3$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("padding3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char padding3[64]
     * }
     */
    public static final SequenceLayout padding3$layout() {
        return padding3$LAYOUT;
    }

    private static final long padding3$OFFSET = $LAYOUT.byteOffset(groupElement("padding3"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char padding3[64]
     * }
     */
    public static final long padding3$offset() {
        return padding3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char padding3[64]
     * }
     */
    public static MemorySegment padding3(MemorySegment struct) {
        return struct.asSlice(padding3$OFFSET, padding3$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char padding3[64]
     * }
     */
    public static void padding3(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, padding3$OFFSET, padding3$LAYOUT.byteSize());
    }

    private static long[] padding3$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char padding3[64]
     * }
     */
    public static long[] padding3$dimensions() {
        return padding3$DIMS;
    }
    private static final VarHandle padding3$ELEM_HANDLE = padding3$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char padding3[64]
     * }
     */
    public static byte padding3(MemorySegment struct, long index0) {
        return (byte)padding3$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char padding3[64]
     * }
     */
    public static void padding3(MemorySegment struct, long index0, byte fieldValue) {
        padding3$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


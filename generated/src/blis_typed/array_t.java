// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     void *buf;
 *     siz_t num_elem;
 *     siz_t elem_size;
 * }
 * }
 */
public class array_t {

    array_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_POINTER.withName("buf"),
        blis_h.C_LONG_LONG.withName("num_elem"),
        blis_h.C_LONG_LONG.withName("elem_size")
    ).withName("array_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout buf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static final AddressLayout buf$layout() {
        return buf$LAYOUT;
    }

    private static final long buf$OFFSET = $LAYOUT.byteOffset(groupElement("buf"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static final long buf$offset() {
        return buf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static MemorySegment buf(MemorySegment struct) {
        return struct.get(buf$LAYOUT, buf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *buf
     * }
     */
    public static void buf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buf$LAYOUT, buf$OFFSET, fieldValue);
    }

    private static final OfLong num_elem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("num_elem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t num_elem
     * }
     */
    public static final OfLong num_elem$layout() {
        return num_elem$LAYOUT;
    }

    private static final long num_elem$OFFSET = $LAYOUT.byteOffset(groupElement("num_elem"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t num_elem
     * }
     */
    public static final long num_elem$offset() {
        return num_elem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t num_elem
     * }
     */
    public static long num_elem(MemorySegment struct) {
        return struct.get(num_elem$LAYOUT, num_elem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t num_elem
     * }
     */
    public static void num_elem(MemorySegment struct, long fieldValue) {
        struct.set(num_elem$LAYOUT, num_elem$OFFSET, fieldValue);
    }

    private static final OfLong elem_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("elem_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static final OfLong elem_size$layout() {
        return elem_size$LAYOUT;
    }

    private static final long elem_size$OFFSET = $LAYOUT.byteOffset(groupElement("elem_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static final long elem_size$offset() {
        return elem_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static long elem_size(MemorySegment struct) {
        return struct.get(elem_size$LAYOUT, elem_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static void elem_size(MemorySegment struct, long fieldValue) {
        struct.set(elem_size$LAYOUT, elem_size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


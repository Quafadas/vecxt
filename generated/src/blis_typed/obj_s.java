// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct obj_s {
 *     struct obj_s *root;
 *     dim_t off[2];
 *     dim_t dim[2];
 *     doff_t diag_off;
 *     objbits_t info;
 *     objbits_t info2;
 *     siz_t elem_size;
 *     void *buffer;
 *     inc_t rs;
 *     inc_t cs;
 *     inc_t is;
 *     atom_t scalar;
 *     dim_t m_padded;
 *     dim_t n_padded;
 *     inc_t ps;
 *     inc_t pd;
 *     dim_t m_panel;
 *     dim_t n_panel;
 * }
 * }
 */
public class obj_s {

    obj_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_POINTER.withName("root"),
        MemoryLayout.sequenceLayout(2, blis_h.C_LONG_LONG).withName("off"),
        MemoryLayout.sequenceLayout(2, blis_h.C_LONG_LONG).withName("dim"),
        blis_h.C_LONG_LONG.withName("diag_off"),
        blis_h.C_INT.withName("info"),
        blis_h.C_INT.withName("info2"),
        blis_h.C_LONG_LONG.withName("elem_size"),
        blis_h.C_POINTER.withName("buffer"),
        blis_h.C_LONG_LONG.withName("rs"),
        blis_h.C_LONG_LONG.withName("cs"),
        blis_h.C_LONG_LONG.withName("is"),
        dcomplex.layout().withName("scalar"),
        blis_h.C_LONG_LONG.withName("m_padded"),
        blis_h.C_LONG_LONG.withName("n_padded"),
        blis_h.C_LONG_LONG.withName("ps"),
        blis_h.C_LONG_LONG.withName("pd"),
        blis_h.C_LONG_LONG.withName("m_panel"),
        blis_h.C_LONG_LONG.withName("n_panel")
    ).withName("obj_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout root$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("root"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct obj_s *root
     * }
     */
    public static final AddressLayout root$layout() {
        return root$LAYOUT;
    }

    private static final long root$OFFSET = $LAYOUT.byteOffset(groupElement("root"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct obj_s *root
     * }
     */
    public static final long root$offset() {
        return root$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct obj_s *root
     * }
     */
    public static MemorySegment root(MemorySegment struct) {
        return struct.get(root$LAYOUT, root$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct obj_s *root
     * }
     */
    public static void root(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(root$LAYOUT, root$OFFSET, fieldValue);
    }

    private static final SequenceLayout off$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("off"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t off[2]
     * }
     */
    public static final SequenceLayout off$layout() {
        return off$LAYOUT;
    }

    private static final long off$OFFSET = $LAYOUT.byteOffset(groupElement("off"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t off[2]
     * }
     */
    public static final long off$offset() {
        return off$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t off[2]
     * }
     */
    public static MemorySegment off(MemorySegment struct) {
        return struct.asSlice(off$OFFSET, off$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t off[2]
     * }
     */
    public static void off(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, off$OFFSET, off$LAYOUT.byteSize());
    }

    private static long[] off$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * dim_t off[2]
     * }
     */
    public static long[] off$dimensions() {
        return off$DIMS;
    }
    private static final VarHandle off$ELEM_HANDLE = off$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * dim_t off[2]
     * }
     */
    public static long off(MemorySegment struct, long index0) {
        return (long)off$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * dim_t off[2]
     * }
     */
    public static void off(MemorySegment struct, long index0, long fieldValue) {
        off$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout dim$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dim"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t dim[2]
     * }
     */
    public static final SequenceLayout dim$layout() {
        return dim$LAYOUT;
    }

    private static final long dim$OFFSET = $LAYOUT.byteOffset(groupElement("dim"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t dim[2]
     * }
     */
    public static final long dim$offset() {
        return dim$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t dim[2]
     * }
     */
    public static MemorySegment dim(MemorySegment struct) {
        return struct.asSlice(dim$OFFSET, dim$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t dim[2]
     * }
     */
    public static void dim(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dim$OFFSET, dim$LAYOUT.byteSize());
    }

    private static long[] dim$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * dim_t dim[2]
     * }
     */
    public static long[] dim$dimensions() {
        return dim$DIMS;
    }
    private static final VarHandle dim$ELEM_HANDLE = dim$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * dim_t dim[2]
     * }
     */
    public static long dim(MemorySegment struct, long index0) {
        return (long)dim$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * dim_t dim[2]
     * }
     */
    public static void dim(MemorySegment struct, long index0, long fieldValue) {
        dim$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong diag_off$LAYOUT = (OfLong)$LAYOUT.select(groupElement("diag_off"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * doff_t diag_off
     * }
     */
    public static final OfLong diag_off$layout() {
        return diag_off$LAYOUT;
    }

    private static final long diag_off$OFFSET = $LAYOUT.byteOffset(groupElement("diag_off"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * doff_t diag_off
     * }
     */
    public static final long diag_off$offset() {
        return diag_off$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * doff_t diag_off
     * }
     */
    public static long diag_off(MemorySegment struct) {
        return struct.get(diag_off$LAYOUT, diag_off$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * doff_t diag_off
     * }
     */
    public static void diag_off(MemorySegment struct, long fieldValue) {
        struct.set(diag_off$LAYOUT, diag_off$OFFSET, fieldValue);
    }

    private static final OfInt info$LAYOUT = (OfInt)$LAYOUT.select(groupElement("info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * objbits_t info
     * }
     */
    public static final OfInt info$layout() {
        return info$LAYOUT;
    }

    private static final long info$OFFSET = $LAYOUT.byteOffset(groupElement("info"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * objbits_t info
     * }
     */
    public static final long info$offset() {
        return info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * objbits_t info
     * }
     */
    public static int info(MemorySegment struct) {
        return struct.get(info$LAYOUT, info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * objbits_t info
     * }
     */
    public static void info(MemorySegment struct, int fieldValue) {
        struct.set(info$LAYOUT, info$OFFSET, fieldValue);
    }

    private static final OfInt info2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("info2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * objbits_t info2
     * }
     */
    public static final OfInt info2$layout() {
        return info2$LAYOUT;
    }

    private static final long info2$OFFSET = $LAYOUT.byteOffset(groupElement("info2"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * objbits_t info2
     * }
     */
    public static final long info2$offset() {
        return info2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * objbits_t info2
     * }
     */
    public static int info2(MemorySegment struct) {
        return struct.get(info2$LAYOUT, info2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * objbits_t info2
     * }
     */
    public static void info2(MemorySegment struct, int fieldValue) {
        struct.set(info2$LAYOUT, info2$OFFSET, fieldValue);
    }

    private static final OfLong elem_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("elem_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static final OfLong elem_size$layout() {
        return elem_size$LAYOUT;
    }

    private static final long elem_size$OFFSET = $LAYOUT.byteOffset(groupElement("elem_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static final long elem_size$offset() {
        return elem_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static long elem_size(MemorySegment struct) {
        return struct.get(elem_size$LAYOUT, elem_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * siz_t elem_size
     * }
     */
    public static void elem_size(MemorySegment struct, long fieldValue) {
        struct.set(elem_size$LAYOUT, elem_size$OFFSET, fieldValue);
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = $LAYOUT.byteOffset(groupElement("buffer"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final OfLong rs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inc_t rs
     * }
     */
    public static final OfLong rs$layout() {
        return rs$LAYOUT;
    }

    private static final long rs$OFFSET = $LAYOUT.byteOffset(groupElement("rs"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inc_t rs
     * }
     */
    public static final long rs$offset() {
        return rs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inc_t rs
     * }
     */
    public static long rs(MemorySegment struct) {
        return struct.get(rs$LAYOUT, rs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inc_t rs
     * }
     */
    public static void rs(MemorySegment struct, long fieldValue) {
        struct.set(rs$LAYOUT, rs$OFFSET, fieldValue);
    }

    private static final OfLong cs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inc_t cs
     * }
     */
    public static final OfLong cs$layout() {
        return cs$LAYOUT;
    }

    private static final long cs$OFFSET = $LAYOUT.byteOffset(groupElement("cs"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inc_t cs
     * }
     */
    public static final long cs$offset() {
        return cs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inc_t cs
     * }
     */
    public static long cs(MemorySegment struct) {
        return struct.get(cs$LAYOUT, cs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inc_t cs
     * }
     */
    public static void cs(MemorySegment struct, long fieldValue) {
        struct.set(cs$LAYOUT, cs$OFFSET, fieldValue);
    }

    private static final OfLong is$LAYOUT = (OfLong)$LAYOUT.select(groupElement("is"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inc_t is
     * }
     */
    public static final OfLong is$layout() {
        return is$LAYOUT;
    }

    private static final long is$OFFSET = $LAYOUT.byteOffset(groupElement("is"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inc_t is
     * }
     */
    public static final long is$offset() {
        return is$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inc_t is
     * }
     */
    public static long is(MemorySegment struct) {
        return struct.get(is$LAYOUT, is$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inc_t is
     * }
     */
    public static void is(MemorySegment struct, long fieldValue) {
        struct.set(is$LAYOUT, is$OFFSET, fieldValue);
    }

    private static final GroupLayout scalar$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("scalar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * atom_t scalar
     * }
     */
    public static final GroupLayout scalar$layout() {
        return scalar$LAYOUT;
    }

    private static final long scalar$OFFSET = $LAYOUT.byteOffset(groupElement("scalar"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * atom_t scalar
     * }
     */
    public static final long scalar$offset() {
        return scalar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * atom_t scalar
     * }
     */
    public static MemorySegment scalar(MemorySegment struct) {
        return struct.asSlice(scalar$OFFSET, scalar$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * atom_t scalar
     * }
     */
    public static void scalar(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, scalar$OFFSET, scalar$LAYOUT.byteSize());
    }

    private static final OfLong m_padded$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_padded"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t m_padded
     * }
     */
    public static final OfLong m_padded$layout() {
        return m_padded$LAYOUT;
    }

    private static final long m_padded$OFFSET = $LAYOUT.byteOffset(groupElement("m_padded"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t m_padded
     * }
     */
    public static final long m_padded$offset() {
        return m_padded$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t m_padded
     * }
     */
    public static long m_padded(MemorySegment struct) {
        return struct.get(m_padded$LAYOUT, m_padded$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t m_padded
     * }
     */
    public static void m_padded(MemorySegment struct, long fieldValue) {
        struct.set(m_padded$LAYOUT, m_padded$OFFSET, fieldValue);
    }

    private static final OfLong n_padded$LAYOUT = (OfLong)$LAYOUT.select(groupElement("n_padded"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t n_padded
     * }
     */
    public static final OfLong n_padded$layout() {
        return n_padded$LAYOUT;
    }

    private static final long n_padded$OFFSET = $LAYOUT.byteOffset(groupElement("n_padded"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t n_padded
     * }
     */
    public static final long n_padded$offset() {
        return n_padded$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t n_padded
     * }
     */
    public static long n_padded(MemorySegment struct) {
        return struct.get(n_padded$LAYOUT, n_padded$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t n_padded
     * }
     */
    public static void n_padded(MemorySegment struct, long fieldValue) {
        struct.set(n_padded$LAYOUT, n_padded$OFFSET, fieldValue);
    }

    private static final OfLong ps$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inc_t ps
     * }
     */
    public static final OfLong ps$layout() {
        return ps$LAYOUT;
    }

    private static final long ps$OFFSET = $LAYOUT.byteOffset(groupElement("ps"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inc_t ps
     * }
     */
    public static final long ps$offset() {
        return ps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inc_t ps
     * }
     */
    public static long ps(MemorySegment struct) {
        return struct.get(ps$LAYOUT, ps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inc_t ps
     * }
     */
    public static void ps(MemorySegment struct, long fieldValue) {
        struct.set(ps$LAYOUT, ps$OFFSET, fieldValue);
    }

    private static final OfLong pd$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inc_t pd
     * }
     */
    public static final OfLong pd$layout() {
        return pd$LAYOUT;
    }

    private static final long pd$OFFSET = $LAYOUT.byteOffset(groupElement("pd"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inc_t pd
     * }
     */
    public static final long pd$offset() {
        return pd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inc_t pd
     * }
     */
    public static long pd(MemorySegment struct) {
        return struct.get(pd$LAYOUT, pd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inc_t pd
     * }
     */
    public static void pd(MemorySegment struct, long fieldValue) {
        struct.set(pd$LAYOUT, pd$OFFSET, fieldValue);
    }

    private static final OfLong m_panel$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_panel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t m_panel
     * }
     */
    public static final OfLong m_panel$layout() {
        return m_panel$LAYOUT;
    }

    private static final long m_panel$OFFSET = $LAYOUT.byteOffset(groupElement("m_panel"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t m_panel
     * }
     */
    public static final long m_panel$offset() {
        return m_panel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t m_panel
     * }
     */
    public static long m_panel(MemorySegment struct) {
        return struct.get(m_panel$LAYOUT, m_panel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t m_panel
     * }
     */
    public static void m_panel(MemorySegment struct, long fieldValue) {
        struct.set(m_panel$LAYOUT, m_panel$OFFSET, fieldValue);
    }

    private static final OfLong n_panel$LAYOUT = (OfLong)$LAYOUT.select(groupElement("n_panel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t n_panel
     * }
     */
    public static final OfLong n_panel$layout() {
        return n_panel$LAYOUT;
    }

    private static final long n_panel$OFFSET = $LAYOUT.byteOffset(groupElement("n_panel"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t n_panel
     * }
     */
    public static final long n_panel$offset() {
        return n_panel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t n_panel
     * }
     */
    public static long n_panel(MemorySegment struct) {
        return struct.get(n_panel$LAYOUT, n_panel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t n_panel
     * }
     */
    public static void n_panel(MemorySegment struct, long fieldValue) {
        struct.set(n_panel$LAYOUT, n_panel$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


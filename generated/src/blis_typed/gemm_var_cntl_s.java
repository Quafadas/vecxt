// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct gemm_var_cntl_s {
 *     cntl_t cntl;
 *     num_t dt_comp;
 *     num_t dt_out;
 *     gemm_ukr_ft ukr;
 *     gemm_ukr_ft real_ukr;
 *     const void *params;
 *     const void *real_params;
 *     dim_t mr;
 *     dim_t nr;
 *     dim_t mr_scale;
 *     dim_t nr_scale;
 *     bool row_pref;
 * }
 * }
 */
public class gemm_var_cntl_s {

    gemm_var_cntl_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        cntl_s.layout().withName("cntl"),
        blis_h.C_INT.withName("dt_comp"),
        blis_h.C_INT.withName("dt_out"),
        blis_h.C_POINTER.withName("ukr"),
        blis_h.C_POINTER.withName("real_ukr"),
        blis_h.C_POINTER.withName("params"),
        blis_h.C_POINTER.withName("real_params"),
        blis_h.C_LONG_LONG.withName("mr"),
        blis_h.C_LONG_LONG.withName("nr"),
        blis_h.C_LONG_LONG.withName("mr_scale"),
        blis_h.C_LONG_LONG.withName("nr_scale"),
        blis_h.C_BOOL.withName("row_pref"),
        MemoryLayout.paddingLayout(7)
    ).withName("gemm_var_cntl_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout cntl$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cntl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static final GroupLayout cntl$layout() {
        return cntl$LAYOUT;
    }

    private static final long cntl$OFFSET = $LAYOUT.byteOffset(groupElement("cntl"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static final long cntl$offset() {
        return cntl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static MemorySegment cntl(MemorySegment struct) {
        return struct.asSlice(cntl$OFFSET, cntl$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static void cntl(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cntl$OFFSET, cntl$LAYOUT.byteSize());
    }

    private static final OfInt dt_comp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dt_comp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * num_t dt_comp
     * }
     */
    public static final OfInt dt_comp$layout() {
        return dt_comp$LAYOUT;
    }

    private static final long dt_comp$OFFSET = $LAYOUT.byteOffset(groupElement("dt_comp"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * num_t dt_comp
     * }
     */
    public static final long dt_comp$offset() {
        return dt_comp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * num_t dt_comp
     * }
     */
    public static int dt_comp(MemorySegment struct) {
        return struct.get(dt_comp$LAYOUT, dt_comp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * num_t dt_comp
     * }
     */
    public static void dt_comp(MemorySegment struct, int fieldValue) {
        struct.set(dt_comp$LAYOUT, dt_comp$OFFSET, fieldValue);
    }

    private static final OfInt dt_out$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dt_out"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * num_t dt_out
     * }
     */
    public static final OfInt dt_out$layout() {
        return dt_out$LAYOUT;
    }

    private static final long dt_out$OFFSET = $LAYOUT.byteOffset(groupElement("dt_out"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * num_t dt_out
     * }
     */
    public static final long dt_out$offset() {
        return dt_out$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * num_t dt_out
     * }
     */
    public static int dt_out(MemorySegment struct) {
        return struct.get(dt_out$LAYOUT, dt_out$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * num_t dt_out
     * }
     */
    public static void dt_out(MemorySegment struct, int fieldValue) {
        struct.set(dt_out$LAYOUT, dt_out$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gemm_ukr_ft ukr
     * }
     */
    public final static class ukr {

        private ukr() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(long _x0, long _x1, long _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, long _x8, long _x9, MemorySegment _x10, MemorySegment _x11);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = blis_h.upcallHandle(ukr.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ukr.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, long _x0, long _x1, long _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, long _x8, long _x9, MemorySegment _x10, MemorySegment _x11) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ukr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ukr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gemm_ukr_ft ukr
     * }
     */
    public static final AddressLayout ukr$layout() {
        return ukr$LAYOUT;
    }

    private static final long ukr$OFFSET = $LAYOUT.byteOffset(groupElement("ukr"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gemm_ukr_ft ukr
     * }
     */
    public static final long ukr$offset() {
        return ukr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gemm_ukr_ft ukr
     * }
     */
    public static MemorySegment ukr(MemorySegment struct) {
        return struct.get(ukr$LAYOUT, ukr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gemm_ukr_ft ukr
     * }
     */
    public static void ukr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ukr$LAYOUT, ukr$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gemm_ukr_ft real_ukr
     * }
     */
    public final static class real_ukr {

        private real_ukr() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(long _x0, long _x1, long _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, long _x8, long _x9, MemorySegment _x10, MemorySegment _x11);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = blis_h.upcallHandle(real_ukr.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(real_ukr.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, long _x0, long _x1, long _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, long _x8, long _x9, MemorySegment _x10, MemorySegment _x11) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout real_ukr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("real_ukr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gemm_ukr_ft real_ukr
     * }
     */
    public static final AddressLayout real_ukr$layout() {
        return real_ukr$LAYOUT;
    }

    private static final long real_ukr$OFFSET = $LAYOUT.byteOffset(groupElement("real_ukr"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gemm_ukr_ft real_ukr
     * }
     */
    public static final long real_ukr$offset() {
        return real_ukr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gemm_ukr_ft real_ukr
     * }
     */
    public static MemorySegment real_ukr(MemorySegment struct) {
        return struct.get(real_ukr$LAYOUT, real_ukr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gemm_ukr_ft real_ukr
     * }
     */
    public static void real_ukr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(real_ukr$LAYOUT, real_ukr$OFFSET, fieldValue);
    }

    private static final AddressLayout params$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static final AddressLayout params$layout() {
        return params$LAYOUT;
    }

    private static final long params$OFFSET = $LAYOUT.byteOffset(groupElement("params"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static final long params$offset() {
        return params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static MemorySegment params(MemorySegment struct) {
        return struct.get(params$LAYOUT, params$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static void params(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(params$LAYOUT, params$OFFSET, fieldValue);
    }

    private static final AddressLayout real_params$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("real_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *real_params
     * }
     */
    public static final AddressLayout real_params$layout() {
        return real_params$LAYOUT;
    }

    private static final long real_params$OFFSET = $LAYOUT.byteOffset(groupElement("real_params"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *real_params
     * }
     */
    public static final long real_params$offset() {
        return real_params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *real_params
     * }
     */
    public static MemorySegment real_params(MemorySegment struct) {
        return struct.get(real_params$LAYOUT, real_params$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *real_params
     * }
     */
    public static void real_params(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(real_params$LAYOUT, real_params$OFFSET, fieldValue);
    }

    private static final OfLong mr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t mr
     * }
     */
    public static final OfLong mr$layout() {
        return mr$LAYOUT;
    }

    private static final long mr$OFFSET = $LAYOUT.byteOffset(groupElement("mr"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t mr
     * }
     */
    public static final long mr$offset() {
        return mr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t mr
     * }
     */
    public static long mr(MemorySegment struct) {
        return struct.get(mr$LAYOUT, mr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t mr
     * }
     */
    public static void mr(MemorySegment struct, long fieldValue) {
        struct.set(mr$LAYOUT, mr$OFFSET, fieldValue);
    }

    private static final OfLong nr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t nr
     * }
     */
    public static final OfLong nr$layout() {
        return nr$LAYOUT;
    }

    private static final long nr$OFFSET = $LAYOUT.byteOffset(groupElement("nr"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t nr
     * }
     */
    public static final long nr$offset() {
        return nr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t nr
     * }
     */
    public static long nr(MemorySegment struct) {
        return struct.get(nr$LAYOUT, nr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t nr
     * }
     */
    public static void nr(MemorySegment struct, long fieldValue) {
        struct.set(nr$LAYOUT, nr$OFFSET, fieldValue);
    }

    private static final OfLong mr_scale$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mr_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t mr_scale
     * }
     */
    public static final OfLong mr_scale$layout() {
        return mr_scale$LAYOUT;
    }

    private static final long mr_scale$OFFSET = $LAYOUT.byteOffset(groupElement("mr_scale"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t mr_scale
     * }
     */
    public static final long mr_scale$offset() {
        return mr_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t mr_scale
     * }
     */
    public static long mr_scale(MemorySegment struct) {
        return struct.get(mr_scale$LAYOUT, mr_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t mr_scale
     * }
     */
    public static void mr_scale(MemorySegment struct, long fieldValue) {
        struct.set(mr_scale$LAYOUT, mr_scale$OFFSET, fieldValue);
    }

    private static final OfLong nr_scale$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nr_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t nr_scale
     * }
     */
    public static final OfLong nr_scale$layout() {
        return nr_scale$LAYOUT;
    }

    private static final long nr_scale$OFFSET = $LAYOUT.byteOffset(groupElement("nr_scale"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t nr_scale
     * }
     */
    public static final long nr_scale$offset() {
        return nr_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t nr_scale
     * }
     */
    public static long nr_scale(MemorySegment struct) {
        return struct.get(nr_scale$LAYOUT, nr_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t nr_scale
     * }
     */
    public static void nr_scale(MemorySegment struct, long fieldValue) {
        struct.set(nr_scale$LAYOUT, nr_scale$OFFSET, fieldValue);
    }

    private static final OfBoolean row_pref$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("row_pref"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool row_pref
     * }
     */
    public static final OfBoolean row_pref$layout() {
        return row_pref$LAYOUT;
    }

    private static final long row_pref$OFFSET = $LAYOUT.byteOffset(groupElement("row_pref"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool row_pref
     * }
     */
    public static final long row_pref$offset() {
        return row_pref$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool row_pref
     * }
     */
    public static boolean row_pref(MemorySegment struct) {
        return struct.get(row_pref$LAYOUT, row_pref$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool row_pref
     * }
     */
    public static void row_pref(MemorySegment struct, boolean fieldValue) {
        struct.set(row_pref$LAYOUT, row_pref$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct trsm_var_cntl_s {
 *     gemm_var_cntl_t gemm;
 *     gemmtrsm_ukr_ft gemmtrsm_ukr;
 *     dim_t mr_pack;
 *     dim_t nr_pack;
 *     dim_t mr_bcast;
 *     dim_t nr_bcast;
 * }
 * }
 */
public class trsm_var_cntl_s {

    trsm_var_cntl_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        gemm_var_cntl_s.layout().withName("gemm"),
        blis_h.C_POINTER.withName("gemmtrsm_ukr"),
        blis_h.C_LONG_LONG.withName("mr_pack"),
        blis_h.C_LONG_LONG.withName("nr_pack"),
        blis_h.C_LONG_LONG.withName("mr_bcast"),
        blis_h.C_LONG_LONG.withName("nr_bcast")
    ).withName("trsm_var_cntl_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout gemm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gemm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gemm_var_cntl_t gemm
     * }
     */
    public static final GroupLayout gemm$layout() {
        return gemm$LAYOUT;
    }

    private static final long gemm$OFFSET = $LAYOUT.byteOffset(groupElement("gemm"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gemm_var_cntl_t gemm
     * }
     */
    public static final long gemm$offset() {
        return gemm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gemm_var_cntl_t gemm
     * }
     */
    public static MemorySegment gemm(MemorySegment struct) {
        return struct.asSlice(gemm$OFFSET, gemm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gemm_var_cntl_t gemm
     * }
     */
    public static void gemm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gemm$OFFSET, gemm$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * gemmtrsm_ukr_ft gemmtrsm_ukr
     * }
     */
    public final static class gemmtrsm_ukr {

        private gemmtrsm_ukr() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(long _x0, long _x1, long _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, MemorySegment _x8, long _x9, long _x10, MemorySegment _x11, MemorySegment _x12);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_POINTER,
            blis_h.C_LONG_LONG,
            blis_h.C_LONG_LONG,
            blis_h.C_POINTER,
            blis_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = blis_h.upcallHandle(gemmtrsm_ukr.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(gemmtrsm_ukr.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, long _x0, long _x1, long _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, MemorySegment _x8, long _x9, long _x10, MemorySegment _x11, MemorySegment _x12) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout gemmtrsm_ukr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gemmtrsm_ukr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gemmtrsm_ukr_ft gemmtrsm_ukr
     * }
     */
    public static final AddressLayout gemmtrsm_ukr$layout() {
        return gemmtrsm_ukr$LAYOUT;
    }

    private static final long gemmtrsm_ukr$OFFSET = $LAYOUT.byteOffset(groupElement("gemmtrsm_ukr"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gemmtrsm_ukr_ft gemmtrsm_ukr
     * }
     */
    public static final long gemmtrsm_ukr$offset() {
        return gemmtrsm_ukr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gemmtrsm_ukr_ft gemmtrsm_ukr
     * }
     */
    public static MemorySegment gemmtrsm_ukr(MemorySegment struct) {
        return struct.get(gemmtrsm_ukr$LAYOUT, gemmtrsm_ukr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gemmtrsm_ukr_ft gemmtrsm_ukr
     * }
     */
    public static void gemmtrsm_ukr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gemmtrsm_ukr$LAYOUT, gemmtrsm_ukr$OFFSET, fieldValue);
    }

    private static final OfLong mr_pack$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mr_pack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t mr_pack
     * }
     */
    public static final OfLong mr_pack$layout() {
        return mr_pack$LAYOUT;
    }

    private static final long mr_pack$OFFSET = $LAYOUT.byteOffset(groupElement("mr_pack"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t mr_pack
     * }
     */
    public static final long mr_pack$offset() {
        return mr_pack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t mr_pack
     * }
     */
    public static long mr_pack(MemorySegment struct) {
        return struct.get(mr_pack$LAYOUT, mr_pack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t mr_pack
     * }
     */
    public static void mr_pack(MemorySegment struct, long fieldValue) {
        struct.set(mr_pack$LAYOUT, mr_pack$OFFSET, fieldValue);
    }

    private static final OfLong nr_pack$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nr_pack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t nr_pack
     * }
     */
    public static final OfLong nr_pack$layout() {
        return nr_pack$LAYOUT;
    }

    private static final long nr_pack$OFFSET = $LAYOUT.byteOffset(groupElement("nr_pack"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t nr_pack
     * }
     */
    public static final long nr_pack$offset() {
        return nr_pack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t nr_pack
     * }
     */
    public static long nr_pack(MemorySegment struct) {
        return struct.get(nr_pack$LAYOUT, nr_pack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t nr_pack
     * }
     */
    public static void nr_pack(MemorySegment struct, long fieldValue) {
        struct.set(nr_pack$LAYOUT, nr_pack$OFFSET, fieldValue);
    }

    private static final OfLong mr_bcast$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mr_bcast"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t mr_bcast
     * }
     */
    public static final OfLong mr_bcast$layout() {
        return mr_bcast$LAYOUT;
    }

    private static final long mr_bcast$OFFSET = $LAYOUT.byteOffset(groupElement("mr_bcast"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t mr_bcast
     * }
     */
    public static final long mr_bcast$offset() {
        return mr_bcast$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t mr_bcast
     * }
     */
    public static long mr_bcast(MemorySegment struct) {
        return struct.get(mr_bcast$LAYOUT, mr_bcast$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t mr_bcast
     * }
     */
    public static void mr_bcast(MemorySegment struct, long fieldValue) {
        struct.set(mr_bcast$LAYOUT, mr_bcast$OFFSET, fieldValue);
    }

    private static final OfLong nr_bcast$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nr_bcast"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t nr_bcast
     * }
     */
    public static final OfLong nr_bcast$layout() {
        return nr_bcast$LAYOUT;
    }

    private static final long nr_bcast$OFFSET = $LAYOUT.byteOffset(groupElement("nr_bcast"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t nr_bcast
     * }
     */
    public static final long nr_bcast$offset() {
        return nr_bcast$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t nr_bcast
     * }
     */
    public static long nr_bcast(MemorySegment struct) {
        return struct.get(nr_bcast$LAYOUT, nr_bcast$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t nr_bcast
     * }
     */
    public static void nr_bcast(MemorySegment struct, long fieldValue) {
        struct.set(nr_bcast$LAYOUT, nr_bcast$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


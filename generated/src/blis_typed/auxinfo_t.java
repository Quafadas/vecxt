// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     pack_t schema_a;
 *     pack_t schema_b;
 *     const void *a_next;
 *     const void *b_next;
 *     inc_t is_a;
 *     inc_t is_b;
 *     inc_t ps_a;
 *     inc_t ps_b;
 *     dim_t off_m;
 *     dim_t off_n;
 *     void_fp ukr;
 *     const void *params;
 * }
 * }
 */
public class auxinfo_t {

    auxinfo_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_INT.withName("schema_a"),
        blis_h.C_INT.withName("schema_b"),
        blis_h.C_POINTER.withName("a_next"),
        blis_h.C_POINTER.withName("b_next"),
        blis_h.C_LONG_LONG.withName("is_a"),
        blis_h.C_LONG_LONG.withName("is_b"),
        blis_h.C_LONG_LONG.withName("ps_a"),
        blis_h.C_LONG_LONG.withName("ps_b"),
        blis_h.C_LONG_LONG.withName("off_m"),
        blis_h.C_LONG_LONG.withName("off_n"),
        blis_h.C_POINTER.withName("ukr"),
        blis_h.C_POINTER.withName("params")
    ).withName("auxinfo_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt schema_a$LAYOUT = (OfInt)$LAYOUT.select(groupElement("schema_a"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pack_t schema_a
     * }
     */
    public static final OfInt schema_a$layout() {
        return schema_a$LAYOUT;
    }

    private static final long schema_a$OFFSET = $LAYOUT.byteOffset(groupElement("schema_a"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pack_t schema_a
     * }
     */
    public static final long schema_a$offset() {
        return schema_a$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pack_t schema_a
     * }
     */
    public static int schema_a(MemorySegment struct) {
        return struct.get(schema_a$LAYOUT, schema_a$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pack_t schema_a
     * }
     */
    public static void schema_a(MemorySegment struct, int fieldValue) {
        struct.set(schema_a$LAYOUT, schema_a$OFFSET, fieldValue);
    }

    private static final OfInt schema_b$LAYOUT = (OfInt)$LAYOUT.select(groupElement("schema_b"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pack_t schema_b
     * }
     */
    public static final OfInt schema_b$layout() {
        return schema_b$LAYOUT;
    }

    private static final long schema_b$OFFSET = $LAYOUT.byteOffset(groupElement("schema_b"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pack_t schema_b
     * }
     */
    public static final long schema_b$offset() {
        return schema_b$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pack_t schema_b
     * }
     */
    public static int schema_b(MemorySegment struct) {
        return struct.get(schema_b$LAYOUT, schema_b$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pack_t schema_b
     * }
     */
    public static void schema_b(MemorySegment struct, int fieldValue) {
        struct.set(schema_b$LAYOUT, schema_b$OFFSET, fieldValue);
    }

    private static final AddressLayout a_next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("a_next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *a_next
     * }
     */
    public static final AddressLayout a_next$layout() {
        return a_next$LAYOUT;
    }

    private static final long a_next$OFFSET = $LAYOUT.byteOffset(groupElement("a_next"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *a_next
     * }
     */
    public static final long a_next$offset() {
        return a_next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *a_next
     * }
     */
    public static MemorySegment a_next(MemorySegment struct) {
        return struct.get(a_next$LAYOUT, a_next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *a_next
     * }
     */
    public static void a_next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(a_next$LAYOUT, a_next$OFFSET, fieldValue);
    }

    private static final AddressLayout b_next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("b_next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *b_next
     * }
     */
    public static final AddressLayout b_next$layout() {
        return b_next$LAYOUT;
    }

    private static final long b_next$OFFSET = $LAYOUT.byteOffset(groupElement("b_next"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *b_next
     * }
     */
    public static final long b_next$offset() {
        return b_next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *b_next
     * }
     */
    public static MemorySegment b_next(MemorySegment struct) {
        return struct.get(b_next$LAYOUT, b_next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *b_next
     * }
     */
    public static void b_next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(b_next$LAYOUT, b_next$OFFSET, fieldValue);
    }

    private static final OfLong is_a$LAYOUT = (OfLong)$LAYOUT.select(groupElement("is_a"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inc_t is_a
     * }
     */
    public static final OfLong is_a$layout() {
        return is_a$LAYOUT;
    }

    private static final long is_a$OFFSET = $LAYOUT.byteOffset(groupElement("is_a"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inc_t is_a
     * }
     */
    public static final long is_a$offset() {
        return is_a$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inc_t is_a
     * }
     */
    public static long is_a(MemorySegment struct) {
        return struct.get(is_a$LAYOUT, is_a$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inc_t is_a
     * }
     */
    public static void is_a(MemorySegment struct, long fieldValue) {
        struct.set(is_a$LAYOUT, is_a$OFFSET, fieldValue);
    }

    private static final OfLong is_b$LAYOUT = (OfLong)$LAYOUT.select(groupElement("is_b"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inc_t is_b
     * }
     */
    public static final OfLong is_b$layout() {
        return is_b$LAYOUT;
    }

    private static final long is_b$OFFSET = $LAYOUT.byteOffset(groupElement("is_b"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inc_t is_b
     * }
     */
    public static final long is_b$offset() {
        return is_b$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inc_t is_b
     * }
     */
    public static long is_b(MemorySegment struct) {
        return struct.get(is_b$LAYOUT, is_b$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inc_t is_b
     * }
     */
    public static void is_b(MemorySegment struct, long fieldValue) {
        struct.set(is_b$LAYOUT, is_b$OFFSET, fieldValue);
    }

    private static final OfLong ps_a$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ps_a"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inc_t ps_a
     * }
     */
    public static final OfLong ps_a$layout() {
        return ps_a$LAYOUT;
    }

    private static final long ps_a$OFFSET = $LAYOUT.byteOffset(groupElement("ps_a"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inc_t ps_a
     * }
     */
    public static final long ps_a$offset() {
        return ps_a$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inc_t ps_a
     * }
     */
    public static long ps_a(MemorySegment struct) {
        return struct.get(ps_a$LAYOUT, ps_a$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inc_t ps_a
     * }
     */
    public static void ps_a(MemorySegment struct, long fieldValue) {
        struct.set(ps_a$LAYOUT, ps_a$OFFSET, fieldValue);
    }

    private static final OfLong ps_b$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ps_b"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inc_t ps_b
     * }
     */
    public static final OfLong ps_b$layout() {
        return ps_b$LAYOUT;
    }

    private static final long ps_b$OFFSET = $LAYOUT.byteOffset(groupElement("ps_b"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inc_t ps_b
     * }
     */
    public static final long ps_b$offset() {
        return ps_b$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inc_t ps_b
     * }
     */
    public static long ps_b(MemorySegment struct) {
        return struct.get(ps_b$LAYOUT, ps_b$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inc_t ps_b
     * }
     */
    public static void ps_b(MemorySegment struct, long fieldValue) {
        struct.set(ps_b$LAYOUT, ps_b$OFFSET, fieldValue);
    }

    private static final OfLong off_m$LAYOUT = (OfLong)$LAYOUT.select(groupElement("off_m"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t off_m
     * }
     */
    public static final OfLong off_m$layout() {
        return off_m$LAYOUT;
    }

    private static final long off_m$OFFSET = $LAYOUT.byteOffset(groupElement("off_m"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t off_m
     * }
     */
    public static final long off_m$offset() {
        return off_m$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t off_m
     * }
     */
    public static long off_m(MemorySegment struct) {
        return struct.get(off_m$LAYOUT, off_m$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t off_m
     * }
     */
    public static void off_m(MemorySegment struct, long fieldValue) {
        struct.set(off_m$LAYOUT, off_m$OFFSET, fieldValue);
    }

    private static final OfLong off_n$LAYOUT = (OfLong)$LAYOUT.select(groupElement("off_n"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t off_n
     * }
     */
    public static final OfLong off_n$layout() {
        return off_n$LAYOUT;
    }

    private static final long off_n$OFFSET = $LAYOUT.byteOffset(groupElement("off_n"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t off_n
     * }
     */
    public static final long off_n$offset() {
        return off_n$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t off_n
     * }
     */
    public static long off_n(MemorySegment struct) {
        return struct.get(off_n$LAYOUT, off_n$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t off_n
     * }
     */
    public static void off_n(MemorySegment struct, long fieldValue) {
        struct.set(off_n$LAYOUT, off_n$OFFSET, fieldValue);
    }

    private static final AddressLayout ukr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ukr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void_fp ukr
     * }
     */
    public static final AddressLayout ukr$layout() {
        return ukr$LAYOUT;
    }

    private static final long ukr$OFFSET = $LAYOUT.byteOffset(groupElement("ukr"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void_fp ukr
     * }
     */
    public static final long ukr$offset() {
        return ukr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void_fp ukr
     * }
     */
    public static MemorySegment ukr(MemorySegment struct) {
        return struct.get(ukr$LAYOUT, ukr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void_fp ukr
     * }
     */
    public static void ukr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ukr$LAYOUT, ukr$OFFSET, fieldValue);
    }

    private static final AddressLayout params$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static final AddressLayout params$layout() {
        return params$LAYOUT;
    }

    private static final long params$OFFSET = $LAYOUT.byteOffset(groupElement("params"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static final long params$offset() {
        return params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static MemorySegment params(MemorySegment struct) {
        return struct.get(params$LAYOUT, params$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *params
     * }
     */
    public static void params(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(params$LAYOUT, params$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


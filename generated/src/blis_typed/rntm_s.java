// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rntm_s {
 *     timpl_t thread_impl;
 *     bool auto_factor;
 *     dim_t num_threads;
 *     dim_t thrloop[6];
 *     bool pack_a;
 *     bool pack_b;
 *     bool l3_sup;
 * }
 * }
 */
public class rntm_s {

    rntm_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_INT.withName("thread_impl"),
        blis_h.C_BOOL.withName("auto_factor"),
        MemoryLayout.paddingLayout(3),
        blis_h.C_LONG_LONG.withName("num_threads"),
        MemoryLayout.sequenceLayout(6, blis_h.C_LONG_LONG).withName("thrloop"),
        blis_h.C_BOOL.withName("pack_a"),
        blis_h.C_BOOL.withName("pack_b"),
        blis_h.C_BOOL.withName("l3_sup"),
        MemoryLayout.paddingLayout(5)
    ).withName("rntm_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt thread_impl$LAYOUT = (OfInt)$LAYOUT.select(groupElement("thread_impl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * timpl_t thread_impl
     * }
     */
    public static final OfInt thread_impl$layout() {
        return thread_impl$LAYOUT;
    }

    private static final long thread_impl$OFFSET = $LAYOUT.byteOffset(groupElement("thread_impl"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * timpl_t thread_impl
     * }
     */
    public static final long thread_impl$offset() {
        return thread_impl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * timpl_t thread_impl
     * }
     */
    public static int thread_impl(MemorySegment struct) {
        return struct.get(thread_impl$LAYOUT, thread_impl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * timpl_t thread_impl
     * }
     */
    public static void thread_impl(MemorySegment struct, int fieldValue) {
        struct.set(thread_impl$LAYOUT, thread_impl$OFFSET, fieldValue);
    }

    private static final OfBoolean auto_factor$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("auto_factor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool auto_factor
     * }
     */
    public static final OfBoolean auto_factor$layout() {
        return auto_factor$LAYOUT;
    }

    private static final long auto_factor$OFFSET = $LAYOUT.byteOffset(groupElement("auto_factor"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool auto_factor
     * }
     */
    public static final long auto_factor$offset() {
        return auto_factor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool auto_factor
     * }
     */
    public static boolean auto_factor(MemorySegment struct) {
        return struct.get(auto_factor$LAYOUT, auto_factor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool auto_factor
     * }
     */
    public static void auto_factor(MemorySegment struct, boolean fieldValue) {
        struct.set(auto_factor$LAYOUT, auto_factor$OFFSET, fieldValue);
    }

    private static final OfLong num_threads$LAYOUT = (OfLong)$LAYOUT.select(groupElement("num_threads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t num_threads
     * }
     */
    public static final OfLong num_threads$layout() {
        return num_threads$LAYOUT;
    }

    private static final long num_threads$OFFSET = $LAYOUT.byteOffset(groupElement("num_threads"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t num_threads
     * }
     */
    public static final long num_threads$offset() {
        return num_threads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t num_threads
     * }
     */
    public static long num_threads(MemorySegment struct) {
        return struct.get(num_threads$LAYOUT, num_threads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t num_threads
     * }
     */
    public static void num_threads(MemorySegment struct, long fieldValue) {
        struct.set(num_threads$LAYOUT, num_threads$OFFSET, fieldValue);
    }

    private static final SequenceLayout thrloop$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("thrloop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t thrloop[6]
     * }
     */
    public static final SequenceLayout thrloop$layout() {
        return thrloop$LAYOUT;
    }

    private static final long thrloop$OFFSET = $LAYOUT.byteOffset(groupElement("thrloop"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t thrloop[6]
     * }
     */
    public static final long thrloop$offset() {
        return thrloop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t thrloop[6]
     * }
     */
    public static MemorySegment thrloop(MemorySegment struct) {
        return struct.asSlice(thrloop$OFFSET, thrloop$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t thrloop[6]
     * }
     */
    public static void thrloop(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, thrloop$OFFSET, thrloop$LAYOUT.byteSize());
    }

    private static long[] thrloop$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * dim_t thrloop[6]
     * }
     */
    public static long[] thrloop$dimensions() {
        return thrloop$DIMS;
    }
    private static final VarHandle thrloop$ELEM_HANDLE = thrloop$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * dim_t thrloop[6]
     * }
     */
    public static long thrloop(MemorySegment struct, long index0) {
        return (long)thrloop$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * dim_t thrloop[6]
     * }
     */
    public static void thrloop(MemorySegment struct, long index0, long fieldValue) {
        thrloop$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfBoolean pack_a$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("pack_a"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool pack_a
     * }
     */
    public static final OfBoolean pack_a$layout() {
        return pack_a$LAYOUT;
    }

    private static final long pack_a$OFFSET = $LAYOUT.byteOffset(groupElement("pack_a"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool pack_a
     * }
     */
    public static final long pack_a$offset() {
        return pack_a$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool pack_a
     * }
     */
    public static boolean pack_a(MemorySegment struct) {
        return struct.get(pack_a$LAYOUT, pack_a$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool pack_a
     * }
     */
    public static void pack_a(MemorySegment struct, boolean fieldValue) {
        struct.set(pack_a$LAYOUT, pack_a$OFFSET, fieldValue);
    }

    private static final OfBoolean pack_b$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("pack_b"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool pack_b
     * }
     */
    public static final OfBoolean pack_b$layout() {
        return pack_b$LAYOUT;
    }

    private static final long pack_b$OFFSET = $LAYOUT.byteOffset(groupElement("pack_b"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool pack_b
     * }
     */
    public static final long pack_b$offset() {
        return pack_b$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool pack_b
     * }
     */
    public static boolean pack_b(MemorySegment struct) {
        return struct.get(pack_b$LAYOUT, pack_b$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool pack_b
     * }
     */
    public static void pack_b(MemorySegment struct, boolean fieldValue) {
        struct.set(pack_b$LAYOUT, pack_b$OFFSET, fieldValue);
    }

    private static final OfBoolean l3_sup$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("l3_sup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool l3_sup
     * }
     */
    public static final OfBoolean l3_sup$layout() {
        return l3_sup$LAYOUT;
    }

    private static final long l3_sup$OFFSET = $LAYOUT.byteOffset(groupElement("l3_sup"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool l3_sup
     * }
     */
    public static final long l3_sup$offset() {
        return l3_sup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool l3_sup
     * }
     */
    public static boolean l3_sup(MemorySegment struct) {
        return struct.get(l3_sup$LAYOUT, l3_sup$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool l3_sup
     * }
     */
    public static void l3_sup(MemorySegment struct, boolean fieldValue) {
        struct.set(l3_sup$LAYOUT, l3_sup$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


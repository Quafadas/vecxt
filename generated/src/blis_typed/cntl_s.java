// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cntl_s {
 *     void_fp var_func;
 *     struct {
 *         dim_t ways;
 *         struct cntl_s *sub_node;
 *     } sub_nodes[2];
 * }
 * }
 */
public class cntl_s {

    cntl_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_POINTER.withName("var_func"),
        MemoryLayout.sequenceLayout(2, cntl_s.SubNodeStruct.layout()).withName("sub_nodes")
    ).withName("cntl_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout var_func$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("var_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void_fp var_func
     * }
     */
    public static final AddressLayout var_func$layout() {
        return var_func$LAYOUT;
    }

    private static final long var_func$OFFSET = $LAYOUT.byteOffset(groupElement("var_func"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void_fp var_func
     * }
     */
    public static final long var_func$offset() {
        return var_func$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void_fp var_func
     * }
     */
    public static MemorySegment var_func(MemorySegment struct) {
        return struct.get(var_func$LAYOUT, var_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void_fp var_func
     * }
     */
    public static void var_func(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(var_func$LAYOUT, var_func$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     dim_t ways;
     *     struct cntl_s *sub_node;
     * }
     * }
     */
    public static class SubNodeStruct {

        SubNodeStruct() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            blis_h.C_LONG_LONG.withName("ways"),
            blis_h.C_POINTER.withName("sub_node")
        ).withName("SubNodeStruct");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong ways$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ways"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * dim_t ways
         * }
         */
        public static final OfLong ways$layout() {
            return ways$LAYOUT;
        }

        private static final long ways$OFFSET = $LAYOUT.byteOffset(groupElement("ways"));

        /**
         * Offset for field:
         * {@snippet lang=c :
         * dim_t ways
         * }
         */
        public static final long ways$offset() {
            return ways$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * dim_t ways
         * }
         */
        public static long ways(MemorySegment struct) {
            return struct.get(ways$LAYOUT, ways$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * dim_t ways
         * }
         */
        public static void ways(MemorySegment struct, long fieldValue) {
            struct.set(ways$LAYOUT, ways$OFFSET, fieldValue);
        }

        private static final AddressLayout sub_node$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sub_node"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct cntl_s *sub_node
         * }
         */
        public static final AddressLayout sub_node$layout() {
            return sub_node$LAYOUT;
        }

        private static final long sub_node$OFFSET = $LAYOUT.byteOffset(groupElement("sub_node"));

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct cntl_s *sub_node
         * }
         */
        public static final long sub_node$offset() {
            return sub_node$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct cntl_s *sub_node
         * }
         */
        public static MemorySegment sub_node(MemorySegment struct) {
            return struct.get(sub_node$LAYOUT, sub_node$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct cntl_s *sub_node
         * }
         */
        public static void sub_node(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(sub_node$LAYOUT, sub_node$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final SequenceLayout sub_nodes$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("sub_nodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     dim_t ways;
     *     struct cntl_s *sub_node;
     * } sub_nodes[2]
     * }
     */
    public static final SequenceLayout sub_nodes$layout() {
        return sub_nodes$LAYOUT;
    }

    private static final long sub_nodes$OFFSET = $LAYOUT.byteOffset(groupElement("sub_nodes"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     dim_t ways;
     *     struct cntl_s *sub_node;
     * } sub_nodes[2]
     * }
     */
    public static final long sub_nodes$offset() {
        return sub_nodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     dim_t ways;
     *     struct cntl_s *sub_node;
     * } sub_nodes[2]
     * }
     */
    public static MemorySegment sub_nodes(MemorySegment struct) {
        return struct.asSlice(sub_nodes$OFFSET, sub_nodes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     dim_t ways;
     *     struct cntl_s *sub_node;
     * } sub_nodes[2]
     * }
     */
    public static void sub_nodes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sub_nodes$OFFSET, sub_nodes$LAYOUT.byteSize());
    }

    private static long[] sub_nodes$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * struct {
     *     dim_t ways;
     *     struct cntl_s *sub_node;
     * } sub_nodes[2]
     * }
     */
    public static long[] sub_nodes$dimensions() {
        return sub_nodes$DIMS;
    }
    private static final MethodHandle sub_nodes$ELEM_HANDLE = sub_nodes$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * struct {
     *     dim_t ways;
     *     struct cntl_s *sub_node;
     * } sub_nodes[2]
     * }
     */
    public static MemorySegment sub_nodes(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)sub_nodes$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Error | RuntimeException ex) {
            throw ex;
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * struct {
     *     dim_t ways;
     *     struct cntl_s *sub_node;
     * } sub_nodes[2]
     * }
     */
    public static void sub_nodes(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, sub_nodes(struct, index0), 0L, cntl_s.SubNodeStruct.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


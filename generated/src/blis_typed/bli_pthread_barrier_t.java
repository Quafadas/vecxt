// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     bli_pthread_mutex_t mutex;
 *     bli_pthread_cond_t cond;
 *     int count;
 *     int tripCount;
 * }
 * }
 */
public class bli_pthread_barrier_t {

    bli_pthread_barrier_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _opaque_pthread_mutex_t.layout().withName("mutex"),
        _opaque_pthread_cond_t.layout().withName("cond"),
        blis_h.C_INT.withName("count"),
        blis_h.C_INT.withName("tripCount")
    ).withName("bli_pthread_barrier_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout mutex$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("mutex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bli_pthread_mutex_t mutex
     * }
     */
    public static final GroupLayout mutex$layout() {
        return mutex$LAYOUT;
    }

    private static final long mutex$OFFSET = $LAYOUT.byteOffset(groupElement("mutex"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bli_pthread_mutex_t mutex
     * }
     */
    public static final long mutex$offset() {
        return mutex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bli_pthread_mutex_t mutex
     * }
     */
    public static MemorySegment mutex(MemorySegment struct) {
        return struct.asSlice(mutex$OFFSET, mutex$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bli_pthread_mutex_t mutex
     * }
     */
    public static void mutex(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mutex$OFFSET, mutex$LAYOUT.byteSize());
    }

    private static final GroupLayout cond$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cond"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bli_pthread_cond_t cond
     * }
     */
    public static final GroupLayout cond$layout() {
        return cond$LAYOUT;
    }

    private static final long cond$OFFSET = $LAYOUT.byteOffset(groupElement("cond"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bli_pthread_cond_t cond
     * }
     */
    public static final long cond$offset() {
        return cond$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bli_pthread_cond_t cond
     * }
     */
    public static MemorySegment cond(MemorySegment struct) {
        return struct.asSlice(cond$OFFSET, cond$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bli_pthread_cond_t cond
     * }
     */
    public static void cond(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cond$OFFSET, cond$LAYOUT.byteSize());
    }

    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static final OfInt count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = $LAYOUT.byteOffset(groupElement("count"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static int count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static void count(MemorySegment struct, int fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final OfInt tripCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tripCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tripCount
     * }
     */
    public static final OfInt tripCount$layout() {
        return tripCount$LAYOUT;
    }

    private static final long tripCount$OFFSET = $LAYOUT.byteOffset(groupElement("tripCount"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tripCount
     * }
     */
    public static final long tripCount$offset() {
        return tripCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tripCount
     * }
     */
    public static int tripCount(MemorySegment struct) {
        return struct.get(tripCount$LAYOUT, tripCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tripCount
     * }
     */
    public static void tripCount(MemorySegment struct, int fieldValue) {
        struct.set(tripCount$LAYOUT, tripCount$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


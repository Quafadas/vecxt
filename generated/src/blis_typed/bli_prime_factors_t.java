// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     dim_t n;
 *     dim_t sqrt_n;
 *     dim_t f;
 * }
 * }
 */
public class bli_prime_factors_t {

    bli_prime_factors_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_LONG_LONG.withName("n"),
        blis_h.C_LONG_LONG.withName("sqrt_n"),
        blis_h.C_LONG_LONG.withName("f")
    ).withName("bli_prime_factors_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong n$LAYOUT = (OfLong)$LAYOUT.select(groupElement("n"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t n
     * }
     */
    public static final OfLong n$layout() {
        return n$LAYOUT;
    }

    private static final long n$OFFSET = $LAYOUT.byteOffset(groupElement("n"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t n
     * }
     */
    public static final long n$offset() {
        return n$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t n
     * }
     */
    public static long n(MemorySegment struct) {
        return struct.get(n$LAYOUT, n$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t n
     * }
     */
    public static void n(MemorySegment struct, long fieldValue) {
        struct.set(n$LAYOUT, n$OFFSET, fieldValue);
    }

    private static final OfLong sqrt_n$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sqrt_n"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t sqrt_n
     * }
     */
    public static final OfLong sqrt_n$layout() {
        return sqrt_n$LAYOUT;
    }

    private static final long sqrt_n$OFFSET = $LAYOUT.byteOffset(groupElement("sqrt_n"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t sqrt_n
     * }
     */
    public static final long sqrt_n$offset() {
        return sqrt_n$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t sqrt_n
     * }
     */
    public static long sqrt_n(MemorySegment struct) {
        return struct.get(sqrt_n$LAYOUT, sqrt_n$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t sqrt_n
     * }
     */
    public static void sqrt_n(MemorySegment struct, long fieldValue) {
        struct.set(sqrt_n$LAYOUT, sqrt_n$OFFSET, fieldValue);
    }

    private static final OfLong f$LAYOUT = (OfLong)$LAYOUT.select(groupElement("f"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t f
     * }
     */
    public static final OfLong f$layout() {
        return f$LAYOUT;
    }

    private static final long f$OFFSET = $LAYOUT.byteOffset(groupElement("f"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t f
     * }
     */
    public static final long f$offset() {
        return f$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t f
     * }
     */
    public static long f(MemorySegment struct) {
        return struct.get(f$LAYOUT, f$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t f
     * }
     */
    public static void f(MemorySegment struct, long fieldValue) {
        struct.set(f$LAYOUT, f$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


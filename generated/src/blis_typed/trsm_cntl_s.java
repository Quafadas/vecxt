// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct trsm_cntl_s {
 *     part_cntl_t part_jc;
 *     part_cntl_t part_pc;
 *     packm_def_cntl_t pack_b;
 *     part_cntl_t part_ic;
 *     packm_def_cntl_t pack_a_trsm;
 *     trsm_var_cntl_t trsm_ker;
 *     packm_def_cntl_t pack_a_gemm;
 *     trsm_var_cntl_t gemm_ker;
 *     cntl_t ir_loop_gemm;
 *     cntl_t ir_loop_trsm;
 * }
 * }
 */
public class trsm_cntl_s {

    trsm_cntl_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        part_cntl_s.layout().withName("part_jc"),
        part_cntl_s.layout().withName("part_pc"),
        packm_def_cntl_s.layout().withName("pack_b"),
        part_cntl_s.layout().withName("part_ic"),
        packm_def_cntl_s.layout().withName("pack_a_trsm"),
        trsm_var_cntl_s.layout().withName("trsm_ker"),
        packm_def_cntl_s.layout().withName("pack_a_gemm"),
        trsm_var_cntl_s.layout().withName("gemm_ker"),
        cntl_s.layout().withName("ir_loop_gemm"),
        cntl_s.layout().withName("ir_loop_trsm")
    ).withName("trsm_cntl_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout part_jc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("part_jc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * part_cntl_t part_jc
     * }
     */
    public static final GroupLayout part_jc$layout() {
        return part_jc$LAYOUT;
    }

    private static final long part_jc$OFFSET = $LAYOUT.byteOffset(groupElement("part_jc"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * part_cntl_t part_jc
     * }
     */
    public static final long part_jc$offset() {
        return part_jc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * part_cntl_t part_jc
     * }
     */
    public static MemorySegment part_jc(MemorySegment struct) {
        return struct.asSlice(part_jc$OFFSET, part_jc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * part_cntl_t part_jc
     * }
     */
    public static void part_jc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, part_jc$OFFSET, part_jc$LAYOUT.byteSize());
    }

    private static final GroupLayout part_pc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("part_pc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * part_cntl_t part_pc
     * }
     */
    public static final GroupLayout part_pc$layout() {
        return part_pc$LAYOUT;
    }

    private static final long part_pc$OFFSET = $LAYOUT.byteOffset(groupElement("part_pc"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * part_cntl_t part_pc
     * }
     */
    public static final long part_pc$offset() {
        return part_pc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * part_cntl_t part_pc
     * }
     */
    public static MemorySegment part_pc(MemorySegment struct) {
        return struct.asSlice(part_pc$OFFSET, part_pc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * part_cntl_t part_pc
     * }
     */
    public static void part_pc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, part_pc$OFFSET, part_pc$LAYOUT.byteSize());
    }

    private static final GroupLayout pack_b$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pack_b"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_b
     * }
     */
    public static final GroupLayout pack_b$layout() {
        return pack_b$LAYOUT;
    }

    private static final long pack_b$OFFSET = $LAYOUT.byteOffset(groupElement("pack_b"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_b
     * }
     */
    public static final long pack_b$offset() {
        return pack_b$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_b
     * }
     */
    public static MemorySegment pack_b(MemorySegment struct) {
        return struct.asSlice(pack_b$OFFSET, pack_b$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_b
     * }
     */
    public static void pack_b(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pack_b$OFFSET, pack_b$LAYOUT.byteSize());
    }

    private static final GroupLayout part_ic$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("part_ic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * part_cntl_t part_ic
     * }
     */
    public static final GroupLayout part_ic$layout() {
        return part_ic$LAYOUT;
    }

    private static final long part_ic$OFFSET = $LAYOUT.byteOffset(groupElement("part_ic"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * part_cntl_t part_ic
     * }
     */
    public static final long part_ic$offset() {
        return part_ic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * part_cntl_t part_ic
     * }
     */
    public static MemorySegment part_ic(MemorySegment struct) {
        return struct.asSlice(part_ic$OFFSET, part_ic$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * part_cntl_t part_ic
     * }
     */
    public static void part_ic(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, part_ic$OFFSET, part_ic$LAYOUT.byteSize());
    }

    private static final GroupLayout pack_a_trsm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pack_a_trsm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_a_trsm
     * }
     */
    public static final GroupLayout pack_a_trsm$layout() {
        return pack_a_trsm$LAYOUT;
    }

    private static final long pack_a_trsm$OFFSET = $LAYOUT.byteOffset(groupElement("pack_a_trsm"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_a_trsm
     * }
     */
    public static final long pack_a_trsm$offset() {
        return pack_a_trsm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_a_trsm
     * }
     */
    public static MemorySegment pack_a_trsm(MemorySegment struct) {
        return struct.asSlice(pack_a_trsm$OFFSET, pack_a_trsm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_a_trsm
     * }
     */
    public static void pack_a_trsm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pack_a_trsm$OFFSET, pack_a_trsm$LAYOUT.byteSize());
    }

    private static final GroupLayout trsm_ker$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("trsm_ker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * trsm_var_cntl_t trsm_ker
     * }
     */
    public static final GroupLayout trsm_ker$layout() {
        return trsm_ker$LAYOUT;
    }

    private static final long trsm_ker$OFFSET = $LAYOUT.byteOffset(groupElement("trsm_ker"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * trsm_var_cntl_t trsm_ker
     * }
     */
    public static final long trsm_ker$offset() {
        return trsm_ker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * trsm_var_cntl_t trsm_ker
     * }
     */
    public static MemorySegment trsm_ker(MemorySegment struct) {
        return struct.asSlice(trsm_ker$OFFSET, trsm_ker$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * trsm_var_cntl_t trsm_ker
     * }
     */
    public static void trsm_ker(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, trsm_ker$OFFSET, trsm_ker$LAYOUT.byteSize());
    }

    private static final GroupLayout pack_a_gemm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pack_a_gemm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_a_gemm
     * }
     */
    public static final GroupLayout pack_a_gemm$layout() {
        return pack_a_gemm$LAYOUT;
    }

    private static final long pack_a_gemm$OFFSET = $LAYOUT.byteOffset(groupElement("pack_a_gemm"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_a_gemm
     * }
     */
    public static final long pack_a_gemm$offset() {
        return pack_a_gemm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_a_gemm
     * }
     */
    public static MemorySegment pack_a_gemm(MemorySegment struct) {
        return struct.asSlice(pack_a_gemm$OFFSET, pack_a_gemm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * packm_def_cntl_t pack_a_gemm
     * }
     */
    public static void pack_a_gemm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pack_a_gemm$OFFSET, pack_a_gemm$LAYOUT.byteSize());
    }

    private static final GroupLayout gemm_ker$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gemm_ker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * trsm_var_cntl_t gemm_ker
     * }
     */
    public static final GroupLayout gemm_ker$layout() {
        return gemm_ker$LAYOUT;
    }

    private static final long gemm_ker$OFFSET = $LAYOUT.byteOffset(groupElement("gemm_ker"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * trsm_var_cntl_t gemm_ker
     * }
     */
    public static final long gemm_ker$offset() {
        return gemm_ker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * trsm_var_cntl_t gemm_ker
     * }
     */
    public static MemorySegment gemm_ker(MemorySegment struct) {
        return struct.asSlice(gemm_ker$OFFSET, gemm_ker$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * trsm_var_cntl_t gemm_ker
     * }
     */
    public static void gemm_ker(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gemm_ker$OFFSET, gemm_ker$LAYOUT.byteSize());
    }

    private static final GroupLayout ir_loop_gemm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ir_loop_gemm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cntl_t ir_loop_gemm
     * }
     */
    public static final GroupLayout ir_loop_gemm$layout() {
        return ir_loop_gemm$LAYOUT;
    }

    private static final long ir_loop_gemm$OFFSET = $LAYOUT.byteOffset(groupElement("ir_loop_gemm"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cntl_t ir_loop_gemm
     * }
     */
    public static final long ir_loop_gemm$offset() {
        return ir_loop_gemm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cntl_t ir_loop_gemm
     * }
     */
    public static MemorySegment ir_loop_gemm(MemorySegment struct) {
        return struct.asSlice(ir_loop_gemm$OFFSET, ir_loop_gemm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cntl_t ir_loop_gemm
     * }
     */
    public static void ir_loop_gemm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ir_loop_gemm$OFFSET, ir_loop_gemm$LAYOUT.byteSize());
    }

    private static final GroupLayout ir_loop_trsm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ir_loop_trsm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cntl_t ir_loop_trsm
     * }
     */
    public static final GroupLayout ir_loop_trsm$layout() {
        return ir_loop_trsm$LAYOUT;
    }

    private static final long ir_loop_trsm$OFFSET = $LAYOUT.byteOffset(groupElement("ir_loop_trsm"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cntl_t ir_loop_trsm
     * }
     */
    public static final long ir_loop_trsm$offset() {
        return ir_loop_trsm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cntl_t ir_loop_trsm
     * }
     */
    public static MemorySegment ir_loop_trsm(MemorySegment struct) {
        return struct.asSlice(ir_loop_trsm$OFFSET, ir_loop_trsm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cntl_t ir_loop_trsm
     * }
     */
    public static void ir_loop_trsm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ir_loop_trsm$OFFSET, ir_loop_trsm$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct getopt_s {
 *     const char *nextchar;
 *     const char *optarg;
 *     int optind;
 *     int opterr;
 *     int optopt;
 * }
 * }
 */
public class getopt_s {

    getopt_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        blis_h.C_POINTER.withName("nextchar"),
        blis_h.C_POINTER.withName("optarg"),
        blis_h.C_INT.withName("optind"),
        blis_h.C_INT.withName("opterr"),
        blis_h.C_INT.withName("optopt"),
        MemoryLayout.paddingLayout(4)
    ).withName("getopt_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nextchar$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextchar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *nextchar
     * }
     */
    public static final AddressLayout nextchar$layout() {
        return nextchar$LAYOUT;
    }

    private static final long nextchar$OFFSET = $LAYOUT.byteOffset(groupElement("nextchar"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *nextchar
     * }
     */
    public static final long nextchar$offset() {
        return nextchar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *nextchar
     * }
     */
    public static MemorySegment nextchar(MemorySegment struct) {
        return struct.get(nextchar$LAYOUT, nextchar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *nextchar
     * }
     */
    public static void nextchar(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextchar$LAYOUT, nextchar$OFFSET, fieldValue);
    }

    private static final AddressLayout optarg$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("optarg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *optarg
     * }
     */
    public static final AddressLayout optarg$layout() {
        return optarg$LAYOUT;
    }

    private static final long optarg$OFFSET = $LAYOUT.byteOffset(groupElement("optarg"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *optarg
     * }
     */
    public static final long optarg$offset() {
        return optarg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *optarg
     * }
     */
    public static MemorySegment optarg(MemorySegment struct) {
        return struct.get(optarg$LAYOUT, optarg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *optarg
     * }
     */
    public static void optarg(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(optarg$LAYOUT, optarg$OFFSET, fieldValue);
    }

    private static final OfInt optind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("optind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int optind
     * }
     */
    public static final OfInt optind$layout() {
        return optind$LAYOUT;
    }

    private static final long optind$OFFSET = $LAYOUT.byteOffset(groupElement("optind"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int optind
     * }
     */
    public static final long optind$offset() {
        return optind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int optind
     * }
     */
    public static int optind(MemorySegment struct) {
        return struct.get(optind$LAYOUT, optind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int optind
     * }
     */
    public static void optind(MemorySegment struct, int fieldValue) {
        struct.set(optind$LAYOUT, optind$OFFSET, fieldValue);
    }

    private static final OfInt opterr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("opterr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int opterr
     * }
     */
    public static final OfInt opterr$layout() {
        return opterr$LAYOUT;
    }

    private static final long opterr$OFFSET = $LAYOUT.byteOffset(groupElement("opterr"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int opterr
     * }
     */
    public static final long opterr$offset() {
        return opterr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int opterr
     * }
     */
    public static int opterr(MemorySegment struct) {
        return struct.get(opterr$LAYOUT, opterr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int opterr
     * }
     */
    public static void opterr(MemorySegment struct, int fieldValue) {
        struct.set(opterr$LAYOUT, opterr$OFFSET, fieldValue);
    }

    private static final OfInt optopt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("optopt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int optopt
     * }
     */
    public static final OfInt optopt$layout() {
        return optopt$LAYOUT;
    }

    private static final long optopt$OFFSET = $LAYOUT.byteOffset(groupElement("optopt"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int optopt
     * }
     */
    public static final long optopt$offset() {
        return optopt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int optopt
     * }
     */
    public static int optopt(MemorySegment struct) {
        return struct.get(optopt$LAYOUT, optopt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int optopt
     * }
     */
    public static void optopt(MemorySegment struct, int fieldValue) {
        struct.set(optopt$LAYOUT, optopt$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * typedef void (*axpyf_vft)(conj_t, conj_t, dim_t, dim_t, const void *, const void *, inc_t, inc_t, const void *, inc_t, void *, inc_t)
 * }
 */
public final class axpyf_vft {

    private axpyf_vft() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        void apply(int conja, int conjx, long m, long b_n, MemorySegment alpha, MemorySegment a, long inca, long lda, MemorySegment x, long incx, MemorySegment y, long incy);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
        blis_h.C_INT,
        blis_h.C_INT,
        blis_h.C_LONG_LONG,
        blis_h.C_LONG_LONG,
        blis_h.C_POINTER,
        blis_h.C_POINTER,
        blis_h.C_LONG_LONG,
        blis_h.C_LONG_LONG,
        blis_h.C_POINTER,
        blis_h.C_LONG_LONG,
        blis_h.C_POINTER,
        blis_h.C_LONG_LONG
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = blis_h.upcallHandle(axpyf_vft.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(axpyf_vft.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static void invoke(MemorySegment funcPtr, int conja, int conjx, long m, long b_n, MemorySegment alpha, MemorySegment a, long inca, long lda, MemorySegment x, long incx, MemorySegment y, long incy) {
        try {
             DOWN$MH.invokeExact(funcPtr, conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy);
        } catch (Error | RuntimeException ex) {
            throw ex;
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


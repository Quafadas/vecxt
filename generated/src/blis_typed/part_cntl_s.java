// Generated by jextract

package blis_typed;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct part_cntl_s {
 *     cntl_t cntl;
 *     num_t b_dt;
 *     dim_t b_alg;
 *     dim_t b_max;
 *     dim_t b_scale;
 *     dim_t b_mult;
 *     dim_t b_mult_scale;
 *     dir_t direct;
 *     bool use_weighted;
 * }
 * }
 */
public class part_cntl_s {

    part_cntl_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        cntl_s.layout().withName("cntl"),
        blis_h.C_INT.withName("b_dt"),
        MemoryLayout.paddingLayout(4),
        blis_h.C_LONG_LONG.withName("b_alg"),
        blis_h.C_LONG_LONG.withName("b_max"),
        blis_h.C_LONG_LONG.withName("b_scale"),
        blis_h.C_LONG_LONG.withName("b_mult"),
        blis_h.C_LONG_LONG.withName("b_mult_scale"),
        blis_h.C_INT.withName("direct"),
        blis_h.C_BOOL.withName("use_weighted"),
        MemoryLayout.paddingLayout(3)
    ).withName("part_cntl_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout cntl$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cntl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static final GroupLayout cntl$layout() {
        return cntl$LAYOUT;
    }

    private static final long cntl$OFFSET = $LAYOUT.byteOffset(groupElement("cntl"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static final long cntl$offset() {
        return cntl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static MemorySegment cntl(MemorySegment struct) {
        return struct.asSlice(cntl$OFFSET, cntl$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cntl_t cntl
     * }
     */
    public static void cntl(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cntl$OFFSET, cntl$LAYOUT.byteSize());
    }

    private static final OfInt b_dt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("b_dt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * num_t b_dt
     * }
     */
    public static final OfInt b_dt$layout() {
        return b_dt$LAYOUT;
    }

    private static final long b_dt$OFFSET = $LAYOUT.byteOffset(groupElement("b_dt"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * num_t b_dt
     * }
     */
    public static final long b_dt$offset() {
        return b_dt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * num_t b_dt
     * }
     */
    public static int b_dt(MemorySegment struct) {
        return struct.get(b_dt$LAYOUT, b_dt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * num_t b_dt
     * }
     */
    public static void b_dt(MemorySegment struct, int fieldValue) {
        struct.set(b_dt$LAYOUT, b_dt$OFFSET, fieldValue);
    }

    private static final OfLong b_alg$LAYOUT = (OfLong)$LAYOUT.select(groupElement("b_alg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t b_alg
     * }
     */
    public static final OfLong b_alg$layout() {
        return b_alg$LAYOUT;
    }

    private static final long b_alg$OFFSET = $LAYOUT.byteOffset(groupElement("b_alg"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t b_alg
     * }
     */
    public static final long b_alg$offset() {
        return b_alg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t b_alg
     * }
     */
    public static long b_alg(MemorySegment struct) {
        return struct.get(b_alg$LAYOUT, b_alg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t b_alg
     * }
     */
    public static void b_alg(MemorySegment struct, long fieldValue) {
        struct.set(b_alg$LAYOUT, b_alg$OFFSET, fieldValue);
    }

    private static final OfLong b_max$LAYOUT = (OfLong)$LAYOUT.select(groupElement("b_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t b_max
     * }
     */
    public static final OfLong b_max$layout() {
        return b_max$LAYOUT;
    }

    private static final long b_max$OFFSET = $LAYOUT.byteOffset(groupElement("b_max"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t b_max
     * }
     */
    public static final long b_max$offset() {
        return b_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t b_max
     * }
     */
    public static long b_max(MemorySegment struct) {
        return struct.get(b_max$LAYOUT, b_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t b_max
     * }
     */
    public static void b_max(MemorySegment struct, long fieldValue) {
        struct.set(b_max$LAYOUT, b_max$OFFSET, fieldValue);
    }

    private static final OfLong b_scale$LAYOUT = (OfLong)$LAYOUT.select(groupElement("b_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t b_scale
     * }
     */
    public static final OfLong b_scale$layout() {
        return b_scale$LAYOUT;
    }

    private static final long b_scale$OFFSET = $LAYOUT.byteOffset(groupElement("b_scale"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t b_scale
     * }
     */
    public static final long b_scale$offset() {
        return b_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t b_scale
     * }
     */
    public static long b_scale(MemorySegment struct) {
        return struct.get(b_scale$LAYOUT, b_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t b_scale
     * }
     */
    public static void b_scale(MemorySegment struct, long fieldValue) {
        struct.set(b_scale$LAYOUT, b_scale$OFFSET, fieldValue);
    }

    private static final OfLong b_mult$LAYOUT = (OfLong)$LAYOUT.select(groupElement("b_mult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t b_mult
     * }
     */
    public static final OfLong b_mult$layout() {
        return b_mult$LAYOUT;
    }

    private static final long b_mult$OFFSET = $LAYOUT.byteOffset(groupElement("b_mult"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t b_mult
     * }
     */
    public static final long b_mult$offset() {
        return b_mult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t b_mult
     * }
     */
    public static long b_mult(MemorySegment struct) {
        return struct.get(b_mult$LAYOUT, b_mult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t b_mult
     * }
     */
    public static void b_mult(MemorySegment struct, long fieldValue) {
        struct.set(b_mult$LAYOUT, b_mult$OFFSET, fieldValue);
    }

    private static final OfLong b_mult_scale$LAYOUT = (OfLong)$LAYOUT.select(groupElement("b_mult_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim_t b_mult_scale
     * }
     */
    public static final OfLong b_mult_scale$layout() {
        return b_mult_scale$LAYOUT;
    }

    private static final long b_mult_scale$OFFSET = $LAYOUT.byteOffset(groupElement("b_mult_scale"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim_t b_mult_scale
     * }
     */
    public static final long b_mult_scale$offset() {
        return b_mult_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim_t b_mult_scale
     * }
     */
    public static long b_mult_scale(MemorySegment struct) {
        return struct.get(b_mult_scale$LAYOUT, b_mult_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim_t b_mult_scale
     * }
     */
    public static void b_mult_scale(MemorySegment struct, long fieldValue) {
        struct.set(b_mult_scale$LAYOUT, b_mult_scale$OFFSET, fieldValue);
    }

    private static final OfInt direct$LAYOUT = (OfInt)$LAYOUT.select(groupElement("direct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dir_t direct
     * }
     */
    public static final OfInt direct$layout() {
        return direct$LAYOUT;
    }

    private static final long direct$OFFSET = $LAYOUT.byteOffset(groupElement("direct"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dir_t direct
     * }
     */
    public static final long direct$offset() {
        return direct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dir_t direct
     * }
     */
    public static int direct(MemorySegment struct) {
        return struct.get(direct$LAYOUT, direct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dir_t direct
     * }
     */
    public static void direct(MemorySegment struct, int fieldValue) {
        struct.set(direct$LAYOUT, direct$OFFSET, fieldValue);
    }

    private static final OfBoolean use_weighted$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("use_weighted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool use_weighted
     * }
     */
    public static final OfBoolean use_weighted$layout() {
        return use_weighted$LAYOUT;
    }

    private static final long use_weighted$OFFSET = $LAYOUT.byteOffset(groupElement("use_weighted"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool use_weighted
     * }
     */
    public static final long use_weighted$offset() {
        return use_weighted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool use_weighted
     * }
     */
    public static boolean use_weighted(MemorySegment struct) {
        return struct.get(use_weighted$LAYOUT, use_weighted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool use_weighted
     * }
     */
    public static void use_weighted(MemorySegment struct, boolean fieldValue) {
        struct.set(use_weighted$LAYOUT, use_weighted$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

